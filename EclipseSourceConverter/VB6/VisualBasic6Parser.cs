//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from VisualBasic6.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace EclipseSourceConverter.VB6 {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
public partial class VisualBasic6Parser : Parser {
	public const int
		ACCESS=1, ADDRESSOF=2, ALIAS=3, AND=4, ATTRIBUTE=5, APPACTIVATE=6, APPEND=7, 
		AS=8, BEGIN=9, BEEP=10, BINARY=11, BOOLEAN=12, BYVAL=13, BYREF=14, BYTE=15, 
		CALL=16, CASE=17, CHDIR=18, CHDRIVE=19, CLASS=20, CLOSE=21, COLLECTION=22, 
		CONST=23, DATE=24, DECLARE=25, DEFBOOL=26, DEFBYTE=27, DEFDATE=28, DEFDBL=29, 
		DEFDEC=30, DEFCUR=31, DEFINT=32, DEFLNG=33, DEFOBJ=34, DEFSNG=35, DEFSTR=36, 
		DEFVAR=37, DELETESETTING=38, DIM=39, DO=40, DOUBLE=41, EACH=42, ELSE=43, 
		ELSEIF=44, END_ENUM=45, END_FUNCTION=46, END_IF=47, END_PROPERTY=48, END_SELECT=49, 
		END_SUB=50, END_TYPE=51, END_WITH=52, END=53, ENUM=54, EQV=55, ERASE=56, 
		ERROR=57, EVENT=58, EXIT_DO=59, EXIT_FOR=60, EXIT_FUNCTION=61, EXIT_PROPERTY=62, 
		EXIT_SUB=63, FALSE=64, FILECOPY=65, FRIEND=66, FOR=67, FUNCTION=68, GET=69, 
		GLOBAL=70, GOSUB=71, GOTO=72, IF=73, IMP=74, IMPLEMENTS=75, IN=76, INPUT=77, 
		IS=78, INTEGER=79, KILL=80, LOAD=81, LOCK=82, LONG=83, LOOP=84, LEN=85, 
		LET=86, LIB=87, LIKE=88, LINE_INPUT=89, LOCK_READ=90, LOCK_WRITE=91, LOCK_READ_WRITE=92, 
		LSET=93, MACRO_IF=94, MACRO_ELSEIF=95, MACRO_ELSE=96, MACRO_END_IF=97, 
		ME=98, MID=99, MKDIR=100, MOD=101, NAME=102, NEXT=103, NEW=104, NOT=105, 
		NOTHING=106, NULL=107, ON=108, ON_ERROR=109, OPEN=110, OPTIONAL=111, OPTION_BASE=112, 
		OPTION_EXPLICIT=113, OPTION_COMPARE=114, OPTION_PRIVATE_MODULE=115, OR=116, 
		OUTPUT=117, PARAMARRAY=118, PRESERVE=119, PRINT=120, PRIVATE=121, PROPERTY_GET=122, 
		PROPERTY_LET=123, PROPERTY_SET=124, PUBLIC=125, PUT=126, RANDOM=127, RANDOMIZE=128, 
		RAISEEVENT=129, READ=130, READ_WRITE=131, REDIM=132, REM=133, RESET=134, 
		RESUME=135, RETURN=136, RMDIR=137, RSET=138, SAVEPICTURE=139, SAVESETTING=140, 
		SEEK=141, SELECT=142, SENDKEYS=143, SET=144, SETATTR=145, SHARED=146, 
		SINGLE=147, SPC=148, STATIC=149, STEP=150, STOP=151, STRING=152, SUB=153, 
		TAB=154, TEXT=155, THEN=156, TIME=157, TO=158, TRUE=159, TYPE=160, TYPEOF=161, 
		UNLOAD=162, UNLOCK=163, UNTIL=164, VARIANT=165, VERSION=166, WEND=167, 
		WHILE=168, WIDTH=169, WITH=170, WITHEVENTS=171, WRITE=172, XOR=173, AMPERSAND=174, 
		ASSIGN=175, AT=176, COLON=177, COMMA=178, DIV=179, DOLLAR=180, DOT=181, 
		EQ=182, EXCLAMATIONMARK=183, GEQ=184, GT=185, HASH=186, LEQ=187, LPAREN=188, 
		LT=189, MINUS=190, MINUS_EQ=191, MULT=192, NEQ=193, PERCENT=194, PLUS=195, 
		PLUS_EQ=196, POW=197, RPAREN=198, SEMICOLON=199, L_SQUARE_BRACKET=200, 
		R_SQUARE_BRACKET=201, STRINGLITERAL=202, DATELITERAL=203, COLORLITERAL=204, 
		INTEGERLITERAL=205, DOUBLELITERAL=206, FILENUMBER=207, IDENTIFIER=208, 
		LINE_CONTINUATION=209, NEWLINE=210, COMMENT=211, WS=212;
	public const int
		RULE_startRule = 0, RULE_module = 1, RULE_moduleHeader = 2, RULE_moduleConfig = 3, 
		RULE_moduleConfigElement = 4, RULE_moduleAttributes = 5, RULE_moduleOptions = 6, 
		RULE_moduleOption = 7, RULE_moduleBody = 8, RULE_moduleBodyElement = 9, 
		RULE_moduleBlock = 10, RULE_attributeStmt = 11, RULE_block = 12, RULE_blockStmt = 13, 
		RULE_appactivateStmt = 14, RULE_beepStmt = 15, RULE_chdirStmt = 16, RULE_chdriveStmt = 17, 
		RULE_closeStmt = 18, RULE_constStmt = 19, RULE_constSubStmt = 20, RULE_dateStmt = 21, 
		RULE_declareStmt = 22, RULE_deftypeStmt = 23, RULE_deleteSettingStmt = 24, 
		RULE_doLoopStmt = 25, RULE_endStmt = 26, RULE_enumerationStmt = 27, RULE_enumerationStmt_Constant = 28, 
		RULE_eraseStmt = 29, RULE_errorStmt = 30, RULE_eventStmt = 31, RULE_exitStmt = 32, 
		RULE_filecopyStmt = 33, RULE_forEachStmt = 34, RULE_forNextStmt = 35, 
		RULE_functionStmt = 36, RULE_getStmt = 37, RULE_goSubStmt = 38, RULE_goToStmt = 39, 
		RULE_ifThenElseStmt = 40, RULE_ifBlockStmt = 41, RULE_ifConditionStmt = 42, 
		RULE_ifElseIfBlockStmt = 43, RULE_ifElseBlockStmt = 44, RULE_implementsStmt = 45, 
		RULE_inputStmt = 46, RULE_killStmt = 47, RULE_letStmt = 48, RULE_lineInputStmt = 49, 
		RULE_loadStmt = 50, RULE_lockStmt = 51, RULE_lsetStmt = 52, RULE_macroIfThenElseStmt = 53, 
		RULE_macroIfBlockStmt = 54, RULE_macroElseIfBlockStmt = 55, RULE_macroElseBlockStmt = 56, 
		RULE_midStmt = 57, RULE_mkdirStmt = 58, RULE_nameStmt = 59, RULE_onErrorStmt = 60, 
		RULE_onGoToStmt = 61, RULE_onGoSubStmt = 62, RULE_openStmt = 63, RULE_outputList = 64, 
		RULE_outputList_Expression = 65, RULE_printStmt = 66, RULE_propertyGetStmt = 67, 
		RULE_propertySetStmt = 68, RULE_propertyLetStmt = 69, RULE_putStmt = 70, 
		RULE_raiseEventStmt = 71, RULE_randomizeStmt = 72, RULE_redimStmt = 73, 
		RULE_redimSubStmt = 74, RULE_resetStmt = 75, RULE_resumeStmt = 76, RULE_returnStmt = 77, 
		RULE_rmdirStmt = 78, RULE_rsetStmt = 79, RULE_savepictureStmt = 80, RULE_saveSettingStmt = 81, 
		RULE_seekStmt = 82, RULE_selectCaseStmt = 83, RULE_sC_Case = 84, RULE_sC_Cond = 85, 
		RULE_sendkeysStmt = 86, RULE_setattrStmt = 87, RULE_setStmt = 88, RULE_stopStmt = 89, 
		RULE_subStmt = 90, RULE_timeStmt = 91, RULE_typeStmt = 92, RULE_typeStmt_Element = 93, 
		RULE_typeOfStmt = 94, RULE_unloadStmt = 95, RULE_unlockStmt = 96, RULE_valueStmt = 97, 
		RULE_variableStmt = 98, RULE_variableListStmt = 99, RULE_variableSubStmt = 100, 
		RULE_whileWendStmt = 101, RULE_widthStmt = 102, RULE_withStmt = 103, RULE_writeStmt = 104, 
		RULE_explicitCallStmt = 105, RULE_eCS_ProcedureCall = 106, RULE_eCS_MemberProcedureCall = 107, 
		RULE_implicitCallStmt_InBlock = 108, RULE_iCS_B_ProcedureCall = 109, RULE_iCS_B_MemberProcedureCall = 110, 
		RULE_implicitCallStmt_InStmt = 111, RULE_iCS_S_VariableOrProcedureCall = 112, 
		RULE_iCS_S_ProcedureOrArrayCall = 113, RULE_iCS_S_MembersCall = 114, RULE_iCS_S_MemberCall = 115, 
		RULE_iCS_S_DictionaryCall = 116, RULE_argsCall = 117, RULE_argCall = 118, 
		RULE_dictionaryCallStmt = 119, RULE_argList = 120, RULE_arg = 121, RULE_argDefaultValue = 122, 
		RULE_subscripts = 123, RULE_subscript = 124, RULE_ambiguousIdentifier = 125, 
		RULE_asTypeClause = 126, RULE_baseType = 127, RULE_certainIdentifier = 128, 
		RULE_comparisonOperator = 129, RULE_complexType = 130, RULE_fieldLength = 131, 
		RULE_letterrange = 132, RULE_lineLabel = 133, RULE_literal = 134, RULE_type = 135, 
		RULE_typeHint = 136, RULE_visibility = 137, RULE_ambiguousKeyword = 138;
	public static readonly string[] ruleNames = {
		"startRule", "module", "moduleHeader", "moduleConfig", "moduleConfigElement", 
		"moduleAttributes", "moduleOptions", "moduleOption", "moduleBody", "moduleBodyElement", 
		"moduleBlock", "attributeStmt", "block", "blockStmt", "appactivateStmt", 
		"beepStmt", "chdirStmt", "chdriveStmt", "closeStmt", "constStmt", "constSubStmt", 
		"dateStmt", "declareStmt", "deftypeStmt", "deleteSettingStmt", "doLoopStmt", 
		"endStmt", "enumerationStmt", "enumerationStmt_Constant", "eraseStmt", 
		"errorStmt", "eventStmt", "exitStmt", "filecopyStmt", "forEachStmt", "forNextStmt", 
		"functionStmt", "getStmt", "goSubStmt", "goToStmt", "ifThenElseStmt", 
		"ifBlockStmt", "ifConditionStmt", "ifElseIfBlockStmt", "ifElseBlockStmt", 
		"implementsStmt", "inputStmt", "killStmt", "letStmt", "lineInputStmt", 
		"loadStmt", "lockStmt", "lsetStmt", "macroIfThenElseStmt", "macroIfBlockStmt", 
		"macroElseIfBlockStmt", "macroElseBlockStmt", "midStmt", "mkdirStmt", 
		"nameStmt", "onErrorStmt", "onGoToStmt", "onGoSubStmt", "openStmt", "outputList", 
		"outputList_Expression", "printStmt", "propertyGetStmt", "propertySetStmt", 
		"propertyLetStmt", "putStmt", "raiseEventStmt", "randomizeStmt", "redimStmt", 
		"redimSubStmt", "resetStmt", "resumeStmt", "returnStmt", "rmdirStmt", 
		"rsetStmt", "savepictureStmt", "saveSettingStmt", "seekStmt", "selectCaseStmt", 
		"sC_Case", "sC_Cond", "sendkeysStmt", "setattrStmt", "setStmt", "stopStmt", 
		"subStmt", "timeStmt", "typeStmt", "typeStmt_Element", "typeOfStmt", "unloadStmt", 
		"unlockStmt", "valueStmt", "variableStmt", "variableListStmt", "variableSubStmt", 
		"whileWendStmt", "widthStmt", "withStmt", "writeStmt", "explicitCallStmt", 
		"eCS_ProcedureCall", "eCS_MemberProcedureCall", "implicitCallStmt_InBlock", 
		"iCS_B_ProcedureCall", "iCS_B_MemberProcedureCall", "implicitCallStmt_InStmt", 
		"iCS_S_VariableOrProcedureCall", "iCS_S_ProcedureOrArrayCall", "iCS_S_MembersCall", 
		"iCS_S_MemberCall", "iCS_S_DictionaryCall", "argsCall", "argCall", "dictionaryCallStmt", 
		"argList", "arg", "argDefaultValue", "subscripts", "subscript", "ambiguousIdentifier", 
		"asTypeClause", "baseType", "certainIdentifier", "comparisonOperator", 
		"complexType", "fieldLength", "letterrange", "lineLabel", "literal", "type", 
		"typeHint", "visibility", "ambiguousKeyword"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "'&'", "':='", "'@'", "':'", "','", 
		null, "'$'", "'.'", "'='", "'!'", "'>='", "'>'", "'#'", "'<='", "'('", 
		"'<'", "'-'", "'-='", "'*'", "'<>'", "'%'", "'+'", "'+='", "'^'", "')'", 
		"';'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ACCESS", "ADDRESSOF", "ALIAS", "AND", "ATTRIBUTE", "APPACTIVATE", 
		"APPEND", "AS", "BEGIN", "BEEP", "BINARY", "BOOLEAN", "BYVAL", "BYREF", 
		"BYTE", "CALL", "CASE", "CHDIR", "CHDRIVE", "CLASS", "CLOSE", "COLLECTION", 
		"CONST", "DATE", "DECLARE", "DEFBOOL", "DEFBYTE", "DEFDATE", "DEFDBL", 
		"DEFDEC", "DEFCUR", "DEFINT", "DEFLNG", "DEFOBJ", "DEFSNG", "DEFSTR", 
		"DEFVAR", "DELETESETTING", "DIM", "DO", "DOUBLE", "EACH", "ELSE", "ELSEIF", 
		"END_ENUM", "END_FUNCTION", "END_IF", "END_PROPERTY", "END_SELECT", "END_SUB", 
		"END_TYPE", "END_WITH", "END", "ENUM", "EQV", "ERASE", "ERROR", "EVENT", 
		"EXIT_DO", "EXIT_FOR", "EXIT_FUNCTION", "EXIT_PROPERTY", "EXIT_SUB", "FALSE", 
		"FILECOPY", "FRIEND", "FOR", "FUNCTION", "GET", "GLOBAL", "GOSUB", "GOTO", 
		"IF", "IMP", "IMPLEMENTS", "IN", "INPUT", "IS", "INTEGER", "KILL", "LOAD", 
		"LOCK", "LONG", "LOOP", "LEN", "LET", "LIB", "LIKE", "LINE_INPUT", "LOCK_READ", 
		"LOCK_WRITE", "LOCK_READ_WRITE", "LSET", "MACRO_IF", "MACRO_ELSEIF", "MACRO_ELSE", 
		"MACRO_END_IF", "ME", "MID", "MKDIR", "MOD", "NAME", "NEXT", "NEW", "NOT", 
		"NOTHING", "NULL", "ON", "ON_ERROR", "OPEN", "OPTIONAL", "OPTION_BASE", 
		"OPTION_EXPLICIT", "OPTION_COMPARE", "OPTION_PRIVATE_MODULE", "OR", "OUTPUT", 
		"PARAMARRAY", "PRESERVE", "PRINT", "PRIVATE", "PROPERTY_GET", "PROPERTY_LET", 
		"PROPERTY_SET", "PUBLIC", "PUT", "RANDOM", "RANDOMIZE", "RAISEEVENT", 
		"READ", "READ_WRITE", "REDIM", "REM", "RESET", "RESUME", "RETURN", "RMDIR", 
		"RSET", "SAVEPICTURE", "SAVESETTING", "SEEK", "SELECT", "SENDKEYS", "SET", 
		"SETATTR", "SHARED", "SINGLE", "SPC", "STATIC", "STEP", "STOP", "STRING", 
		"SUB", "TAB", "TEXT", "THEN", "TIME", "TO", "TRUE", "TYPE", "TYPEOF", 
		"UNLOAD", "UNLOCK", "UNTIL", "VARIANT", "VERSION", "WEND", "WHILE", "WIDTH", 
		"WITH", "WITHEVENTS", "WRITE", "XOR", "AMPERSAND", "ASSIGN", "AT", "COLON", 
		"COMMA", "DIV", "DOLLAR", "DOT", "EQ", "EXCLAMATIONMARK", "GEQ", "GT", 
		"HASH", "LEQ", "LPAREN", "LT", "MINUS", "MINUS_EQ", "MULT", "NEQ", "PERCENT", 
		"PLUS", "PLUS_EQ", "POW", "RPAREN", "SEMICOLON", "L_SQUARE_BRACKET", "R_SQUARE_BRACKET", 
		"STRINGLITERAL", "DATELITERAL", "COLORLITERAL", "INTEGERLITERAL", "DOUBLELITERAL", 
		"FILENUMBER", "IDENTIFIER", "LINE_CONTINUATION", "NEWLINE", "COMMENT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "VisualBasic6.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public VisualBasic6Parser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class StartRuleContext : ParserRuleContext {
		public ModuleContext module() {
			return GetRuleContext<ModuleContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(VisualBasic6Parser.Eof, 0); }
		public StartRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startRule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterStartRule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitStartRule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartRuleContext startRule() {
		StartRuleContext _localctx = new StartRuleContext(Context, State);
		EnterRule(_localctx, 0, RULE_startRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278; module();
			State = 279; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleHeaderContext moduleHeader() {
			return GetRuleContext<ModuleHeaderContext>(0);
		}
		public ModuleConfigContext moduleConfig() {
			return GetRuleContext<ModuleConfigContext>(0);
		}
		public ModuleAttributesContext moduleAttributes() {
			return GetRuleContext<ModuleAttributesContext>(0);
		}
		public ModuleOptionsContext moduleOptions() {
			return GetRuleContext<ModuleOptionsContext>(0);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 2, RULE_module);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 282;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 281; Match(WS);
				}
				break;
			}
			State = 287;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 284; Match(NEWLINE);
					}
					} 
				}
				State = 289;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 296;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 290; moduleHeader();
				State = 292;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 291; Match(NEWLINE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 294;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
			State = 299;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 298; moduleConfig();
				}
				break;
			}
			State = 304;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 301; Match(NEWLINE);
					}
					} 
				}
				State = 306;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			State = 308;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 307; moduleAttributes();
				}
				break;
			}
			State = 313;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 310; Match(NEWLINE);
					}
					} 
				}
				State = 315;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			State = 317;
			_la = TokenStream.La(1);
			if (((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (OPTION_BASE - 112)) | (1L << (OPTION_EXPLICIT - 112)) | (1L << (OPTION_COMPARE - 112)) | (1L << (OPTION_PRIVATE_MODULE - 112)))) != 0)) {
				{
				State = 316; moduleOptions();
				}
			}

			State = 322;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 319; Match(NEWLINE);
					}
					} 
				}
				State = 324;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 326;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION) | (1L << EXIT_PROPERTY) | (1L << EXIT_SUB))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROPERTY_GET - 64)) | (1L << (PROPERTY_LET - 64)) | (1L << (PROPERTY_SET - 64)) | (1L << (PUBLIC - 64)) | (1L << (PUT - 64)) | (1L << (RANDOM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 325; moduleBody();
				}
			}

			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 328; Match(NEWLINE);
				}
				}
				State = 333;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 335;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 334; Match(WS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleHeaderContext : ParserRuleContext {
		public ITerminalNode VERSION() { return GetToken(VisualBasic6Parser.VERSION, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode DOUBLELITERAL() { return GetToken(VisualBasic6Parser.DOUBLELITERAL, 0); }
		public ITerminalNode CLASS() { return GetToken(VisualBasic6Parser.CLASS, 0); }
		public ModuleHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleHeader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleHeader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleHeaderContext moduleHeader() {
		ModuleHeaderContext _localctx = new ModuleHeaderContext(Context, State);
		EnterRule(_localctx, 4, RULE_moduleHeader);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 337; Match(VERSION);
			State = 338; Match(WS);
			State = 339; Match(DOUBLELITERAL);
			State = 340; Match(WS);
			State = 341; Match(CLASS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigContext : ParserRuleContext {
		public ITerminalNode BEGIN() { return GetToken(VisualBasic6Parser.BEGIN, 0); }
		public ITerminalNode END() { return GetToken(VisualBasic6Parser.END, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleConfigElementContext[] moduleConfigElement() {
			return GetRuleContexts<ModuleConfigElementContext>();
		}
		public ModuleConfigElementContext moduleConfigElement(int i) {
			return GetRuleContext<ModuleConfigElementContext>(i);
		}
		public ModuleConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfig; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleConfig(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleConfig(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigContext moduleConfig() {
		ModuleConfigContext _localctx = new ModuleConfigContext(Context, State);
		EnterRule(_localctx, 6, RULE_moduleConfig);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 343; Match(BEGIN);
			State = 345;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 344; Match(NEWLINE);
				}
				}
				State = 347;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==NEWLINE );
			State = 350;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 349; moduleConfigElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 352;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 354; Match(END);
			State = 356;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 355; Match(NEWLINE);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 358;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleConfigElementContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(VisualBasic6Parser.NEWLINE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ModuleConfigElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleConfigElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleConfigElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleConfigElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleConfigElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleConfigElementContext moduleConfigElement() {
		ModuleConfigElementContext _localctx = new ModuleConfigElementContext(Context, State);
		EnterRule(_localctx, 8, RULE_moduleConfigElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360; ambiguousIdentifier();
			State = 362;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 361; Match(WS);
				}
			}

			State = 364; Match(EQ);
			State = 366;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 365; Match(WS);
				}
			}

			State = 368; literal();
			State = 369; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleAttributesContext : ParserRuleContext {
		public AttributeStmtContext[] attributeStmt() {
			return GetRuleContexts<AttributeStmtContext>();
		}
		public AttributeStmtContext attributeStmt(int i) {
			return GetRuleContext<AttributeStmtContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleAttributesContext moduleAttributes() {
		ModuleAttributesContext _localctx = new ModuleAttributesContext(Context, State);
		EnterRule(_localctx, 10, RULE_moduleAttributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 377;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 371; attributeStmt();
					State = 373;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 372; Match(NEWLINE);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 375;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 379;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOptionsContext : ParserRuleContext {
		public ModuleOptionContext[] moduleOption() {
			return GetRuleContexts<ModuleOptionContext>();
		}
		public ModuleOptionContext moduleOption(int i) {
			return GetRuleContext<ModuleOptionContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOptions; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleOptions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleOptions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleOptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOptionsContext moduleOptions() {
		ModuleOptionsContext _localctx = new ModuleOptionsContext(Context, State);
		EnterRule(_localctx, 12, RULE_moduleOptions);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 387;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 381; moduleOption();
				State = 383;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 382; Match(NEWLINE);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 385;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				}
				State = 389;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( ((((_la - 112)) & ~0x3f) == 0 && ((1L << (_la - 112)) & ((1L << (OPTION_BASE - 112)) | (1L << (OPTION_EXPLICIT - 112)) | (1L << (OPTION_COMPARE - 112)) | (1L << (OPTION_PRIVATE_MODULE - 112)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleOptionContext : ParserRuleContext {
		public ModuleOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleOption; } }
	 
		public ModuleOptionContext() { }
		public virtual void CopyFrom(ModuleOptionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OptionExplicitStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_EXPLICIT() { return GetToken(VisualBasic6Parser.OPTION_EXPLICIT, 0); }
		public OptionExplicitStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOptionExplicitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOptionExplicitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionExplicitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionBaseStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_BASE() { return GetToken(VisualBasic6Parser.OPTION_BASE, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VisualBasic6Parser.INTEGERLITERAL, 0); }
		public OptionBaseStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOptionBaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOptionBaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionBaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionPrivateModuleStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_PRIVATE_MODULE() { return GetToken(VisualBasic6Parser.OPTION_PRIVATE_MODULE, 0); }
		public OptionPrivateModuleStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOptionPrivateModuleStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOptionPrivateModuleStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionPrivateModuleStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptionCompareStmtContext : ModuleOptionContext {
		public ITerminalNode OPTION_COMPARE() { return GetToken(VisualBasic6Parser.OPTION_COMPARE, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ITerminalNode BINARY() { return GetToken(VisualBasic6Parser.BINARY, 0); }
		public ITerminalNode TEXT() { return GetToken(VisualBasic6Parser.TEXT, 0); }
		public OptionCompareStmtContext(ModuleOptionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOptionCompareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOptionCompareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptionCompareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleOptionContext moduleOption() {
		ModuleOptionContext _localctx = new ModuleOptionContext(Context, State);
		EnterRule(_localctx, 14, RULE_moduleOption);
		int _la;
		try {
			State = 399;
			switch (TokenStream.La(1)) {
			case OPTION_BASE:
				_localctx = new OptionBaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 391; Match(OPTION_BASE);
				State = 392; Match(WS);
				State = 393; Match(INTEGERLITERAL);
				}
				break;
			case OPTION_COMPARE:
				_localctx = new OptionCompareStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 394; Match(OPTION_COMPARE);
				State = 395; Match(WS);
				State = 396;
				_la = TokenStream.La(1);
				if ( !(_la==BINARY || _la==TEXT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			case OPTION_EXPLICIT:
				_localctx = new OptionExplicitStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 397; Match(OPTION_EXPLICIT);
				}
				break;
			case OPTION_PRIVATE_MODULE:
				_localctx = new OptionPrivateModuleStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 398; Match(OPTION_PRIVATE_MODULE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyContext : ParserRuleContext {
		public ModuleBodyElementContext[] moduleBodyElement() {
			return GetRuleContexts<ModuleBodyElementContext>();
		}
		public ModuleBodyElementContext moduleBodyElement(int i) {
			return GetRuleContext<ModuleBodyElementContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyContext moduleBody() {
		ModuleBodyContext _localctx = new ModuleBodyContext(Context, State);
		EnterRule(_localctx, 16, RULE_moduleBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 401; moduleBodyElement();
			State = 410;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 403;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					do {
						{
						{
						State = 402; Match(NEWLINE);
						}
						}
						State = 405;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					} while ( _la==NEWLINE );
					State = 407; moduleBodyElement();
					}
					} 
				}
				State = 412;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBodyElementContext : ParserRuleContext {
		public ModuleBlockContext moduleBlock() {
			return GetRuleContext<ModuleBlockContext>(0);
		}
		public DeclareStmtContext declareStmt() {
			return GetRuleContext<DeclareStmtContext>(0);
		}
		public EnumerationStmtContext enumerationStmt() {
			return GetRuleContext<EnumerationStmtContext>(0);
		}
		public EventStmtContext eventStmt() {
			return GetRuleContext<EventStmtContext>(0);
		}
		public FunctionStmtContext functionStmt() {
			return GetRuleContext<FunctionStmtContext>(0);
		}
		public MacroIfThenElseStmtContext macroIfThenElseStmt() {
			return GetRuleContext<MacroIfThenElseStmtContext>(0);
		}
		public PropertyGetStmtContext propertyGetStmt() {
			return GetRuleContext<PropertyGetStmtContext>(0);
		}
		public PropertySetStmtContext propertySetStmt() {
			return GetRuleContext<PropertySetStmtContext>(0);
		}
		public PropertyLetStmtContext propertyLetStmt() {
			return GetRuleContext<PropertyLetStmtContext>(0);
		}
		public SubStmtContext subStmt() {
			return GetRuleContext<SubStmtContext>(0);
		}
		public TypeStmtContext typeStmt() {
			return GetRuleContext<TypeStmtContext>(0);
		}
		public ModuleBodyElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBodyElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleBodyElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleBodyElement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBodyElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBodyElementContext moduleBodyElement() {
		ModuleBodyElementContext _localctx = new ModuleBodyElementContext(Context, State);
		EnterRule(_localctx, 18, RULE_moduleBodyElement);
		try {
			State = 424;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 413; moduleBlock();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 414; declareStmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 415; enumerationStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 416; eventStmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 417; functionStmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 418; macroIfThenElseStmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 419; propertyGetStmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 420; propertySetStmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 421; propertyLetStmt();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 422; subStmt();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 423; typeStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleBlockContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ModuleBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterModuleBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitModuleBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModuleBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModuleBlockContext moduleBlock() {
		ModuleBlockContext _localctx = new ModuleBlockContext(Context, State);
		EnterRule(_localctx, 20, RULE_moduleBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeStmtContext : ParserRuleContext {
		public ITerminalNode ATTRIBUTE() { return GetToken(VisualBasic6Parser.ATTRIBUTE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public AttributeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterAttributeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitAttributeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeStmtContext attributeStmt() {
		AttributeStmtContext _localctx = new AttributeStmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_attributeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 428; Match(ATTRIBUTE);
			State = 429; Match(WS);
			State = 430; implicitCallStmt_InStmt();
			State = 432;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 431; Match(WS);
				}
			}

			State = 434; Match(EQ);
			State = 436;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 435; Match(WS);
				}
			}

			State = 438; literal();
			State = 449;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 440;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 439; Match(WS);
						}
					}

					State = 442; Match(COMMA);
					State = 444;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 443; Match(WS);
						}
					}

					State = 446; literal();
					}
					} 
				}
				State = 451;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockStmtContext[] blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 24, RULE_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 452; blockStmt();
			State = 464;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 454;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					do {
						{
						{
						State = 453; Match(NEWLINE);
						}
						}
						State = 456;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					} while ( _la==NEWLINE );
					State = 459;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 458; Match(WS);
						}
					}

					State = 461; blockStmt();
					}
					} 
				}
				State = 466;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStmtContext : ParserRuleContext {
		public AppactivateStmtContext appactivateStmt() {
			return GetRuleContext<AppactivateStmtContext>(0);
		}
		public AttributeStmtContext attributeStmt() {
			return GetRuleContext<AttributeStmtContext>(0);
		}
		public BeepStmtContext beepStmt() {
			return GetRuleContext<BeepStmtContext>(0);
		}
		public ChdirStmtContext chdirStmt() {
			return GetRuleContext<ChdirStmtContext>(0);
		}
		public ChdriveStmtContext chdriveStmt() {
			return GetRuleContext<ChdriveStmtContext>(0);
		}
		public CloseStmtContext closeStmt() {
			return GetRuleContext<CloseStmtContext>(0);
		}
		public ConstStmtContext constStmt() {
			return GetRuleContext<ConstStmtContext>(0);
		}
		public DateStmtContext dateStmt() {
			return GetRuleContext<DateStmtContext>(0);
		}
		public DeleteSettingStmtContext deleteSettingStmt() {
			return GetRuleContext<DeleteSettingStmtContext>(0);
		}
		public DeftypeStmtContext deftypeStmt() {
			return GetRuleContext<DeftypeStmtContext>(0);
		}
		public DoLoopStmtContext doLoopStmt() {
			return GetRuleContext<DoLoopStmtContext>(0);
		}
		public EndStmtContext endStmt() {
			return GetRuleContext<EndStmtContext>(0);
		}
		public EraseStmtContext eraseStmt() {
			return GetRuleContext<EraseStmtContext>(0);
		}
		public ErrorStmtContext errorStmt() {
			return GetRuleContext<ErrorStmtContext>(0);
		}
		public ExitStmtContext exitStmt() {
			return GetRuleContext<ExitStmtContext>(0);
		}
		public ExplicitCallStmtContext explicitCallStmt() {
			return GetRuleContext<ExplicitCallStmtContext>(0);
		}
		public FilecopyStmtContext filecopyStmt() {
			return GetRuleContext<FilecopyStmtContext>(0);
		}
		public ForEachStmtContext forEachStmt() {
			return GetRuleContext<ForEachStmtContext>(0);
		}
		public ForNextStmtContext forNextStmt() {
			return GetRuleContext<ForNextStmtContext>(0);
		}
		public GetStmtContext getStmt() {
			return GetRuleContext<GetStmtContext>(0);
		}
		public GoSubStmtContext goSubStmt() {
			return GetRuleContext<GoSubStmtContext>(0);
		}
		public GoToStmtContext goToStmt() {
			return GetRuleContext<GoToStmtContext>(0);
		}
		public IfThenElseStmtContext ifThenElseStmt() {
			return GetRuleContext<IfThenElseStmtContext>(0);
		}
		public ImplementsStmtContext implementsStmt() {
			return GetRuleContext<ImplementsStmtContext>(0);
		}
		public InputStmtContext inputStmt() {
			return GetRuleContext<InputStmtContext>(0);
		}
		public KillStmtContext killStmt() {
			return GetRuleContext<KillStmtContext>(0);
		}
		public LetStmtContext letStmt() {
			return GetRuleContext<LetStmtContext>(0);
		}
		public LineInputStmtContext lineInputStmt() {
			return GetRuleContext<LineInputStmtContext>(0);
		}
		public LineLabelContext lineLabel() {
			return GetRuleContext<LineLabelContext>(0);
		}
		public LoadStmtContext loadStmt() {
			return GetRuleContext<LoadStmtContext>(0);
		}
		public LockStmtContext lockStmt() {
			return GetRuleContext<LockStmtContext>(0);
		}
		public LsetStmtContext lsetStmt() {
			return GetRuleContext<LsetStmtContext>(0);
		}
		public MacroIfThenElseStmtContext macroIfThenElseStmt() {
			return GetRuleContext<MacroIfThenElseStmtContext>(0);
		}
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public MkdirStmtContext mkdirStmt() {
			return GetRuleContext<MkdirStmtContext>(0);
		}
		public NameStmtContext nameStmt() {
			return GetRuleContext<NameStmtContext>(0);
		}
		public OnErrorStmtContext onErrorStmt() {
			return GetRuleContext<OnErrorStmtContext>(0);
		}
		public OnGoToStmtContext onGoToStmt() {
			return GetRuleContext<OnGoToStmtContext>(0);
		}
		public OnGoSubStmtContext onGoSubStmt() {
			return GetRuleContext<OnGoSubStmtContext>(0);
		}
		public OpenStmtContext openStmt() {
			return GetRuleContext<OpenStmtContext>(0);
		}
		public PrintStmtContext printStmt() {
			return GetRuleContext<PrintStmtContext>(0);
		}
		public PutStmtContext putStmt() {
			return GetRuleContext<PutStmtContext>(0);
		}
		public RaiseEventStmtContext raiseEventStmt() {
			return GetRuleContext<RaiseEventStmtContext>(0);
		}
		public RandomizeStmtContext randomizeStmt() {
			return GetRuleContext<RandomizeStmtContext>(0);
		}
		public RedimStmtContext redimStmt() {
			return GetRuleContext<RedimStmtContext>(0);
		}
		public ResetStmtContext resetStmt() {
			return GetRuleContext<ResetStmtContext>(0);
		}
		public ResumeStmtContext resumeStmt() {
			return GetRuleContext<ResumeStmtContext>(0);
		}
		public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public RmdirStmtContext rmdirStmt() {
			return GetRuleContext<RmdirStmtContext>(0);
		}
		public RsetStmtContext rsetStmt() {
			return GetRuleContext<RsetStmtContext>(0);
		}
		public SavepictureStmtContext savepictureStmt() {
			return GetRuleContext<SavepictureStmtContext>(0);
		}
		public SaveSettingStmtContext saveSettingStmt() {
			return GetRuleContext<SaveSettingStmtContext>(0);
		}
		public SeekStmtContext seekStmt() {
			return GetRuleContext<SeekStmtContext>(0);
		}
		public SelectCaseStmtContext selectCaseStmt() {
			return GetRuleContext<SelectCaseStmtContext>(0);
		}
		public SendkeysStmtContext sendkeysStmt() {
			return GetRuleContext<SendkeysStmtContext>(0);
		}
		public SetattrStmtContext setattrStmt() {
			return GetRuleContext<SetattrStmtContext>(0);
		}
		public SetStmtContext setStmt() {
			return GetRuleContext<SetStmtContext>(0);
		}
		public StopStmtContext stopStmt() {
			return GetRuleContext<StopStmtContext>(0);
		}
		public TimeStmtContext timeStmt() {
			return GetRuleContext<TimeStmtContext>(0);
		}
		public UnloadStmtContext unloadStmt() {
			return GetRuleContext<UnloadStmtContext>(0);
		}
		public UnlockStmtContext unlockStmt() {
			return GetRuleContext<UnlockStmtContext>(0);
		}
		public VariableStmtContext variableStmt() {
			return GetRuleContext<VariableStmtContext>(0);
		}
		public WhileWendStmtContext whileWendStmt() {
			return GetRuleContext<WhileWendStmtContext>(0);
		}
		public WidthStmtContext widthStmt() {
			return GetRuleContext<WidthStmtContext>(0);
		}
		public WithStmtContext withStmt() {
			return GetRuleContext<WithStmtContext>(0);
		}
		public WriteStmtContext writeStmt() {
			return GetRuleContext<WriteStmtContext>(0);
		}
		public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
			return GetRuleContext<ImplicitCallStmt_InBlockContext>(0);
		}
		public BlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStmtContext blockStmt() {
		BlockStmtContext _localctx = new BlockStmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_blockStmt);
		try {
			State = 534;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 467; appactivateStmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 468; attributeStmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 469; beepStmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 470; chdirStmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 471; chdriveStmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 472; closeStmt();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 473; constStmt();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 474; dateStmt();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 475; deleteSettingStmt();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 476; deftypeStmt();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 477; doLoopStmt();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 478; endStmt();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 479; eraseStmt();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 480; errorStmt();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 481; exitStmt();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 482; explicitCallStmt();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 483; filecopyStmt();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 484; forEachStmt();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 485; forNextStmt();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 486; getStmt();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 487; goSubStmt();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 488; goToStmt();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 489; ifThenElseStmt();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 490; implementsStmt();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 491; inputStmt();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 492; killStmt();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 493; letStmt();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 494; lineInputStmt();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 495; lineLabel();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 496; loadStmt();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 497; lockStmt();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 498; lsetStmt();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 499; macroIfThenElseStmt();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 500; midStmt();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 501; mkdirStmt();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 502; nameStmt();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 503; onErrorStmt();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 504; onGoToStmt();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 505; onGoSubStmt();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 506; openStmt();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 507; printStmt();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 508; putStmt();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 509; raiseEventStmt();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 510; randomizeStmt();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 511; redimStmt();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 512; resetStmt();
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 513; resumeStmt();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 514; returnStmt();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 515; rmdirStmt();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 516; rsetStmt();
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 517; savepictureStmt();
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 518; saveSettingStmt();
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 519; seekStmt();
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 520; selectCaseStmt();
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 521; sendkeysStmt();
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 522; setattrStmt();
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 523; setStmt();
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 524; stopStmt();
				}
				break;
			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 525; timeStmt();
				}
				break;
			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 526; unloadStmt();
				}
				break;
			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 527; unlockStmt();
				}
				break;
			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 528; variableStmt();
				}
				break;
			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 529; whileWendStmt();
				}
				break;
			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 530; widthStmt();
				}
				break;
			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 531; withStmt();
				}
				break;
			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 532; writeStmt();
				}
				break;
			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 533; implicitCallStmt_InBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AppactivateStmtContext : ParserRuleContext {
		public ITerminalNode APPACTIVATE() { return GetToken(VisualBasic6Parser.APPACTIVATE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public AppactivateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_appactivateStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterAppactivateStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitAppactivateStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAppactivateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AppactivateStmtContext appactivateStmt() {
		AppactivateStmtContext _localctx = new AppactivateStmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_appactivateStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 536; Match(APPACTIVATE);
			State = 537; Match(WS);
			State = 538; valueStmt(0);
			State = 547;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,37,Context) ) {
			case 1:
				{
				State = 540;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 539; Match(WS);
					}
				}

				State = 542; Match(COMMA);
				State = 544;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 543; Match(WS);
					}
				}

				State = 546; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeepStmtContext : ParserRuleContext {
		public ITerminalNode BEEP() { return GetToken(VisualBasic6Parser.BEEP, 0); }
		public BeepStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beepStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterBeepStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitBeepStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBeepStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BeepStmtContext beepStmt() {
		BeepStmtContext _localctx = new BeepStmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_beepStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 549; Match(BEEP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChdirStmtContext : ParserRuleContext {
		public ITerminalNode CHDIR() { return GetToken(VisualBasic6Parser.CHDIR, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ChdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterChdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitChdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChdirStmtContext chdirStmt() {
		ChdirStmtContext _localctx = new ChdirStmtContext(Context, State);
		EnterRule(_localctx, 32, RULE_chdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551; Match(CHDIR);
			State = 552; Match(WS);
			State = 553; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChdriveStmtContext : ParserRuleContext {
		public ITerminalNode CHDRIVE() { return GetToken(VisualBasic6Parser.CHDRIVE, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ChdriveStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_chdriveStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterChdriveStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitChdriveStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChdriveStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChdriveStmtContext chdriveStmt() {
		ChdriveStmtContext _localctx = new ChdriveStmtContext(Context, State);
		EnterRule(_localctx, 34, RULE_chdriveStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 555; Match(CHDRIVE);
			State = 556; Match(WS);
			State = 557; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloseStmtContext : ParserRuleContext {
		public ITerminalNode CLOSE() { return GetToken(VisualBasic6Parser.CLOSE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public CloseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCloseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCloseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCloseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CloseStmtContext closeStmt() {
		CloseStmtContext _localctx = new CloseStmtContext(Context, State);
		EnterRule(_localctx, 36, RULE_closeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 559; Match(CLOSE);
			State = 575;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 560; Match(WS);
				State = 561; valueStmt(0);
				State = 572;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 563;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 562; Match(WS);
							}
						}

						State = 565; Match(COMMA);
						State = 567;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 566; Match(WS);
							}
						}

						State = 569; valueStmt(0);
						}
						} 
					}
					State = 574;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstStmtContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(VisualBasic6Parser.CONST, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ConstSubStmtContext[] constSubStmt() {
			return GetRuleContexts<ConstSubStmtContext>();
		}
		public ConstSubStmtContext constSubStmt(int i) {
			return GetRuleContext<ConstSubStmtContext>(i);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ConstStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterConstStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitConstStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstStmtContext constStmt() {
		ConstStmtContext _localctx = new ConstStmtContext(Context, State);
		EnterRule(_localctx, 38, RULE_constStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 580;
			_la = TokenStream.La(1);
			if (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FRIEND - 66)) | (1L << (GLOBAL - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0)) {
				{
				State = 577; visibility();
				State = 578; Match(WS);
				}
			}

			State = 582; Match(CONST);
			State = 583; Match(WS);
			State = 584; constSubStmt();
			State = 595;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 586;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 585; Match(WS);
						}
					}

					State = 588; Match(COMMA);
					State = 590;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 589; Match(WS);
						}
					}

					State = 592; constSubStmt();
					}
					} 
				}
				State = 597;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,45,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstSubStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ConstSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterConstSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitConstSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstSubStmtContext constSubStmt() {
		ConstSubStmtContext _localctx = new ConstSubStmtContext(Context, State);
		EnterRule(_localctx, 40, RULE_constSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 598; ambiguousIdentifier();
			State = 600;
			_la = TokenStream.La(1);
			if (((((_la - 174)) & ~0x3f) == 0 && ((1L << (_la - 174)) & ((1L << (AMPERSAND - 174)) | (1L << (AT - 174)) | (1L << (DOLLAR - 174)) | (1L << (EXCLAMATIONMARK - 174)) | (1L << (HASH - 174)) | (1L << (PERCENT - 174)))) != 0)) {
				{
				State = 599; typeHint();
				}
			}

			State = 604;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 602; Match(WS);
				State = 603; asTypeClause();
				}
				break;
			}
			State = 607;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 606; Match(WS);
				}
			}

			State = 609; Match(EQ);
			State = 611;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 610; Match(WS);
				}
			}

			State = 613; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateStmtContext : ParserRuleContext {
		public ITerminalNode DATE() { return GetToken(VisualBasic6Parser.DATE, 0); }
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public DateStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterDateStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitDateStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DateStmtContext dateStmt() {
		DateStmtContext _localctx = new DateStmtContext(Context, State);
		EnterRule(_localctx, 42, RULE_dateStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 615; Match(DATE);
			State = 617;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 616; Match(WS);
				}
			}

			State = 619; Match(EQ);
			State = 621;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 620; Match(WS);
				}
			}

			State = 623; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclareStmtContext : ParserRuleContext {
		public ITerminalNode DECLARE() { return GetToken(VisualBasic6Parser.DECLARE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode LIB() { return GetToken(VisualBasic6Parser.LIB, 0); }
		public ITerminalNode[] STRINGLITERAL() { return GetTokens(VisualBasic6Parser.STRINGLITERAL); }
		public ITerminalNode STRINGLITERAL(int i) {
			return GetToken(VisualBasic6Parser.STRINGLITERAL, i);
		}
		public ITerminalNode FUNCTION() { return GetToken(VisualBasic6Parser.FUNCTION, 0); }
		public ITerminalNode SUB() { return GetToken(VisualBasic6Parser.SUB, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public TypeHintContext[] typeHint() {
			return GetRuleContexts<TypeHintContext>();
		}
		public TypeHintContext typeHint(int i) {
			return GetRuleContext<TypeHintContext>(i);
		}
		public ITerminalNode ALIAS() { return GetToken(VisualBasic6Parser.ALIAS, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public DeclareStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declareStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterDeclareStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitDeclareStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclareStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclareStmtContext declareStmt() {
		DeclareStmtContext _localctx = new DeclareStmtContext(Context, State);
		EnterRule(_localctx, 44, RULE_declareStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628;
			_la = TokenStream.La(1);
			if (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FRIEND - 66)) | (1L << (GLOBAL - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0)) {
				{
				State = 625; visibility();
				State = 626; Match(WS);
				}
			}

			State = 630; Match(DECLARE);
			State = 631; Match(WS);
			State = 637;
			switch (TokenStream.La(1)) {
			case FUNCTION:
				{
				State = 632; Match(FUNCTION);
				State = 634;
				_la = TokenStream.La(1);
				if (((((_la - 174)) & ~0x3f) == 0 && ((1L << (_la - 174)) & ((1L << (AMPERSAND - 174)) | (1L << (AT - 174)) | (1L << (DOLLAR - 174)) | (1L << (EXCLAMATIONMARK - 174)) | (1L << (HASH - 174)) | (1L << (PERCENT - 174)))) != 0)) {
					{
					State = 633; typeHint();
					}
				}

				}
				break;
			case SUB:
				{
				State = 636; Match(SUB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 639; Match(WS);
			State = 640; ambiguousIdentifier();
			State = 642;
			_la = TokenStream.La(1);
			if (((((_la - 174)) & ~0x3f) == 0 && ((1L << (_la - 174)) & ((1L << (AMPERSAND - 174)) | (1L << (AT - 174)) | (1L << (DOLLAR - 174)) | (1L << (EXCLAMATIONMARK - 174)) | (1L << (HASH - 174)) | (1L << (PERCENT - 174)))) != 0)) {
				{
				State = 641; typeHint();
				}
			}

			State = 644; Match(WS);
			State = 645; Match(LIB);
			State = 646; Match(WS);
			State = 647; Match(STRINGLITERAL);
			State = 652;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
			case 1:
				{
				State = 648; Match(WS);
				State = 649; Match(ALIAS);
				State = 650; Match(WS);
				State = 651; Match(STRINGLITERAL);
				}
				break;
			}
			State = 658;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				State = 655;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 654; Match(WS);
					}
				}

				State = 657; argList();
				}
				break;
			}
			State = 662;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				State = 660; Match(WS);
				State = 661; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeftypeStmtContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public LetterrangeContext[] letterrange() {
			return GetRuleContexts<LetterrangeContext>();
		}
		public LetterrangeContext letterrange(int i) {
			return GetRuleContext<LetterrangeContext>(i);
		}
		public ITerminalNode DEFBOOL() { return GetToken(VisualBasic6Parser.DEFBOOL, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VisualBasic6Parser.DEFBYTE, 0); }
		public ITerminalNode DEFINT() { return GetToken(VisualBasic6Parser.DEFINT, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VisualBasic6Parser.DEFLNG, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VisualBasic6Parser.DEFCUR, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VisualBasic6Parser.DEFSNG, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VisualBasic6Parser.DEFDBL, 0); }
		public ITerminalNode DEFDEC() { return GetToken(VisualBasic6Parser.DEFDEC, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VisualBasic6Parser.DEFDATE, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VisualBasic6Parser.DEFSTR, 0); }
		public ITerminalNode DEFOBJ() { return GetToken(VisualBasic6Parser.DEFOBJ, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VisualBasic6Parser.DEFVAR, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public DeftypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deftypeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterDeftypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitDeftypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeftypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeftypeStmtContext deftypeStmt() {
		DeftypeStmtContext _localctx = new DeftypeStmtContext(Context, State);
		EnterRule(_localctx, 46, RULE_deftypeStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 664;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 665; Match(WS);
			State = 666; letterrange();
			State = 677;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 668;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 667; Match(WS);
						}
					}

					State = 670; Match(COMMA);
					State = 672;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 671; Match(WS);
						}
					}

					State = 674; letterrange();
					}
					} 
				}
				State = 679;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteSettingStmtContext : ParserRuleContext {
		public ITerminalNode DELETESETTING() { return GetToken(VisualBasic6Parser.DELETESETTING, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public DeleteSettingStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteSettingStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterDeleteSettingStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitDeleteSettingStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeleteSettingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteSettingStmtContext deleteSettingStmt() {
		DeleteSettingStmtContext _localctx = new DeleteSettingStmtContext(Context, State);
		EnterRule(_localctx, 48, RULE_deleteSettingStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 680; Match(DELETESETTING);
			State = 681; Match(WS);
			State = 682; valueStmt(0);
			State = 684;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 683; Match(WS);
				}
			}

			State = 686; Match(COMMA);
			State = 688;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 687; Match(WS);
				}
			}

			State = 690; valueStmt(0);
			State = 699;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,67,Context) ) {
			case 1:
				{
				State = 692;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 691; Match(WS);
					}
				}

				State = 694; Match(COMMA);
				State = 696;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 695; Match(WS);
					}
				}

				State = 698; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoLoopStmtContext : ParserRuleContext {
		public ITerminalNode DO() { return GetToken(VisualBasic6Parser.DO, 0); }
		public ITerminalNode LOOP() { return GetToken(VisualBasic6Parser.LOOP, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(VisualBasic6Parser.WHILE, 0); }
		public ITerminalNode UNTIL() { return GetToken(VisualBasic6Parser.UNTIL, 0); }
		public DoLoopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doLoopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterDoLoopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitDoLoopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoLoopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoLoopStmtContext doLoopStmt() {
		DoLoopStmtContext _localctx = new DoLoopStmtContext(Context, State);
		EnterRule(_localctx, 50, RULE_doLoopStmt);
		int _la;
		try {
			State = 754;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 701; Match(DO);
				State = 703;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 702; Match(NEWLINE);
					}
					}
					State = 705;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==NEWLINE );
				State = 713;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
				case 1:
					{
					State = 707; block();
					State = 709;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					do {
						{
						{
						State = 708; Match(NEWLINE);
						}
						}
						State = 711;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					} while ( _la==NEWLINE );
					}
					break;
				}
				State = 715; Match(LOOP);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 716; Match(DO);
				State = 717; Match(WS);
				State = 718;
				_la = TokenStream.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 719; Match(WS);
				State = 720; valueStmt(0);
				State = 722;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 721; Match(NEWLINE);
					}
					}
					State = 724;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==NEWLINE );
				State = 732;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
				case 1:
					{
					State = 726; block();
					State = 728;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					do {
						{
						{
						State = 727; Match(NEWLINE);
						}
						}
						State = 730;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					} while ( _la==NEWLINE );
					}
					break;
				}
				State = 734; Match(LOOP);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 736; Match(DO);
				State = 738;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 737; Match(NEWLINE);
					}
					}
					State = 740;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==NEWLINE );
				{
				State = 742; block();
				State = 744;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 743; Match(NEWLINE);
					}
					}
					State = 746;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==NEWLINE );
				}
				State = 748; Match(LOOP);
				State = 749; Match(WS);
				State = 750;
				_la = TokenStream.La(1);
				if ( !(_la==UNTIL || _la==WHILE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 751; Match(WS);
				State = 752; valueStmt(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndStmtContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(VisualBasic6Parser.END, 0); }
		public EndStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterEndStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitEndStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndStmtContext endStmt() {
		EndStmtContext _localctx = new EndStmtContext(Context, State);
		EnterRule(_localctx, 52, RULE_endStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 756; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmtContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(VisualBasic6Parser.ENUM, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_ENUM() { return GetToken(VisualBasic6Parser.END_ENUM, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public EnumerationStmt_ConstantContext[] enumerationStmt_Constant() {
			return GetRuleContexts<EnumerationStmt_ConstantContext>();
		}
		public EnumerationStmt_ConstantContext enumerationStmt_Constant(int i) {
			return GetRuleContext<EnumerationStmt_ConstantContext>(i);
		}
		public EnumerationStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterEnumerationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitEnumerationStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmtContext enumerationStmt() {
		EnumerationStmtContext _localctx = new EnumerationStmtContext(Context, State);
		EnterRule(_localctx, 54, RULE_enumerationStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 761;
			_la = TokenStream.La(1);
			if (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FRIEND - 66)) | (1L << (GLOBAL - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0)) {
				{
				State = 758; visibility();
				State = 759; Match(WS);
				}
			}

			State = 763; Match(ENUM);
			State = 764; Match(WS);
			State = 765; ambiguousIdentifier();
			State = 767;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 766; Match(NEWLINE);
				}
				}
				State = 769;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==NEWLINE );
			State = 774;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)) | (1L << (PUT - 64)) | (1L << (RANDOM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				{
				State = 771; enumerationStmt_Constant();
				}
				}
				State = 776;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 777; Match(END_ENUM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationStmt_ConstantContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public EnumerationStmt_ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerationStmt_Constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterEnumerationStmt_Constant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitEnumerationStmt_Constant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumerationStmt_Constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationStmt_ConstantContext enumerationStmt_Constant() {
		EnumerationStmt_ConstantContext _localctx = new EnumerationStmt_ConstantContext(Context, State);
		EnterRule(_localctx, 56, RULE_enumerationStmt_Constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 779; ambiguousIdentifier();
			State = 788;
			_la = TokenStream.La(1);
			if (_la==EQ || _la==WS) {
				{
				State = 781;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 780; Match(WS);
					}
				}

				State = 783; Match(EQ);
				State = 785;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 784; Match(WS);
					}
				}

				State = 787; valueStmt(0);
				}
			}

			State = 791;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 790; Match(NEWLINE);
				}
				}
				State = 793;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EraseStmtContext : ParserRuleContext {
		public ITerminalNode ERASE() { return GetToken(VisualBasic6Parser.ERASE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public EraseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eraseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterEraseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitEraseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEraseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EraseStmtContext eraseStmt() {
		EraseStmtContext _localctx = new EraseStmtContext(Context, State);
		EnterRule(_localctx, 58, RULE_eraseStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 795; Match(ERASE);
			State = 796; Match(WS);
			State = 797; valueStmt(0);
			State = 808;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 799;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 798; Match(WS);
						}
					}

					State = 801; Match(COMMA);
					State = 803;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 802; Match(WS);
						}
					}

					State = 805; valueStmt(0);
					}
					} 
				}
				State = 810;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ErrorStmtContext : ParserRuleContext {
		public ITerminalNode ERROR() { return GetToken(VisualBasic6Parser.ERROR, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_errorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ErrorStmtContext errorStmt() {
		ErrorStmtContext _localctx = new ErrorStmtContext(Context, State);
		EnterRule(_localctx, 60, RULE_errorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 811; Match(ERROR);
			State = 812; Match(WS);
			State = 813; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventStmtContext : ParserRuleContext {
		public ITerminalNode EVENT() { return GetToken(VisualBasic6Parser.EVENT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public EventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EventStmtContext eventStmt() {
		EventStmtContext _localctx = new EventStmtContext(Context, State);
		EnterRule(_localctx, 62, RULE_eventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 818;
			_la = TokenStream.La(1);
			if (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FRIEND - 66)) | (1L << (GLOBAL - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0)) {
				{
				State = 815; visibility();
				State = 816; Match(WS);
				}
			}

			State = 820; Match(EVENT);
			State = 821; Match(WS);
			State = 822; ambiguousIdentifier();
			State = 824;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 823; Match(WS);
				}
			}

			State = 826; argList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitStmtContext : ParserRuleContext {
		public ITerminalNode EXIT_DO() { return GetToken(VisualBasic6Parser.EXIT_DO, 0); }
		public ITerminalNode EXIT_FOR() { return GetToken(VisualBasic6Parser.EXIT_FOR, 0); }
		public ITerminalNode EXIT_FUNCTION() { return GetToken(VisualBasic6Parser.EXIT_FUNCTION, 0); }
		public ITerminalNode EXIT_PROPERTY() { return GetToken(VisualBasic6Parser.EXIT_PROPERTY, 0); }
		public ITerminalNode EXIT_SUB() { return GetToken(VisualBasic6Parser.EXIT_SUB, 0); }
		public ExitStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exitStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterExitStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitExitStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExitStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExitStmtContext exitStmt() {
		ExitStmtContext _localctx = new ExitStmtContext(Context, State);
		EnterRule(_localctx, 64, RULE_exitStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 828;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION) | (1L << EXIT_PROPERTY) | (1L << EXIT_SUB))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilecopyStmtContext : ParserRuleContext {
		public ITerminalNode FILECOPY() { return GetToken(VisualBasic6Parser.FILECOPY, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public FilecopyStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filecopyStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterFilecopyStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitFilecopyStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilecopyStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilecopyStmtContext filecopyStmt() {
		FilecopyStmtContext _localctx = new FilecopyStmtContext(Context, State);
		EnterRule(_localctx, 66, RULE_filecopyStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 830; Match(FILECOPY);
			State = 831; Match(WS);
			State = 832; valueStmt(0);
			State = 834;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 833; Match(WS);
				}
			}

			State = 836; Match(COMMA);
			State = 838;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 837; Match(WS);
				}
			}

			State = 840; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForEachStmtContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(VisualBasic6Parser.FOR, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode EACH() { return GetToken(VisualBasic6Parser.EACH, 0); }
		public AmbiguousIdentifierContext[] ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ITerminalNode IN() { return GetToken(VisualBasic6Parser.IN, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode NEXT() { return GetToken(VisualBasic6Parser.NEXT, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForEachStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forEachStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterForEachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitForEachStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForEachStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForEachStmtContext forEachStmt() {
		ForEachStmtContext _localctx = new ForEachStmtContext(Context, State);
		EnterRule(_localctx, 68, RULE_forEachStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 842; Match(FOR);
			State = 843; Match(WS);
			State = 844; Match(EACH);
			State = 845; Match(WS);
			State = 846; ambiguousIdentifier();
			State = 848;
			_la = TokenStream.La(1);
			if (((((_la - 174)) & ~0x3f) == 0 && ((1L << (_la - 174)) & ((1L << (AMPERSAND - 174)) | (1L << (AT - 174)) | (1L << (DOLLAR - 174)) | (1L << (EXCLAMATIONMARK - 174)) | (1L << (HASH - 174)) | (1L << (PERCENT - 174)))) != 0)) {
				{
				State = 847; typeHint();
				}
			}

			State = 850; Match(WS);
			State = 851; Match(IN);
			State = 852; Match(WS);
			State = 853; valueStmt(0);
			State = 855;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 854; Match(NEWLINE);
				}
				}
				State = 857;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==NEWLINE );
			State = 865;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				{
				State = 859; block();
				State = 861;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 860; Match(NEWLINE);
					}
					}
					State = 863;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 867; Match(NEXT);
			State = 870;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				{
				State = 868; Match(WS);
				State = 869; ambiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForNextStmtContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(VisualBasic6Parser.FOR, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext[] ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode TO() { return GetToken(VisualBasic6Parser.TO, 0); }
		public ITerminalNode NEXT() { return GetToken(VisualBasic6Parser.NEXT, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode STEP() { return GetToken(VisualBasic6Parser.STEP, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ForNextStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forNextStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterForNextStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitForNextStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForNextStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForNextStmtContext forNextStmt() {
		ForNextStmtContext _localctx = new ForNextStmtContext(Context, State);
		EnterRule(_localctx, 70, RULE_forNextStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 872; Match(FOR);
			State = 873; Match(WS);
			State = 874; ambiguousIdentifier();
			State = 876;
			_la = TokenStream.La(1);
			if (((((_la - 174)) & ~0x3f) == 0 && ((1L << (_la - 174)) & ((1L << (AMPERSAND - 174)) | (1L << (AT - 174)) | (1L << (DOLLAR - 174)) | (1L << (EXCLAMATIONMARK - 174)) | (1L << (HASH - 174)) | (1L << (PERCENT - 174)))) != 0)) {
				{
				State = 875; typeHint();
				}
			}

			State = 880;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				{
				State = 878; Match(WS);
				State = 879; asTypeClause();
				}
				break;
			}
			State = 883;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 882; Match(WS);
				}
			}

			State = 885; Match(EQ);
			State = 887;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 886; Match(WS);
				}
			}

			State = 889; valueStmt(0);
			State = 890; Match(WS);
			State = 891; Match(TO);
			State = 892; Match(WS);
			State = 893; valueStmt(0);
			State = 898;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 894; Match(WS);
				State = 895; Match(STEP);
				State = 896; Match(WS);
				State = 897; valueStmt(0);
				}
			}

			State = 901;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 900; Match(NEWLINE);
				}
				}
				State = 903;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==NEWLINE );
			State = 911;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				{
				State = 905; block();
				State = 907;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 906; Match(NEWLINE);
					}
					}
					State = 909;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 913; Match(NEXT);
			State = 916;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				{
				State = 914; Match(WS);
				State = 915; ambiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionStmtContext : ParserRuleContext {
		public ITerminalNode FUNCTION() { return GetToken(VisualBasic6Parser.FUNCTION, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_FUNCTION() { return GetToken(VisualBasic6Parser.END_FUNCTION, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FunctionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterFunctionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitFunctionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionStmtContext functionStmt() {
		FunctionStmtContext _localctx = new FunctionStmtContext(Context, State);
		EnterRule(_localctx, 72, RULE_functionStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 921;
			_la = TokenStream.La(1);
			if (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FRIEND - 66)) | (1L << (GLOBAL - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0)) {
				{
				State = 918; visibility();
				State = 919; Match(WS);
				}
			}

			State = 925;
			_la = TokenStream.La(1);
			if (_la==STATIC) {
				{
				State = 923; Match(STATIC);
				State = 924; Match(WS);
				}
			}

			State = 927; Match(FUNCTION);
			State = 928; Match(WS);
			State = 929; ambiguousIdentifier();
			State = 934;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				{
				State = 931;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 930; Match(WS);
					}
				}

				State = 933; argList();
				}
				break;
			}
			State = 938;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 936; Match(WS);
				State = 937; asTypeClause();
				}
			}

			State = 941;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 940; Match(NEWLINE);
				}
				}
				State = 943;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==NEWLINE );
			State = 951;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION) | (1L << EXIT_PROPERTY) | (1L << EXIT_SUB))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)) | (1L << (PUT - 64)) | (1L << (RANDOM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 945; block();
				State = 947;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 946; Match(NEWLINE);
					}
					}
					State = 949;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 953; Match(END_FUNCTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetStmtContext : ParserRuleContext {
		public ITerminalNode GET() { return GetToken(VisualBasic6Parser.GET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public GetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetStmtContext getStmt() {
		GetStmtContext _localctx = new GetStmtContext(Context, State);
		EnterRule(_localctx, 74, RULE_getStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 955; Match(GET);
			State = 956; Match(WS);
			State = 957; valueStmt(0);
			State = 959;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 958; Match(WS);
				}
			}

			State = 961; Match(COMMA);
			State = 963;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				{
				State = 962; Match(WS);
				}
				break;
			}
			State = 966;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)) | (1L << (PUT - 64)) | (1L << (RANDOM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)) | (1L << (LPAREN - 128)) | (1L << (MINUS - 128)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (PLUS - 195)) | (1L << (L_SQUARE_BRACKET - 195)) | (1L << (STRINGLITERAL - 195)) | (1L << (DATELITERAL - 195)) | (1L << (COLORLITERAL - 195)) | (1L << (INTEGERLITERAL - 195)) | (1L << (DOUBLELITERAL - 195)) | (1L << (FILENUMBER - 195)) | (1L << (IDENTIFIER - 195)))) != 0)) {
				{
				State = 965; valueStmt(0);
				}
			}

			State = 969;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 968; Match(WS);
				}
			}

			State = 971; Match(COMMA);
			State = 973;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 972; Match(WS);
				}
			}

			State = 975; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoSubStmtContext : ParserRuleContext {
		public ITerminalNode GOSUB() { return GetToken(VisualBasic6Parser.GOSUB, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public GoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoSubStmtContext goSubStmt() {
		GoSubStmtContext _localctx = new GoSubStmtContext(Context, State);
		EnterRule(_localctx, 76, RULE_goSubStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 977; Match(GOSUB);
			State = 978; Match(WS);
			State = 979; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GoToStmtContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(VisualBasic6Parser.GOTO, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public GoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GoToStmtContext goToStmt() {
		GoToStmtContext _localctx = new GoToStmtContext(Context, State);
		EnterRule(_localctx, 78, RULE_goToStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 981; Match(GOTO);
			State = 982; Match(WS);
			State = 983; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfThenElseStmtContext : ParserRuleContext {
		public IfThenElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifThenElseStmt; } }
	 
		public IfThenElseStmtContext() { }
		public virtual void CopyFrom(IfThenElseStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BlockIfThenElseContext : IfThenElseStmtContext {
		public IfBlockStmtContext ifBlockStmt() {
			return GetRuleContext<IfBlockStmtContext>(0);
		}
		public ITerminalNode END_IF() { return GetToken(VisualBasic6Parser.END_IF, 0); }
		public IfElseIfBlockStmtContext[] ifElseIfBlockStmt() {
			return GetRuleContexts<IfElseIfBlockStmtContext>();
		}
		public IfElseIfBlockStmtContext ifElseIfBlockStmt(int i) {
			return GetRuleContext<IfElseIfBlockStmtContext>(i);
		}
		public IfElseBlockStmtContext ifElseBlockStmt() {
			return GetRuleContext<IfElseBlockStmtContext>(0);
		}
		public BlockIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterBlockIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitBlockIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class InlineIfThenElseContext : IfThenElseStmtContext {
		public ITerminalNode IF() { return GetToken(VisualBasic6Parser.IF, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(VisualBasic6Parser.THEN, 0); }
		public BlockStmtContext[] blockStmt() {
			return GetRuleContexts<BlockStmtContext>();
		}
		public BlockStmtContext blockStmt(int i) {
			return GetRuleContext<BlockStmtContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(VisualBasic6Parser.ELSE, 0); }
		public InlineIfThenElseContext(IfThenElseStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterInlineIfThenElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitInlineIfThenElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInlineIfThenElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfThenElseStmtContext ifThenElseStmt() {
		IfThenElseStmtContext _localctx = new IfThenElseStmtContext(Context, State);
		EnterRule(_localctx, 80, RULE_ifThenElseStmt);
		int _la;
		try {
			State = 1010;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				_localctx = new InlineIfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 985; Match(IF);
				State = 986; Match(WS);
				State = 987; ifConditionStmt();
				State = 988; Match(WS);
				State = 989; Match(THEN);
				State = 990; Match(WS);
				State = 991; blockStmt();
				State = 996;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
				case 1:
					{
					State = 992; Match(WS);
					State = 993; Match(ELSE);
					State = 994; Match(WS);
					State = 995; blockStmt();
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new BlockIfThenElseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 998; ifBlockStmt();
				State = 1002;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==ELSEIF) {
					{
					{
					State = 999; ifElseIfBlockStmt();
					}
					}
					State = 1004;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 1006;
				_la = TokenStream.La(1);
				if (_la==ELSE) {
					{
					State = 1005; ifElseBlockStmt();
					}
				}

				State = 1008; Match(END_IF);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockStmtContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(VisualBasic6Parser.IF, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(VisualBasic6Parser.THEN, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockStmtContext ifBlockStmt() {
		IfBlockStmtContext _localctx = new IfBlockStmtContext(Context, State);
		EnterRule(_localctx, 82, RULE_ifBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1012; Match(IF);
			State = 1013; Match(WS);
			State = 1014; ifConditionStmt();
			State = 1015; Match(WS);
			State = 1016; Match(THEN);
			State = 1018;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 1017; Match(NEWLINE);
				}
				}
				State = 1020;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==NEWLINE );
			State = 1028;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				{
				State = 1022; block();
				State = 1024;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 1023; Match(NEWLINE);
					}
					}
					State = 1026;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionStmtContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public IfConditionStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifConditionStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterIfConditionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitIfConditionStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfConditionStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionStmtContext ifConditionStmt() {
		IfConditionStmtContext _localctx = new IfConditionStmtContext(Context, State);
		EnterRule(_localctx, 84, RULE_ifConditionStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1030; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseIfBlockStmtContext : ParserRuleContext {
		public ITerminalNode ELSEIF() { return GetToken(VisualBasic6Parser.ELSEIF, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(VisualBasic6Parser.THEN, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterIfElseIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitIfElseIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseIfBlockStmtContext ifElseIfBlockStmt() {
		IfElseIfBlockStmtContext _localctx = new IfElseIfBlockStmtContext(Context, State);
		EnterRule(_localctx, 86, RULE_ifElseIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1032; Match(ELSEIF);
			State = 1033; Match(WS);
			State = 1034; ifConditionStmt();
			State = 1035; Match(WS);
			State = 1036; Match(THEN);
			State = 1038;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 1037; Match(NEWLINE);
				}
				}
				State = 1040;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==NEWLINE );
			State = 1048;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
			case 1:
				{
				State = 1042; block();
				State = 1044;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 1043; Match(NEWLINE);
					}
					}
					State = 1046;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfElseBlockStmtContext : ParserRuleContext {
		public ITerminalNode ELSE() { return GetToken(VisualBasic6Parser.ELSE, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfElseBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifElseBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterIfElseBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitIfElseBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfElseBlockStmtContext ifElseBlockStmt() {
		IfElseBlockStmtContext _localctx = new IfElseBlockStmtContext(Context, State);
		EnterRule(_localctx, 88, RULE_ifElseBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1050; Match(ELSE);
			State = 1052;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 1051; Match(NEWLINE);
				}
				}
				State = 1054;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==NEWLINE );
			State = 1062;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION) | (1L << EXIT_PROPERTY) | (1L << EXIT_SUB))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)) | (1L << (PUT - 64)) | (1L << (RANDOM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1056; block();
				State = 1058;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 1057; Match(NEWLINE);
					}
					}
					State = 1060;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplementsStmtContext : ParserRuleContext {
		public ITerminalNode IMPLEMENTS() { return GetToken(VisualBasic6Parser.IMPLEMENTS, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ImplementsStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implementsStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterImplementsStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitImplementsStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplementsStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplementsStmtContext implementsStmt() {
		ImplementsStmtContext _localctx = new ImplementsStmtContext(Context, State);
		EnterRule(_localctx, 90, RULE_implementsStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1064; Match(IMPLEMENTS);
			State = 1065; Match(WS);
			State = 1066; ambiguousIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputStmtContext : ParserRuleContext {
		public ITerminalNode INPUT() { return GetToken(VisualBasic6Parser.INPUT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public InputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputStmtContext inputStmt() {
		InputStmtContext _localctx = new InputStmtContext(Context, State);
		EnterRule(_localctx, 92, RULE_inputStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1068; Match(INPUT);
			State = 1069; Match(WS);
			State = 1070; valueStmt(0);
			State = 1079;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1072;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 1071; Match(WS);
						}
					}

					State = 1074; Match(COMMA);
					State = 1076;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 1075; Match(WS);
						}
					}

					State = 1078; valueStmt(0);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1081;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,133,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KillStmtContext : ParserRuleContext {
		public ITerminalNode KILL() { return GetToken(VisualBasic6Parser.KILL, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public KillStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_killStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterKillStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitKillStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKillStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KillStmtContext killStmt() {
		KillStmtContext _localctx = new KillStmtContext(Context, State);
		EnterRule(_localctx, 94, RULE_killStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1083; Match(KILL);
			State = 1084; Match(WS);
			State = 1085; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetStmtContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ITerminalNode PLUS_EQ() { return GetToken(VisualBasic6Parser.PLUS_EQ, 0); }
		public ITerminalNode MINUS_EQ() { return GetToken(VisualBasic6Parser.MINUS_EQ, 0); }
		public ITerminalNode LET() { return GetToken(VisualBasic6Parser.LET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public LetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetStmtContext letStmt() {
		LetStmtContext _localctx = new LetStmtContext(Context, State);
		EnterRule(_localctx, 96, RULE_letStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1089;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,134,Context) ) {
			case 1:
				{
				State = 1087; Match(LET);
				State = 1088; Match(WS);
				}
				break;
			}
			State = 1091; implicitCallStmt_InStmt();
			State = 1093;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1092; Match(WS);
				}
			}

			State = 1095;
			_la = TokenStream.La(1);
			if ( !(((((_la - 182)) & ~0x3f) == 0 && ((1L << (_la - 182)) & ((1L << (EQ - 182)) | (1L << (MINUS_EQ - 182)) | (1L << (PLUS_EQ - 182)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 1097;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1096; Match(WS);
				}
			}

			State = 1099; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineInputStmtContext : ParserRuleContext {
		public ITerminalNode LINE_INPUT() { return GetToken(VisualBasic6Parser.LINE_INPUT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public LineInputStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineInputStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLineInputStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLineInputStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineInputStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineInputStmtContext lineInputStmt() {
		LineInputStmtContext _localctx = new LineInputStmtContext(Context, State);
		EnterRule(_localctx, 98, RULE_lineInputStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1101; Match(LINE_INPUT);
			State = 1102; Match(WS);
			State = 1103; valueStmt(0);
			State = 1105;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1104; Match(WS);
				}
			}

			State = 1107; Match(COMMA);
			State = 1109;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1108; Match(WS);
				}
			}

			State = 1111; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadStmtContext : ParserRuleContext {
		public ITerminalNode LOAD() { return GetToken(VisualBasic6Parser.LOAD, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public LoadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLoadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLoadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LoadStmtContext loadStmt() {
		LoadStmtContext _localctx = new LoadStmtContext(Context, State);
		EnterRule(_localctx, 100, RULE_loadStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1113; Match(LOAD);
			State = 1114; Match(WS);
			State = 1115; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStmtContext : ParserRuleContext {
		public ITerminalNode LOCK() { return GetToken(VisualBasic6Parser.LOCK, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public ITerminalNode TO() { return GetToken(VisualBasic6Parser.TO, 0); }
		public LockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LockStmtContext lockStmt() {
		LockStmtContext _localctx = new LockStmtContext(Context, State);
		EnterRule(_localctx, 102, RULE_lockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1117; Match(LOCK);
			State = 1118; Match(WS);
			State = 1119; valueStmt(0);
			State = 1134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				{
				State = 1121;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 1120; Match(WS);
					}
				}

				State = 1123; Match(COMMA);
				State = 1125;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 1124; Match(WS);
					}
				}

				State = 1127; valueStmt(0);
				State = 1132;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
				case 1:
					{
					State = 1128; Match(WS);
					State = 1129; Match(TO);
					State = 1130; Match(WS);
					State = 1131; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LsetStmtContext : ParserRuleContext {
		public ITerminalNode LSET() { return GetToken(VisualBasic6Parser.LSET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public LsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LsetStmtContext lsetStmt() {
		LsetStmtContext _localctx = new LsetStmtContext(Context, State);
		EnterRule(_localctx, 104, RULE_lsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1136; Match(LSET);
			State = 1137; Match(WS);
			State = 1138; implicitCallStmt_InStmt();
			State = 1140;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1139; Match(WS);
				}
			}

			State = 1142; Match(EQ);
			State = 1144;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1143; Match(WS);
				}
			}

			State = 1146; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroIfThenElseStmtContext : ParserRuleContext {
		public MacroIfBlockStmtContext macroIfBlockStmt() {
			return GetRuleContext<MacroIfBlockStmtContext>(0);
		}
		public ITerminalNode MACRO_END_IF() { return GetToken(VisualBasic6Parser.MACRO_END_IF, 0); }
		public MacroElseIfBlockStmtContext[] macroElseIfBlockStmt() {
			return GetRuleContexts<MacroElseIfBlockStmtContext>();
		}
		public MacroElseIfBlockStmtContext macroElseIfBlockStmt(int i) {
			return GetRuleContext<MacroElseIfBlockStmtContext>(i);
		}
		public MacroElseBlockStmtContext macroElseBlockStmt() {
			return GetRuleContext<MacroElseBlockStmtContext>(0);
		}
		public MacroIfThenElseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroIfThenElseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterMacroIfThenElseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitMacroIfThenElseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroIfThenElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroIfThenElseStmtContext macroIfThenElseStmt() {
		MacroIfThenElseStmtContext _localctx = new MacroIfThenElseStmtContext(Context, State);
		EnterRule(_localctx, 106, RULE_macroIfThenElseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1148; macroIfBlockStmt();
			State = 1152;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==MACRO_ELSEIF) {
				{
				{
				State = 1149; macroElseIfBlockStmt();
				}
				}
				State = 1154;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 1156;
			_la = TokenStream.La(1);
			if (_la==MACRO_ELSE) {
				{
				State = 1155; macroElseBlockStmt();
				}
			}

			State = 1158; Match(MACRO_END_IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroIfBlockStmtContext : ParserRuleContext {
		public ITerminalNode MACRO_IF() { return GetToken(VisualBasic6Parser.MACRO_IF, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(VisualBasic6Parser.THEN, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public MacroIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterMacroIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitMacroIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroIfBlockStmtContext macroIfBlockStmt() {
		MacroIfBlockStmtContext _localctx = new MacroIfBlockStmtContext(Context, State);
		EnterRule(_localctx, 108, RULE_macroIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1160; Match(MACRO_IF);
			State = 1161; Match(WS);
			State = 1162; ifConditionStmt();
			State = 1163; Match(WS);
			State = 1164; Match(THEN);
			State = 1166;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 1165; Match(NEWLINE);
				}
				}
				State = 1168;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==NEWLINE );
			State = 1176;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION) | (1L << EXIT_PROPERTY) | (1L << EXIT_SUB))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROPERTY_GET - 64)) | (1L << (PROPERTY_LET - 64)) | (1L << (PROPERTY_SET - 64)) | (1L << (PUBLIC - 64)) | (1L << (PUT - 64)) | (1L << (RANDOM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1170; moduleBody();
				State = 1172;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 1171; Match(NEWLINE);
					}
					}
					State = 1174;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroElseIfBlockStmtContext : ParserRuleContext {
		public ITerminalNode MACRO_ELSEIF() { return GetToken(VisualBasic6Parser.MACRO_ELSEIF, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public IfConditionStmtContext ifConditionStmt() {
			return GetRuleContext<IfConditionStmtContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(VisualBasic6Parser.THEN, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public MacroElseIfBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroElseIfBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterMacroElseIfBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitMacroElseIfBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroElseIfBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroElseIfBlockStmtContext macroElseIfBlockStmt() {
		MacroElseIfBlockStmtContext _localctx = new MacroElseIfBlockStmtContext(Context, State);
		EnterRule(_localctx, 110, RULE_macroElseIfBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1178; Match(MACRO_ELSEIF);
			State = 1179; Match(WS);
			State = 1180; ifConditionStmt();
			State = 1181; Match(WS);
			State = 1182; Match(THEN);
			State = 1184;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 1183; Match(NEWLINE);
				}
				}
				State = 1186;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==NEWLINE );
			State = 1194;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION) | (1L << EXIT_PROPERTY) | (1L << EXIT_SUB))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROPERTY_GET - 64)) | (1L << (PROPERTY_LET - 64)) | (1L << (PROPERTY_SET - 64)) | (1L << (PUBLIC - 64)) | (1L << (PUT - 64)) | (1L << (RANDOM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1188; moduleBody();
				State = 1190;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 1189; Match(NEWLINE);
					}
					}
					State = 1192;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroElseBlockStmtContext : ParserRuleContext {
		public ITerminalNode MACRO_ELSE() { return GetToken(VisualBasic6Parser.MACRO_ELSE, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public ModuleBodyContext moduleBody() {
			return GetRuleContext<ModuleBodyContext>(0);
		}
		public MacroElseBlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroElseBlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterMacroElseBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitMacroElseBlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacroElseBlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MacroElseBlockStmtContext macroElseBlockStmt() {
		MacroElseBlockStmtContext _localctx = new MacroElseBlockStmtContext(Context, State);
		EnterRule(_localctx, 112, RULE_macroElseBlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1196; Match(MACRO_ELSE);
			State = 1198;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 1197; Match(NEWLINE);
				}
				}
				State = 1200;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==NEWLINE );
			State = 1208;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION) | (1L << EXIT_PROPERTY) | (1L << EXIT_SUB))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROPERTY_GET - 64)) | (1L << (PROPERTY_LET - 64)) | (1L << (PROPERTY_SET - 64)) | (1L << (PUBLIC - 64)) | (1L << (PUT - 64)) | (1L << (RANDOM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1202; moduleBody();
				State = 1204;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 1203; Match(NEWLINE);
					}
					}
					State = 1206;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==NEWLINE );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MidStmtContext : ParserRuleContext {
		public ITerminalNode MID() { return GetToken(VisualBasic6Parser.MID, 0); }
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public MidStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_midStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterMidStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitMidStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMidStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MidStmtContext midStmt() {
		MidStmtContext _localctx = new MidStmtContext(Context, State);
		EnterRule(_localctx, 114, RULE_midStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1210; Match(MID);
			State = 1212;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1211; Match(WS);
				}
			}

			State = 1214; Match(LPAREN);
			State = 1216;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
			case 1:
				{
				State = 1215; Match(WS);
				}
				break;
			}
			State = 1218; argsCall();
			State = 1220;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1219; Match(WS);
				}
			}

			State = 1222; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MkdirStmtContext : ParserRuleContext {
		public ITerminalNode MKDIR() { return GetToken(VisualBasic6Parser.MKDIR, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public MkdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mkdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterMkdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitMkdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMkdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MkdirStmtContext mkdirStmt() {
		MkdirStmtContext _localctx = new MkdirStmtContext(Context, State);
		EnterRule(_localctx, 116, RULE_mkdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1224; Match(MKDIR);
			State = 1225; Match(WS);
			State = 1226; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameStmtContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(VisualBasic6Parser.NAME, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode AS() { return GetToken(VisualBasic6Parser.AS, 0); }
		public NameStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterNameStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitNameStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNameStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameStmtContext nameStmt() {
		NameStmtContext _localctx = new NameStmtContext(Context, State);
		EnterRule(_localctx, 118, RULE_nameStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1228; Match(NAME);
			State = 1229; Match(WS);
			State = 1230; valueStmt(0);
			State = 1231; Match(WS);
			State = 1232; Match(AS);
			State = 1233; Match(WS);
			State = 1234; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnErrorStmtContext : ParserRuleContext {
		public ITerminalNode ON_ERROR() { return GetToken(VisualBasic6Parser.ON_ERROR, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode GOTO() { return GetToken(VisualBasic6Parser.GOTO, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode RESUME() { return GetToken(VisualBasic6Parser.RESUME, 0); }
		public ITerminalNode NEXT() { return GetToken(VisualBasic6Parser.NEXT, 0); }
		public OnErrorStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onErrorStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOnErrorStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOnErrorStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnErrorStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnErrorStmtContext onErrorStmt() {
		OnErrorStmtContext _localctx = new OnErrorStmtContext(Context, State);
		EnterRule(_localctx, 120, RULE_onErrorStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1236; Match(ON_ERROR);
			State = 1237; Match(WS);
			State = 1244;
			switch (TokenStream.La(1)) {
			case GOTO:
				{
				State = 1238; Match(GOTO);
				State = 1239; Match(WS);
				State = 1240; valueStmt(0);
				}
				break;
			case RESUME:
				{
				State = 1241; Match(RESUME);
				State = 1242; Match(WS);
				State = 1243; Match(NEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoToStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VisualBasic6Parser.ON, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode GOTO() { return GetToken(VisualBasic6Parser.GOTO, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public OnGoToStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoToStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOnGoToStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOnGoToStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoToStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoToStmtContext onGoToStmt() {
		OnGoToStmtContext _localctx = new OnGoToStmtContext(Context, State);
		EnterRule(_localctx, 122, RULE_onGoToStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1246; Match(ON);
			State = 1247; Match(WS);
			State = 1248; valueStmt(0);
			State = 1249; Match(WS);
			State = 1250; Match(GOTO);
			State = 1251; Match(WS);
			State = 1252; valueStmt(0);
			State = 1263;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1254;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 1253; Match(WS);
						}
					}

					State = 1256; Match(COMMA);
					State = 1258;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 1257; Match(WS);
						}
					}

					State = 1260; valueStmt(0);
					}
					} 
				}
				State = 1265;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnGoSubStmtContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(VisualBasic6Parser.ON, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode GOSUB() { return GetToken(VisualBasic6Parser.GOSUB, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public OnGoSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onGoSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOnGoSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOnGoSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOnGoSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OnGoSubStmtContext onGoSubStmt() {
		OnGoSubStmtContext _localctx = new OnGoSubStmtContext(Context, State);
		EnterRule(_localctx, 124, RULE_onGoSubStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1266; Match(ON);
			State = 1267; Match(WS);
			State = 1268; valueStmt(0);
			State = 1269; Match(WS);
			State = 1270; Match(GOSUB);
			State = 1271; Match(WS);
			State = 1272; valueStmt(0);
			State = 1283;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,165,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1274;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 1273; Match(WS);
						}
					}

					State = 1276; Match(COMMA);
					State = 1278;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 1277; Match(WS);
						}
					}

					State = 1280; valueStmt(0);
					}
					} 
				}
				State = 1285;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,165,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpenStmtContext : ParserRuleContext {
		public ITerminalNode OPEN() { return GetToken(VisualBasic6Parser.OPEN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(VisualBasic6Parser.FOR, 0); }
		public ITerminalNode AS() { return GetToken(VisualBasic6Parser.AS, 0); }
		public ITerminalNode APPEND() { return GetToken(VisualBasic6Parser.APPEND, 0); }
		public ITerminalNode BINARY() { return GetToken(VisualBasic6Parser.BINARY, 0); }
		public ITerminalNode INPUT() { return GetToken(VisualBasic6Parser.INPUT, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VisualBasic6Parser.OUTPUT, 0); }
		public ITerminalNode RANDOM() { return GetToken(VisualBasic6Parser.RANDOM, 0); }
		public ITerminalNode ACCESS() { return GetToken(VisualBasic6Parser.ACCESS, 0); }
		public ITerminalNode LEN() { return GetToken(VisualBasic6Parser.LEN, 0); }
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ITerminalNode READ() { return GetToken(VisualBasic6Parser.READ, 0); }
		public ITerminalNode WRITE() { return GetToken(VisualBasic6Parser.WRITE, 0); }
		public ITerminalNode READ_WRITE() { return GetToken(VisualBasic6Parser.READ_WRITE, 0); }
		public ITerminalNode SHARED() { return GetToken(VisualBasic6Parser.SHARED, 0); }
		public ITerminalNode LOCK_READ() { return GetToken(VisualBasic6Parser.LOCK_READ, 0); }
		public ITerminalNode LOCK_WRITE() { return GetToken(VisualBasic6Parser.LOCK_WRITE, 0); }
		public ITerminalNode LOCK_READ_WRITE() { return GetToken(VisualBasic6Parser.LOCK_READ_WRITE, 0); }
		public OpenStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOpenStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOpenStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpenStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpenStmtContext openStmt() {
		OpenStmtContext _localctx = new OpenStmtContext(Context, State);
		EnterRule(_localctx, 126, RULE_openStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1286; Match(OPEN);
			State = 1287; Match(WS);
			State = 1288; valueStmt(0);
			State = 1289; Match(WS);
			State = 1290; Match(FOR);
			State = 1291; Match(WS);
			State = 1292;
			_la = TokenStream.La(1);
			if ( !(_la==APPEND || _la==BINARY || ((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (INPUT - 77)) | (1L << (OUTPUT - 77)) | (1L << (RANDOM - 77)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 1297;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
			case 1:
				{
				State = 1293; Match(WS);
				State = 1294; Match(ACCESS);
				State = 1295; Match(WS);
				State = 1296;
				_la = TokenStream.La(1);
				if ( !(((((_la - 130)) & ~0x3f) == 0 && ((1L << (_la - 130)) & ((1L << (READ - 130)) | (1L << (READ_WRITE - 130)) | (1L << (WRITE - 130)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			}
			State = 1301;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
			case 1:
				{
				State = 1299; Match(WS);
				State = 1300;
				_la = TokenStream.La(1);
				if ( !(((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (LOCK_READ - 90)) | (1L << (LOCK_WRITE - 90)) | (1L << (LOCK_READ_WRITE - 90)) | (1L << (SHARED - 90)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			}
			State = 1303; Match(WS);
			State = 1304; Match(AS);
			State = 1305; Match(WS);
			State = 1306; valueStmt(0);
			State = 1317;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
			case 1:
				{
				State = 1307; Match(WS);
				State = 1308; Match(LEN);
				State = 1310;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 1309; Match(WS);
					}
				}

				State = 1312; Match(EQ);
				State = 1314;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 1313; Match(WS);
					}
				}

				State = 1316; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputListContext : ParserRuleContext {
		public OutputList_ExpressionContext[] outputList_Expression() {
			return GetRuleContexts<OutputList_ExpressionContext>();
		}
		public OutputList_ExpressionContext outputList_Expression(int i) {
			return GetRuleContext<OutputList_ExpressionContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(VisualBasic6Parser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(VisualBasic6Parser.SEMICOLON, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public OutputListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOutputList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOutputList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputListContext outputList() {
		OutputListContext _localctx = new OutputListContext(Context, State);
		EnterRule(_localctx, 128, RULE_outputList);
		int _la;
		try {
			int _alt;
			State = 1352;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1319; outputList_Expression();
				State = 1332;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,174,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1321;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 1320; Match(WS);
							}
						}

						State = 1323;
						_la = TokenStream.La(1);
						if ( !(_la==COMMA || _la==SEMICOLON) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1325;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
						case 1:
							{
							State = 1324; Match(WS);
							}
							break;
						}
						State = 1328;
						_la = TokenStream.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)) | (1L << (PUT - 64)) | (1L << (RANDOM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)) | (1L << (LPAREN - 128)) | (1L << (MINUS - 128)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (PLUS - 195)) | (1L << (L_SQUARE_BRACKET - 195)) | (1L << (STRINGLITERAL - 195)) | (1L << (DATELITERAL - 195)) | (1L << (COLORLITERAL - 195)) | (1L << (INTEGERLITERAL - 195)) | (1L << (DOUBLELITERAL - 195)) | (1L << (FILENUMBER - 195)) | (1L << (IDENTIFIER - 195)))) != 0)) {
							{
							State = 1327; outputList_Expression();
							}
						}

						}
						} 
					}
					State = 1334;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,174,Context);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1336;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)) | (1L << (PUT - 64)) | (1L << (RANDOM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)) | (1L << (LPAREN - 128)) | (1L << (MINUS - 128)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (PLUS - 195)) | (1L << (L_SQUARE_BRACKET - 195)) | (1L << (STRINGLITERAL - 195)) | (1L << (DATELITERAL - 195)) | (1L << (COLORLITERAL - 195)) | (1L << (INTEGERLITERAL - 195)) | (1L << (DOUBLELITERAL - 195)) | (1L << (FILENUMBER - 195)) | (1L << (IDENTIFIER - 195)))) != 0)) {
					{
					State = 1335; outputList_Expression();
					}
				}

				State = 1348;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1339;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 1338; Match(WS);
							}
						}

						State = 1341;
						_la = TokenStream.La(1);
						if ( !(_la==COMMA || _la==SEMICOLON) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1343;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,177,Context) ) {
						case 1:
							{
							State = 1342; Match(WS);
							}
							break;
						}
						State = 1346;
						_la = TokenStream.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)) | (1L << (PUT - 64)) | (1L << (RANDOM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)) | (1L << (LPAREN - 128)) | (1L << (MINUS - 128)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (PLUS - 195)) | (1L << (L_SQUARE_BRACKET - 195)) | (1L << (STRINGLITERAL - 195)) | (1L << (DATELITERAL - 195)) | (1L << (COLORLITERAL - 195)) | (1L << (INTEGERLITERAL - 195)) | (1L << (DOUBLELITERAL - 195)) | (1L << (FILENUMBER - 195)) | (1L << (IDENTIFIER - 195)))) != 0)) {
							{
							State = 1345; outputList_Expression();
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1350;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,179,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputList_ExpressionContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode SPC() { return GetToken(VisualBasic6Parser.SPC, 0); }
		public ITerminalNode TAB() { return GetToken(VisualBasic6Parser.TAB, 0); }
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public OutputList_ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputList_Expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterOutputList_Expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitOutputList_Expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputList_Expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputList_ExpressionContext outputList_Expression() {
		OutputList_ExpressionContext _localctx = new OutputList_ExpressionContext(Context, State);
		EnterRule(_localctx, 130, RULE_outputList_Expression);
		int _la;
		try {
			State = 1371;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1354; valueStmt(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1355;
				_la = TokenStream.La(1);
				if ( !(_la==SPC || _la==TAB) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 1369;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,184,Context) ) {
				case 1:
					{
					State = 1357;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 1356; Match(WS);
						}
					}

					State = 1359; Match(LPAREN);
					State = 1361;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
					case 1:
						{
						State = 1360; Match(WS);
						}
						break;
					}
					State = 1363; argsCall();
					State = 1365;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 1364; Match(WS);
						}
					}

					State = 1367; Match(RPAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintStmtContext : ParserRuleContext {
		public ITerminalNode PRINT() { return GetToken(VisualBasic6Parser.PRINT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public PrintStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterPrintStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitPrintStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintStmtContext printStmt() {
		PrintStmtContext _localctx = new PrintStmtContext(Context, State);
		EnterRule(_localctx, 132, RULE_printStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1373; Match(PRINT);
			State = 1374; Match(WS);
			State = 1375; valueStmt(0);
			State = 1377;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1376; Match(WS);
				}
			}

			State = 1379; Match(COMMA);
			State = 1384;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
			case 1:
				{
				State = 1381;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
				case 1:
					{
					State = 1380; Match(WS);
					}
					break;
				}
				State = 1383; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyGetStmtContext : ParserRuleContext {
		public ITerminalNode PROPERTY_GET() { return GetToken(VisualBasic6Parser.PROPERTY_GET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VisualBasic6Parser.END_PROPERTY, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public PropertyGetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyGetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterPropertyGetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitPropertyGetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyGetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyGetStmtContext propertyGetStmt() {
		PropertyGetStmtContext _localctx = new PropertyGetStmtContext(Context, State);
		EnterRule(_localctx, 134, RULE_propertyGetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1389;
			_la = TokenStream.La(1);
			if (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FRIEND - 66)) | (1L << (GLOBAL - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0)) {
				{
				State = 1386; visibility();
				State = 1387; Match(WS);
				}
			}

			State = 1393;
			_la = TokenStream.La(1);
			if (_la==STATIC) {
				{
				State = 1391; Match(STATIC);
				State = 1392; Match(WS);
				}
			}

			State = 1395; Match(PROPERTY_GET);
			State = 1396; Match(WS);
			State = 1397; ambiguousIdentifier();
			State = 1399;
			_la = TokenStream.La(1);
			if (((((_la - 174)) & ~0x3f) == 0 && ((1L << (_la - 174)) & ((1L << (AMPERSAND - 174)) | (1L << (AT - 174)) | (1L << (DOLLAR - 174)) | (1L << (EXCLAMATIONMARK - 174)) | (1L << (HASH - 174)) | (1L << (PERCENT - 174)))) != 0)) {
				{
				State = 1398; typeHint();
				}
			}

			State = 1405;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,193,Context) ) {
			case 1:
				{
				State = 1402;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 1401; Match(WS);
					}
				}

				State = 1404; argList();
				}
				break;
			}
			State = 1409;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1407; Match(WS);
				State = 1408; asTypeClause();
				}
			}

			State = 1412;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 1411; Match(NEWLINE);
				}
				}
				State = 1414;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==NEWLINE );
			State = 1422;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION) | (1L << EXIT_PROPERTY) | (1L << EXIT_SUB))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)) | (1L << (PUT - 64)) | (1L << (RANDOM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1416; block();
				State = 1418;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 1417; Match(NEWLINE);
					}
					}
					State = 1420;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1424; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertySetStmtContext : ParserRuleContext {
		public ITerminalNode PROPERTY_SET() { return GetToken(VisualBasic6Parser.PROPERTY_SET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VisualBasic6Parser.END_PROPERTY, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public PropertySetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertySetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterPropertySetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitPropertySetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertySetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertySetStmtContext propertySetStmt() {
		PropertySetStmtContext _localctx = new PropertySetStmtContext(Context, State);
		EnterRule(_localctx, 136, RULE_propertySetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1429;
			_la = TokenStream.La(1);
			if (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FRIEND - 66)) | (1L << (GLOBAL - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0)) {
				{
				State = 1426; visibility();
				State = 1427; Match(WS);
				}
			}

			State = 1433;
			_la = TokenStream.La(1);
			if (_la==STATIC) {
				{
				State = 1431; Match(STATIC);
				State = 1432; Match(WS);
				}
			}

			State = 1435; Match(PROPERTY_SET);
			State = 1436; Match(WS);
			State = 1437; ambiguousIdentifier();
			State = 1442;
			_la = TokenStream.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1439;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 1438; Match(WS);
					}
				}

				State = 1441; argList();
				}
			}

			State = 1445;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 1444; Match(NEWLINE);
				}
				}
				State = 1447;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==NEWLINE );
			State = 1455;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION) | (1L << EXIT_PROPERTY) | (1L << EXIT_SUB))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)) | (1L << (PUT - 64)) | (1L << (RANDOM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1449; block();
				State = 1451;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 1450; Match(NEWLINE);
					}
					}
					State = 1453;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1457; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLetStmtContext : ParserRuleContext {
		public ITerminalNode PROPERTY_LET() { return GetToken(VisualBasic6Parser.PROPERTY_LET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_PROPERTY() { return GetToken(VisualBasic6Parser.END_PROPERTY, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public PropertyLetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterPropertyLetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitPropertyLetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyLetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLetStmtContext propertyLetStmt() {
		PropertyLetStmtContext _localctx = new PropertyLetStmtContext(Context, State);
		EnterRule(_localctx, 138, RULE_propertyLetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1462;
			_la = TokenStream.La(1);
			if (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FRIEND - 66)) | (1L << (GLOBAL - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0)) {
				{
				State = 1459; visibility();
				State = 1460; Match(WS);
				}
			}

			State = 1466;
			_la = TokenStream.La(1);
			if (_la==STATIC) {
				{
				State = 1464; Match(STATIC);
				State = 1465; Match(WS);
				}
			}

			State = 1468; Match(PROPERTY_LET);
			State = 1469; Match(WS);
			State = 1470; ambiguousIdentifier();
			State = 1475;
			_la = TokenStream.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1472;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 1471; Match(WS);
					}
				}

				State = 1474; argList();
				}
			}

			State = 1478;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 1477; Match(NEWLINE);
				}
				}
				State = 1480;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==NEWLINE );
			State = 1488;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION) | (1L << EXIT_PROPERTY) | (1L << EXIT_SUB))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)) | (1L << (PUT - 64)) | (1L << (RANDOM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1482; block();
				State = 1484;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 1483; Match(NEWLINE);
					}
					}
					State = 1486;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1490; Match(END_PROPERTY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PutStmtContext : ParserRuleContext {
		public ITerminalNode PUT() { return GetToken(VisualBasic6Parser.PUT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public PutStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_putStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterPutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitPutStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPutStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PutStmtContext putStmt() {
		PutStmtContext _localctx = new PutStmtContext(Context, State);
		EnterRule(_localctx, 140, RULE_putStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1492; Match(PUT);
			State = 1493; Match(WS);
			State = 1494; valueStmt(0);
			State = 1496;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1495; Match(WS);
				}
			}

			State = 1498; Match(COMMA);
			State = 1500;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,213,Context) ) {
			case 1:
				{
				State = 1499; Match(WS);
				}
				break;
			}
			State = 1503;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)) | (1L << (PUT - 64)) | (1L << (RANDOM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)) | (1L << (LPAREN - 128)) | (1L << (MINUS - 128)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (PLUS - 195)) | (1L << (L_SQUARE_BRACKET - 195)) | (1L << (STRINGLITERAL - 195)) | (1L << (DATELITERAL - 195)) | (1L << (COLORLITERAL - 195)) | (1L << (INTEGERLITERAL - 195)) | (1L << (DOUBLELITERAL - 195)) | (1L << (FILENUMBER - 195)) | (1L << (IDENTIFIER - 195)))) != 0)) {
				{
				State = 1502; valueStmt(0);
				}
			}

			State = 1506;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1505; Match(WS);
				}
			}

			State = 1508; Match(COMMA);
			State = 1510;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1509; Match(WS);
				}
			}

			State = 1512; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RaiseEventStmtContext : ParserRuleContext {
		public ITerminalNode RAISEEVENT() { return GetToken(VisualBasic6Parser.RAISEEVENT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public RaiseEventStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_raiseEventStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterRaiseEventStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitRaiseEventStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRaiseEventStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RaiseEventStmtContext raiseEventStmt() {
		RaiseEventStmtContext _localctx = new RaiseEventStmtContext(Context, State);
		EnterRule(_localctx, 142, RULE_raiseEventStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1514; Match(RAISEEVENT);
			State = 1515; Match(WS);
			State = 1516; ambiguousIdentifier();
			State = 1531;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,221,Context) ) {
			case 1:
				{
				State = 1518;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 1517; Match(WS);
					}
				}

				State = 1520; Match(LPAREN);
				State = 1522;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,218,Context) ) {
				case 1:
					{
					State = 1521; Match(WS);
					}
					break;
				}
				State = 1528;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)) | (1L << (PUT - 64)) | (1L << (RANDOM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (COMMA - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)) | (1L << (LPAREN - 128)) | (1L << (MINUS - 128)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (PLUS - 195)) | (1L << (SEMICOLON - 195)) | (1L << (L_SQUARE_BRACKET - 195)) | (1L << (STRINGLITERAL - 195)) | (1L << (DATELITERAL - 195)) | (1L << (COLORLITERAL - 195)) | (1L << (INTEGERLITERAL - 195)) | (1L << (DOUBLELITERAL - 195)) | (1L << (FILENUMBER - 195)) | (1L << (IDENTIFIER - 195)) | (1L << (WS - 195)))) != 0)) {
					{
					State = 1524; argsCall();
					State = 1526;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 1525; Match(WS);
						}
					}

					}
				}

				State = 1530; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RandomizeStmtContext : ParserRuleContext {
		public ITerminalNode RANDOMIZE() { return GetToken(VisualBasic6Parser.RANDOMIZE, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public RandomizeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_randomizeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterRandomizeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitRandomizeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRandomizeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RandomizeStmtContext randomizeStmt() {
		RandomizeStmtContext _localctx = new RandomizeStmtContext(Context, State);
		EnterRule(_localctx, 144, RULE_randomizeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1533; Match(RANDOMIZE);
			State = 1536;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,222,Context) ) {
			case 1:
				{
				State = 1534; Match(WS);
				State = 1535; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimStmtContext : ParserRuleContext {
		public ITerminalNode REDIM() { return GetToken(VisualBasic6Parser.REDIM, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public RedimSubStmtContext[] redimSubStmt() {
			return GetRuleContexts<RedimSubStmtContext>();
		}
		public RedimSubStmtContext redimSubStmt(int i) {
			return GetRuleContext<RedimSubStmtContext>(i);
		}
		public ITerminalNode PRESERVE() { return GetToken(VisualBasic6Parser.PRESERVE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public RedimStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterRedimStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitRedimStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimStmtContext redimStmt() {
		RedimStmtContext _localctx = new RedimStmtContext(Context, State);
		EnterRule(_localctx, 146, RULE_redimStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1538; Match(REDIM);
			State = 1539; Match(WS);
			State = 1542;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,223,Context) ) {
			case 1:
				{
				State = 1540; Match(PRESERVE);
				State = 1541; Match(WS);
				}
				break;
			}
			State = 1544; redimSubStmt();
			State = 1555;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,226,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1546;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 1545; Match(WS);
						}
					}

					State = 1548; Match(COMMA);
					State = 1550;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 1549; Match(WS);
						}
					}

					State = 1552; redimSubStmt();
					}
					} 
				}
				State = 1557;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,226,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RedimSubStmtContext : ParserRuleContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public RedimSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_redimSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterRedimSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitRedimSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRedimSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RedimSubStmtContext redimSubStmt() {
		RedimSubStmtContext _localctx = new RedimSubStmtContext(Context, State);
		EnterRule(_localctx, 148, RULE_redimSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1558; implicitCallStmt_InStmt();
			State = 1560;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1559; Match(WS);
				}
			}

			State = 1562; Match(LPAREN);
			State = 1564;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1563; Match(WS);
				}
			}

			State = 1566; subscripts();
			State = 1568;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1567; Match(WS);
				}
			}

			State = 1570; Match(RPAREN);
			State = 1573;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,230,Context) ) {
			case 1:
				{
				State = 1571; Match(WS);
				State = 1572; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetStmtContext : ParserRuleContext {
		public ITerminalNode RESET() { return GetToken(VisualBasic6Parser.RESET, 0); }
		public ResetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterResetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitResetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResetStmtContext resetStmt() {
		ResetStmtContext _localctx = new ResetStmtContext(Context, State);
		EnterRule(_localctx, 150, RULE_resetStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1575; Match(RESET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResumeStmtContext : ParserRuleContext {
		public ITerminalNode RESUME() { return GetToken(VisualBasic6Parser.RESUME, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ITerminalNode NEXT() { return GetToken(VisualBasic6Parser.NEXT, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ResumeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resumeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterResumeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitResumeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResumeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResumeStmtContext resumeStmt() {
		ResumeStmtContext _localctx = new ResumeStmtContext(Context, State);
		EnterRule(_localctx, 152, RULE_resumeStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1577; Match(RESUME);
			State = 1583;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
			case 1:
				{
				State = 1578; Match(WS);
				State = 1581;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,231,Context) ) {
				case 1:
					{
					State = 1579; Match(NEXT);
					}
					break;
				case 2:
					{
					State = 1580; ambiguousIdentifier();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(VisualBasic6Parser.RETURN, 0); }
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 154, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1585; Match(RETURN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RmdirStmtContext : ParserRuleContext {
		public ITerminalNode RMDIR() { return GetToken(VisualBasic6Parser.RMDIR, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public RmdirStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rmdirStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterRmdirStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitRmdirStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRmdirStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RmdirStmtContext rmdirStmt() {
		RmdirStmtContext _localctx = new RmdirStmtContext(Context, State);
		EnterRule(_localctx, 156, RULE_rmdirStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1587; Match(RMDIR);
			State = 1588; Match(WS);
			State = 1589; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RsetStmtContext : ParserRuleContext {
		public ITerminalNode RSET() { return GetToken(VisualBasic6Parser.RSET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public RsetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rsetStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterRsetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitRsetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRsetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RsetStmtContext rsetStmt() {
		RsetStmtContext _localctx = new RsetStmtContext(Context, State);
		EnterRule(_localctx, 158, RULE_rsetStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1591; Match(RSET);
			State = 1592; Match(WS);
			State = 1593; implicitCallStmt_InStmt();
			State = 1595;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1594; Match(WS);
				}
			}

			State = 1597; Match(EQ);
			State = 1599;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1598; Match(WS);
				}
			}

			State = 1601; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavepictureStmtContext : ParserRuleContext {
		public ITerminalNode SAVEPICTURE() { return GetToken(VisualBasic6Parser.SAVEPICTURE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public SavepictureStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepictureStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSavepictureStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSavepictureStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSavepictureStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SavepictureStmtContext savepictureStmt() {
		SavepictureStmtContext _localctx = new SavepictureStmtContext(Context, State);
		EnterRule(_localctx, 160, RULE_savepictureStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1603; Match(SAVEPICTURE);
			State = 1604; Match(WS);
			State = 1605; valueStmt(0);
			State = 1607;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1606; Match(WS);
				}
			}

			State = 1609; Match(COMMA);
			State = 1611;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1610; Match(WS);
				}
			}

			State = 1613; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SaveSettingStmtContext : ParserRuleContext {
		public ITerminalNode SAVESETTING() { return GetToken(VisualBasic6Parser.SAVESETTING, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public SaveSettingStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_saveSettingStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSaveSettingStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSaveSettingStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSaveSettingStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SaveSettingStmtContext saveSettingStmt() {
		SaveSettingStmtContext _localctx = new SaveSettingStmtContext(Context, State);
		EnterRule(_localctx, 162, RULE_saveSettingStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1615; Match(SAVESETTING);
			State = 1616; Match(WS);
			State = 1617; valueStmt(0);
			State = 1619;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1618; Match(WS);
				}
			}

			State = 1621; Match(COMMA);
			State = 1623;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1622; Match(WS);
				}
			}

			State = 1625; valueStmt(0);
			State = 1627;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1626; Match(WS);
				}
			}

			State = 1629; Match(COMMA);
			State = 1631;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1630; Match(WS);
				}
			}

			State = 1633; valueStmt(0);
			State = 1635;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1634; Match(WS);
				}
			}

			State = 1637; Match(COMMA);
			State = 1639;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1638; Match(WS);
				}
			}

			State = 1641; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeekStmtContext : ParserRuleContext {
		public ITerminalNode SEEK() { return GetToken(VisualBasic6Parser.SEEK, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public SeekStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_seekStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSeekStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSeekStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSeekStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SeekStmtContext seekStmt() {
		SeekStmtContext _localctx = new SeekStmtContext(Context, State);
		EnterRule(_localctx, 164, RULE_seekStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1643; Match(SEEK);
			State = 1644; Match(WS);
			State = 1645; valueStmt(0);
			State = 1647;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1646; Match(WS);
				}
			}

			State = 1649; Match(COMMA);
			State = 1651;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1650; Match(WS);
				}
			}

			State = 1653; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectCaseStmtContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(VisualBasic6Parser.SELECT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode CASE() { return GetToken(VisualBasic6Parser.CASE, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode END_SELECT() { return GetToken(VisualBasic6Parser.END_SELECT, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public SC_CaseContext[] sC_Case() {
			return GetRuleContexts<SC_CaseContext>();
		}
		public SC_CaseContext sC_Case(int i) {
			return GetRuleContext<SC_CaseContext>(i);
		}
		public SelectCaseStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectCaseStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSelectCaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSelectCaseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectCaseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectCaseStmtContext selectCaseStmt() {
		SelectCaseStmtContext _localctx = new SelectCaseStmtContext(Context, State);
		EnterRule(_localctx, 166, RULE_selectCaseStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1655; Match(SELECT);
			State = 1656; Match(WS);
			State = 1657; Match(CASE);
			State = 1658; Match(WS);
			State = 1659; valueStmt(0);
			State = 1661;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 1660; Match(NEWLINE);
				}
				}
				State = 1663;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==NEWLINE );
			State = 1668;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==CASE) {
				{
				{
				State = 1665; sC_Case();
				}
				}
				State = 1670;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 1672;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1671; Match(WS);
				}
			}

			State = 1674; Match(END_SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CaseContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(VisualBasic6Parser.CASE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public SC_CondContext sC_Cond() {
			return GetRuleContext<SC_CondContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(VisualBasic6Parser.COLON, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public SC_CaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Case; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSC_Case(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSC_Case(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSC_Case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CaseContext sC_Case() {
		SC_CaseContext _localctx = new SC_CaseContext(Context, State);
		EnterRule(_localctx, 168, RULE_sC_Case);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1676; Match(CASE);
			State = 1677; Match(WS);
			State = 1678; sC_Cond();
			State = 1680;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,248,Context) ) {
			case 1:
				{
				State = 1679; Match(WS);
				}
				break;
			}
			State = 1696;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,252,Context) ) {
			case 1:
				{
				State = 1683;
				_la = TokenStream.La(1);
				if (_la==COLON) {
					{
					State = 1682; Match(COLON);
					}
				}

				State = 1688;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 1685; Match(NEWLINE);
					}
					}
					State = 1690;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case 2:
				{
				State = 1692;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 1691; Match(NEWLINE);
					}
					}
					State = 1694;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			State = 1704;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,254,Context) ) {
			case 1:
				{
				State = 1698; block();
				State = 1700;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 1699; Match(NEWLINE);
					}
					}
					State = 1702;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==NEWLINE );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SC_CondContext : ParserRuleContext {
		public SC_CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sC_Cond; } }
	 
		public SC_CondContext() { }
		public virtual void CopyFrom(SC_CondContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CaseCondValueContext : SC_CondContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public CaseCondValueContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCaseCondValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCaseCondValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondValue(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondToContext : SC_CondContext {
		public ITerminalNode INTEGERLITERAL() { return GetToken(VisualBasic6Parser.INTEGERLITERAL, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode TO() { return GetToken(VisualBasic6Parser.TO, 0); }
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public CaseCondToContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCaseCondTo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCaseCondTo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondTo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondIsContext : SC_CondContext {
		public ITerminalNode IS() { return GetToken(VisualBasic6Parser.IS, 0); }
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public CaseCondIsContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCaseCondIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCaseCondIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondIs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CaseCondElseContext : SC_CondContext {
		public ITerminalNode ELSE() { return GetToken(VisualBasic6Parser.ELSE, 0); }
		public CaseCondElseContext(SC_CondContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCaseCondElse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCaseCondElse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCaseCondElse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SC_CondContext sC_Cond() {
		SC_CondContext _localctx = new SC_CondContext(Context, State);
		EnterRule(_localctx, 170, RULE_sC_Cond);
		int _la;
		try {
			int _alt;
			State = 1749;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,263,Context) ) {
			case 1:
				_localctx = new CaseCondElseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1706; Match(ELSE);
				}
				break;
			case 2:
				_localctx = new CaseCondIsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1707; Match(IS);
				State = 1709;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 1708; Match(WS);
					}
				}

				State = 1711; comparisonOperator();
				State = 1713;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 1712; Match(WS);
					}
				}

				State = 1715; valueStmt(0);
				}
				break;
			case 3:
				_localctx = new CaseCondValueContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1717; valueStmt(0);
				State = 1728;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,259,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1719;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 1718; Match(WS);
							}
						}

						State = 1721; Match(COMMA);
						State = 1723;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 1722; Match(WS);
							}
						}

						State = 1725; valueStmt(0);
						}
						} 
					}
					State = 1730;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,259,Context);
				}
				}
				break;
			case 4:
				_localctx = new CaseCondToContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1731; Match(INTEGERLITERAL);
				State = 1732; Match(WS);
				State = 1733; Match(TO);
				State = 1734; Match(WS);
				State = 1735; valueStmt(0);
				State = 1746;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,262,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 1737;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 1736; Match(WS);
							}
						}

						State = 1739; Match(COMMA);
						State = 1741;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 1740; Match(WS);
							}
						}

						State = 1743; valueStmt(0);
						}
						} 
					}
					State = 1748;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,262,Context);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SendkeysStmtContext : ParserRuleContext {
		public ITerminalNode SENDKEYS() { return GetToken(VisualBasic6Parser.SENDKEYS, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public SendkeysStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sendkeysStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSendkeysStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSendkeysStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSendkeysStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SendkeysStmtContext sendkeysStmt() {
		SendkeysStmtContext _localctx = new SendkeysStmtContext(Context, State);
		EnterRule(_localctx, 172, RULE_sendkeysStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1751; Match(SENDKEYS);
			State = 1752; Match(WS);
			State = 1753; valueStmt(0);
			State = 1762;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,266,Context) ) {
			case 1:
				{
				State = 1755;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 1754; Match(WS);
					}
				}

				State = 1757; Match(COMMA);
				State = 1759;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 1758; Match(WS);
					}
				}

				State = 1761; valueStmt(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetattrStmtContext : ParserRuleContext {
		public ITerminalNode SETATTR() { return GetToken(VisualBasic6Parser.SETATTR, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public SetattrStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setattrStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSetattrStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSetattrStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetattrStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetattrStmtContext setattrStmt() {
		SetattrStmtContext _localctx = new SetattrStmtContext(Context, State);
		EnterRule(_localctx, 174, RULE_setattrStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1764; Match(SETATTR);
			State = 1765; Match(WS);
			State = 1766; valueStmt(0);
			State = 1768;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1767; Match(WS);
				}
			}

			State = 1770; Match(COMMA);
			State = 1772;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1771; Match(WS);
				}
			}

			State = 1774; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStmtContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(VisualBasic6Parser.SET, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public SetStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSetStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSetStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetStmtContext setStmt() {
		SetStmtContext _localctx = new SetStmtContext(Context, State);
		EnterRule(_localctx, 176, RULE_setStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1776; Match(SET);
			State = 1777; Match(WS);
			State = 1778; implicitCallStmt_InStmt();
			State = 1780;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1779; Match(WS);
				}
			}

			State = 1782; Match(EQ);
			State = 1784;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1783; Match(WS);
				}
			}

			State = 1786; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopStmtContext : ParserRuleContext {
		public ITerminalNode STOP() { return GetToken(VisualBasic6Parser.STOP, 0); }
		public StopStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterStopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitStopStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStopStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StopStmtContext stopStmt() {
		StopStmtContext _localctx = new StopStmtContext(Context, State);
		EnterRule(_localctx, 178, RULE_stopStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1788; Match(STOP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubStmtContext : ParserRuleContext {
		public ITerminalNode SUB() { return GetToken(VisualBasic6Parser.SUB, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_SUB() { return GetToken(VisualBasic6Parser.END_SUB, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public ArgListContext argList() {
			return GetRuleContext<ArgListContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubStmtContext subStmt() {
		SubStmtContext _localctx = new SubStmtContext(Context, State);
		EnterRule(_localctx, 180, RULE_subStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1793;
			_la = TokenStream.La(1);
			if (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FRIEND - 66)) | (1L << (GLOBAL - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0)) {
				{
				State = 1790; visibility();
				State = 1791; Match(WS);
				}
			}

			State = 1797;
			_la = TokenStream.La(1);
			if (_la==STATIC) {
				{
				State = 1795; Match(STATIC);
				State = 1796; Match(WS);
				}
			}

			State = 1799; Match(SUB);
			State = 1800; Match(WS);
			State = 1801; ambiguousIdentifier();
			State = 1806;
			_la = TokenStream.La(1);
			if (_la==LPAREN || _la==WS) {
				{
				State = 1803;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 1802; Match(WS);
					}
				}

				State = 1805; argList();
				}
			}

			State = 1809;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 1808; Match(NEWLINE);
				}
				}
				State = 1811;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==NEWLINE );
			State = 1819;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION) | (1L << EXIT_PROPERTY) | (1L << EXIT_SUB))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)) | (1L << (PUT - 64)) | (1L << (RANDOM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 1813; block();
				State = 1815;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 1814; Match(NEWLINE);
					}
					}
					State = 1817;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 1821; Match(END_SUB);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeStmtContext : ParserRuleContext {
		public ITerminalNode TIME() { return GetToken(VisualBasic6Parser.TIME, 0); }
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public TimeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterTimeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitTimeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeStmtContext timeStmt() {
		TimeStmtContext _localctx = new TimeStmtContext(Context, State);
		EnterRule(_localctx, 182, RULE_timeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1823; Match(TIME);
			State = 1825;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1824; Match(WS);
				}
			}

			State = 1827; Match(EQ);
			State = 1829;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1828; Match(WS);
				}
			}

			State = 1831; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmtContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(VisualBasic6Parser.TYPE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode END_TYPE() { return GetToken(VisualBasic6Parser.END_TYPE, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public TypeStmt_ElementContext[] typeStmt_Element() {
			return GetRuleContexts<TypeStmt_ElementContext>();
		}
		public TypeStmt_ElementContext typeStmt_Element(int i) {
			return GetRuleContext<TypeStmt_ElementContext>(i);
		}
		public TypeStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterTypeStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitTypeStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmtContext typeStmt() {
		TypeStmtContext _localctx = new TypeStmtContext(Context, State);
		EnterRule(_localctx, 184, RULE_typeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1836;
			_la = TokenStream.La(1);
			if (((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FRIEND - 66)) | (1L << (GLOBAL - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0)) {
				{
				State = 1833; visibility();
				State = 1834; Match(WS);
				}
			}

			State = 1838; Match(TYPE);
			State = 1839; Match(WS);
			State = 1840; ambiguousIdentifier();
			State = 1842;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 1841; Match(NEWLINE);
				}
				}
				State = 1844;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==NEWLINE );
			State = 1849;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)) | (1L << (PUT - 64)) | (1L << (RANDOM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				{
				State = 1846; typeStmt_Element();
				}
				}
				State = 1851;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 1852; Match(END_TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeStmt_ElementContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public TypeStmt_ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeStmt_Element; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterTypeStmt_Element(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitTypeStmt_Element(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeStmt_Element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeStmt_ElementContext typeStmt_Element() {
		TypeStmt_ElementContext _localctx = new TypeStmt_ElementContext(Context, State);
		EnterRule(_localctx, 186, RULE_typeStmt_Element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1854; ambiguousIdentifier();
			State = 1869;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
			case 1:
				{
				State = 1856;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 1855; Match(WS);
					}
				}

				State = 1858; Match(LPAREN);
				State = 1863;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,285,Context) ) {
				case 1:
					{
					State = 1860;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 1859; Match(WS);
						}
					}

					State = 1862; subscripts();
					}
					break;
				}
				State = 1866;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 1865; Match(WS);
					}
				}

				State = 1868; Match(RPAREN);
				}
				break;
			}
			State = 1873;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 1871; Match(WS);
				State = 1872; asTypeClause();
				}
			}

			State = 1876;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 1875; Match(NEWLINE);
				}
				}
				State = 1878;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==NEWLINE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeOfStmtContext : ParserRuleContext {
		public ITerminalNode TYPEOF() { return GetToken(VisualBasic6Parser.TYPEOF, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode IS() { return GetToken(VisualBasic6Parser.IS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeOfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeOfStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterTypeOfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitTypeOfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeOfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeOfStmtContext typeOfStmt() {
		TypeOfStmtContext _localctx = new TypeOfStmtContext(Context, State);
		EnterRule(_localctx, 188, RULE_typeOfStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1880; Match(TYPEOF);
			State = 1881; Match(WS);
			State = 1882; valueStmt(0);
			State = 1887;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,290,Context) ) {
			case 1:
				{
				State = 1883; Match(WS);
				State = 1884; Match(IS);
				State = 1885; Match(WS);
				State = 1886; type();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnloadStmtContext : ParserRuleContext {
		public ITerminalNode UNLOAD() { return GetToken(VisualBasic6Parser.UNLOAD, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public UnloadStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unloadStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterUnloadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitUnloadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnloadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnloadStmtContext unloadStmt() {
		UnloadStmtContext _localctx = new UnloadStmtContext(Context, State);
		EnterRule(_localctx, 190, RULE_unloadStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1889; Match(UNLOAD);
			State = 1890; Match(WS);
			State = 1891; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlockStmtContext : ParserRuleContext {
		public ITerminalNode UNLOCK() { return GetToken(VisualBasic6Parser.UNLOCK, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public ITerminalNode TO() { return GetToken(VisualBasic6Parser.TO, 0); }
		public UnlockStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlockStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterUnlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitUnlockStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnlockStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnlockStmtContext unlockStmt() {
		UnlockStmtContext _localctx = new UnlockStmtContext(Context, State);
		EnterRule(_localctx, 192, RULE_unlockStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1893; Match(UNLOCK);
			State = 1894; Match(WS);
			State = 1895; valueStmt(0);
			State = 1910;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,294,Context) ) {
			case 1:
				{
				State = 1897;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 1896; Match(WS);
					}
				}

				State = 1899; Match(COMMA);
				State = 1901;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 1900; Match(WS);
					}
				}

				State = 1903; valueStmt(0);
				State = 1908;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,293,Context) ) {
				case 1:
					{
					State = 1904; Match(WS);
					State = 1905; Match(TO);
					State = 1906; Match(WS);
					State = 1907; valueStmt(0);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueStmtContext : ParserRuleContext {
		public ValueStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueStmt; } }
	 
		public ValueStmtContext() { }
		public virtual void CopyFrom(ValueStmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VsStructContext : ValueStmtContext {
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public VsStructContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsStruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(VisualBasic6Parser.PLUS, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsAddContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLtContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode LT() { return GetToken(VisualBasic6Parser.LT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsLtContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsLt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsLt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAddressOfContext : ValueStmtContext {
		public ITerminalNode ADDRESSOF() { return GetToken(VisualBasic6Parser.ADDRESSOF, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public VsAddressOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsAddressOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsAddressOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAddressOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNewContext : ValueStmtContext {
		public ITerminalNode NEW() { return GetToken(VisualBasic6Parser.NEW, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public VsNewContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsNew(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsNew(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNew(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMultContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode MULT() { return GetToken(VisualBasic6Parser.MULT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsMultContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsMult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNegationContext : ValueStmtContext {
		public ITerminalNode MINUS() { return GetToken(VisualBasic6Parser.MINUS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public VsNegationContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAssignContext : ValueStmtContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode ASSIGN() { return GetToken(VisualBasic6Parser.ASSIGN, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsAssignContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsAssign(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAssign(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLikeContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode LIKE() { return GetToken(VisualBasic6Parser.LIKE, 0); }
		public VsLikeContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsLike(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsLike(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLike(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsDivContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(VisualBasic6Parser.DIV, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsDivContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsPlusContext : ValueStmtContext {
		public ITerminalNode PLUS() { return GetToken(VisualBasic6Parser.PLUS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public VsPlusContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsPlus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNotContext : ValueStmtContext {
		public ITerminalNode NOT() { return GetToken(VisualBasic6Parser.NOT, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public VsNotContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsGeqContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode GEQ() { return GetToken(VisualBasic6Parser.GEQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsGeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsGeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsGeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsGeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsTypeOfContext : ValueStmtContext {
		public TypeOfStmtContext typeOfStmt() {
			return GetRuleContext<TypeOfStmtContext>(0);
		}
		public VsTypeOfContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsTypeOf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsTypeOf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsTypeOf(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsICSContext : ValueStmtContext {
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public VsICSContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsICS(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsICS(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsICS(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsNeqContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode NEQ() { return GetToken(VisualBasic6Parser.NEQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsNeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsNeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsNeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsNeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsXorContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode XOR() { return GetToken(VisualBasic6Parser.XOR, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsXorContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsXor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsXor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAndContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode AND() { return GetToken(VisualBasic6Parser.AND, 0); }
		public VsAndContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLeqContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode LEQ() { return GetToken(VisualBasic6Parser.LEQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsLeqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsLeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsLeq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLeq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsPowContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode POW() { return GetToken(VisualBasic6Parser.POW, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsPowContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsPow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsPow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsPow(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsIsContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode IS() { return GetToken(VisualBasic6Parser.IS, 0); }
		public VsIsContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsIs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsIs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsIs(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsModContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode MOD() { return GetToken(VisualBasic6Parser.MOD, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsModContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsAmpContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode AMPERSAND() { return GetToken(VisualBasic6Parser.AMPERSAND, 0); }
		public VsAmpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsAmp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsAmp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsAmp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsOrContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode OR() { return GetToken(VisualBasic6Parser.OR, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsOrContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMinusContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(VisualBasic6Parser.MINUS, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsMinusContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsLiteralContext : ValueStmtContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public VsLiteralContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsEqvContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode EQV() { return GetToken(VisualBasic6Parser.EQV, 0); }
		public VsEqvContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsEqv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsEqv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsEqv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsImpContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode IMP() { return GetToken(VisualBasic6Parser.IMP, 0); }
		public VsImpContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsImp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsImp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsImp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsGtContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode GT() { return GetToken(VisualBasic6Parser.GT, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsGtContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsGt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsGt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsGt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsEqContext : ValueStmtContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VsEqContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsEq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsEq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsEq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VsMidContext : ValueStmtContext {
		public MidStmtContext midStmt() {
			return GetRuleContext<MidStmtContext>(0);
		}
		public VsMidContext(ValueStmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVsMid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVsMid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVsMid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueStmtContext valueStmt() {
		return valueStmt(0);
	}

	private ValueStmtContext valueStmt(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ValueStmtContext _localctx = new ValueStmtContext(Context, _parentState);
		ValueStmtContext _prevctx = _localctx;
		int _startState = 194;
		EnterRecursionRule(_localctx, 194, RULE_valueStmt, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1966;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,303,Context) ) {
			case 1:
				{
				_localctx = new VsLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1913; literal();
				}
				break;
			case 2:
				{
				_localctx = new VsICSContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1914; implicitCallStmt_InStmt();
				}
				break;
			case 3:
				{
				_localctx = new VsStructContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1915; Match(LPAREN);
				State = 1917;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 1916; Match(WS);
					}
				}

				State = 1919; valueStmt(0);
				State = 1930;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==COMMA || _la==WS) {
					{
					{
					State = 1921;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 1920; Match(WS);
						}
					}

					State = 1923; Match(COMMA);
					State = 1925;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 1924; Match(WS);
						}
					}

					State = 1927; valueStmt(0);
					}
					}
					State = 1932;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 1933; Match(RPAREN);
				}
				break;
			case 4:
				{
				_localctx = new VsNewContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1935; Match(NEW);
				State = 1936; Match(WS);
				State = 1937; valueStmt(28);
				}
				break;
			case 5:
				{
				_localctx = new VsTypeOfContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1938; typeOfStmt();
				}
				break;
			case 6:
				{
				_localctx = new VsMidContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1939; midStmt();
				}
				break;
			case 7:
				{
				_localctx = new VsAddressOfContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1940; Match(ADDRESSOF);
				State = 1941; Match(WS);
				State = 1942; valueStmt(25);
				}
				break;
			case 8:
				{
				_localctx = new VsAssignContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1943; implicitCallStmt_InStmt();
				State = 1945;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 1944; Match(WS);
					}
				}

				State = 1947; Match(ASSIGN);
				State = 1949;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 1948; Match(WS);
					}
				}

				State = 1951; valueStmt(24);
				}
				break;
			case 9:
				{
				_localctx = new VsNegationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1953; Match(MINUS);
				State = 1955;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 1954; Match(WS);
					}
				}

				State = 1957; valueStmt(14);
				}
				break;
			case 10:
				{
				_localctx = new VsPlusContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1958; Match(PLUS);
				State = 1960;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 1959; Match(WS);
					}
				}

				State = 1962; valueStmt(13);
				}
				break;
			case 11:
				{
				_localctx = new VsNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1963; Match(NOT);
				State = 1964; Match(WS);
				State = 1965; valueStmt(1);
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 2126;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,333,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2124;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,332,Context) ) {
					case 1:
						{
						_localctx = new VsIsContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1968;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 1969; Match(WS);
						State = 1970; Match(IS);
						State = 1971; Match(WS);
						State = 1972; valueStmt(24);
						}
						break;
					case 2:
						{
						_localctx = new VsLikeContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1973;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 1974; Match(WS);
						State = 1975; Match(LIKE);
						State = 1976; Match(WS);
						State = 1977; valueStmt(23);
						}
						break;
					case 3:
						{
						_localctx = new VsGeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1978;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 1980;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 1979; Match(WS);
							}
						}

						State = 1982; Match(GEQ);
						State = 1984;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 1983; Match(WS);
							}
						}

						State = 1986; valueStmt(22);
						}
						break;
					case 4:
						{
						_localctx = new VsLeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1987;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1989;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 1988; Match(WS);
							}
						}

						State = 1991; Match(LEQ);
						State = 1993;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 1992; Match(WS);
							}
						}

						State = 1995; valueStmt(21);
						}
						break;
					case 5:
						{
						_localctx = new VsGtContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 1996;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 1998;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 1997; Match(WS);
							}
						}

						State = 2000; Match(GT);
						State = 2002;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 2001; Match(WS);
							}
						}

						State = 2004; valueStmt(20);
						}
						break;
					case 6:
						{
						_localctx = new VsLtContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2005;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 2007;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 2006; Match(WS);
							}
						}

						State = 2009; Match(LT);
						State = 2011;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 2010; Match(WS);
							}
						}

						State = 2013; valueStmt(19);
						}
						break;
					case 7:
						{
						_localctx = new VsNeqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2014;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 2016;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 2015; Match(WS);
							}
						}

						State = 2018; Match(NEQ);
						State = 2020;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 2019; Match(WS);
							}
						}

						State = 2022; valueStmt(18);
						}
						break;
					case 8:
						{
						_localctx = new VsEqContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2023;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 2025;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 2024; Match(WS);
							}
						}

						State = 2027; Match(EQ);
						State = 2029;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 2028; Match(WS);
							}
						}

						State = 2031; valueStmt(17);
						}
						break;
					case 9:
						{
						_localctx = new VsAmpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2032;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 2033; Match(WS);
						State = 2034; Match(AMPERSAND);
						State = 2035; Match(WS);
						State = 2036; valueStmt(16);
						}
						break;
					case 10:
						{
						_localctx = new VsAddContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2037;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 2039;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 2038; Match(WS);
							}
						}

						State = 2041; Match(PLUS);
						State = 2043;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 2042; Match(WS);
							}
						}

						State = 2045; valueStmt(13);
						}
						break;
					case 11:
						{
						_localctx = new VsModContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2046;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 2048;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 2047; Match(WS);
							}
						}

						State = 2050; Match(MOD);
						State = 2052;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 2051; Match(WS);
							}
						}

						State = 2054; valueStmt(12);
						}
						break;
					case 12:
						{
						_localctx = new VsDivContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2055;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 2057;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 2056; Match(WS);
							}
						}

						State = 2059; Match(DIV);
						State = 2061;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 2060; Match(WS);
							}
						}

						State = 2063; valueStmt(11);
						}
						break;
					case 13:
						{
						_localctx = new VsMultContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2064;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 2066;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 2065; Match(WS);
							}
						}

						State = 2068; Match(MULT);
						State = 2070;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 2069; Match(WS);
							}
						}

						State = 2072; valueStmt(10);
						}
						break;
					case 14:
						{
						_localctx = new VsMinusContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2073;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 2075;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 2074; Match(WS);
							}
						}

						State = 2077; Match(MINUS);
						State = 2079;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 2078; Match(WS);
							}
						}

						State = 2081; valueStmt(9);
						}
						break;
					case 15:
						{
						_localctx = new VsPowContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2082;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 2084;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 2083; Match(WS);
							}
						}

						State = 2086; Match(POW);
						State = 2088;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 2087; Match(WS);
							}
						}

						State = 2090; valueStmt(8);
						}
						break;
					case 16:
						{
						_localctx = new VsImpContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2091;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 2092; Match(WS);
						State = 2093; Match(IMP);
						State = 2094; Match(WS);
						State = 2095; valueStmt(7);
						}
						break;
					case 17:
						{
						_localctx = new VsEqvContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2096;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 2097; Match(WS);
						State = 2098; Match(EQV);
						State = 2099; Match(WS);
						State = 2100; valueStmt(6);
						}
						break;
					case 18:
						{
						_localctx = new VsXorContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2101;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 2103;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 2102; Match(WS);
							}
						}

						State = 2105; Match(XOR);
						State = 2107;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 2106; Match(WS);
							}
						}

						State = 2109; valueStmt(5);
						}
						break;
					case 19:
						{
						_localctx = new VsOrContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2110;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 2112;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 2111; Match(WS);
							}
						}

						State = 2114; Match(OR);
						State = 2116;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 2115; Match(WS);
							}
						}

						State = 2118; valueStmt(4);
						}
						break;
					case 20:
						{
						_localctx = new VsAndContext(new ValueStmtContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_valueStmt);
						State = 2119;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 2120; Match(WS);
						State = 2121; Match(AND);
						State = 2122; Match(WS);
						State = 2123; valueStmt(3);
						}
						break;
					}
					} 
				}
				State = 2128;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,333,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VariableStmtContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VariableListStmtContext variableListStmt() {
			return GetRuleContext<VariableListStmtContext>(0);
		}
		public ITerminalNode DIM() { return GetToken(VisualBasic6Parser.DIM, 0); }
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ITerminalNode WITHEVENTS() { return GetToken(VisualBasic6Parser.WITHEVENTS, 0); }
		public VariableStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVariableStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVariableStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableStmtContext variableStmt() {
		VariableStmtContext _localctx = new VariableStmtContext(Context, State);
		EnterRule(_localctx, 196, RULE_variableStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2132;
			switch (TokenStream.La(1)) {
			case DIM:
				{
				State = 2129; Match(DIM);
				}
				break;
			case STATIC:
				{
				State = 2130; Match(STATIC);
				}
				break;
			case FRIEND:
			case GLOBAL:
			case PRIVATE:
			case PUBLIC:
				{
				State = 2131; visibility();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2134; Match(WS);
			State = 2137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,335,Context) ) {
			case 1:
				{
				State = 2135; Match(WITHEVENTS);
				State = 2136; Match(WS);
				}
				break;
			}
			State = 2139; variableListStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableListStmtContext : ParserRuleContext {
		public VariableSubStmtContext[] variableSubStmt() {
			return GetRuleContexts<VariableSubStmtContext>();
		}
		public VariableSubStmtContext variableSubStmt(int i) {
			return GetRuleContext<VariableSubStmtContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public VariableListStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableListStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVariableListStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVariableListStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableListStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableListStmtContext variableListStmt() {
		VariableListStmtContext _localctx = new VariableListStmtContext(Context, State);
		EnterRule(_localctx, 198, RULE_variableListStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2141; variableSubStmt();
			State = 2152;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,338,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2143;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 2142; Match(WS);
						}
					}

					State = 2145; Match(COMMA);
					State = 2147;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 2146; Match(WS);
						}
					}

					State = 2149; variableSubStmt();
					}
					} 
				}
				State = 2154;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,338,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableSubStmtContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public SubscriptsContext subscripts() {
			return GetRuleContext<SubscriptsContext>(0);
		}
		public VariableSubStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableSubStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVariableSubStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVariableSubStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableSubStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableSubStmtContext variableSubStmt() {
		VariableSubStmtContext _localctx = new VariableSubStmtContext(Context, State);
		EnterRule(_localctx, 200, RULE_variableSubStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2155; ambiguousIdentifier();
			State = 2173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,344,Context) ) {
			case 1:
				{
				State = 2157;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 2156; Match(WS);
					}
				}

				State = 2159; Match(LPAREN);
				State = 2161;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 2160; Match(WS);
					}
				}

				State = 2167;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)) | (1L << (PUT - 64)) | (1L << (RANDOM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)) | (1L << (LPAREN - 128)) | (1L << (MINUS - 128)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (PLUS - 195)) | (1L << (L_SQUARE_BRACKET - 195)) | (1L << (STRINGLITERAL - 195)) | (1L << (DATELITERAL - 195)) | (1L << (COLORLITERAL - 195)) | (1L << (INTEGERLITERAL - 195)) | (1L << (DOUBLELITERAL - 195)) | (1L << (FILENUMBER - 195)) | (1L << (IDENTIFIER - 195)))) != 0)) {
					{
					State = 2163; subscripts();
					State = 2165;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 2164; Match(WS);
						}
					}

					}
				}

				State = 2169; Match(RPAREN);
				State = 2171;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,343,Context) ) {
				case 1:
					{
					State = 2170; Match(WS);
					}
					break;
				}
				}
				break;
			}
			State = 2176;
			_la = TokenStream.La(1);
			if (((((_la - 174)) & ~0x3f) == 0 && ((1L << (_la - 174)) & ((1L << (AMPERSAND - 174)) | (1L << (AT - 174)) | (1L << (DOLLAR - 174)) | (1L << (EXCLAMATIONMARK - 174)) | (1L << (HASH - 174)) | (1L << (PERCENT - 174)))) != 0)) {
				{
				State = 2175; typeHint();
				}
			}

			State = 2180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,346,Context) ) {
			case 1:
				{
				State = 2178; Match(WS);
				State = 2179; asTypeClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileWendStmtContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(VisualBasic6Parser.WHILE, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WEND() { return GetToken(VisualBasic6Parser.WEND, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public WhileWendStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileWendStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterWhileWendStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitWhileWendStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileWendStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileWendStmtContext whileWendStmt() {
		WhileWendStmtContext _localctx = new WhileWendStmtContext(Context, State);
		EnterRule(_localctx, 202, RULE_whileWendStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2182; Match(WHILE);
			State = 2183; Match(WS);
			State = 2184; valueStmt(0);
			State = 2186;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 2185; Match(NEWLINE);
				}
				}
				State = 2188;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==NEWLINE );
			State = 2195;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,348,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2190; block();
					State = 2191; Match(NEWLINE);
					}
					} 
				}
				State = 2197;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,348,Context);
			}
			State = 2198; Match(WEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WidthStmtContext : ParserRuleContext {
		public ITerminalNode WIDTH() { return GetToken(VisualBasic6Parser.WIDTH, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public WidthStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_widthStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterWidthStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitWidthStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWidthStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WidthStmtContext widthStmt() {
		WidthStmtContext _localctx = new WidthStmtContext(Context, State);
		EnterRule(_localctx, 204, RULE_widthStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2200; Match(WIDTH);
			State = 2201; Match(WS);
			State = 2202; valueStmt(0);
			State = 2204;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 2203; Match(WS);
				}
			}

			State = 2206; Match(COMMA);
			State = 2208;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 2207; Match(WS);
				}
			}

			State = 2210; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStmtContext : ParserRuleContext {
		public ITerminalNode WITH() { return GetToken(VisualBasic6Parser.WITH, 0); }
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public ITerminalNode END_WITH() { return GetToken(VisualBasic6Parser.END_WITH, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(VisualBasic6Parser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(VisualBasic6Parser.NEWLINE, i);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WithStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterWithStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitWithStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWithStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WithStmtContext withStmt() {
		WithStmtContext _localctx = new WithStmtContext(Context, State);
		EnterRule(_localctx, 206, RULE_withStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2212; Match(WITH);
			State = 2213; Match(WS);
			State = 2214; implicitCallStmt_InStmt();
			State = 2216;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 2215; Match(NEWLINE);
				}
				}
				State = 2218;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==NEWLINE );
			State = 2226;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT) | (1L << EXIT_DO) | (1L << EXIT_FOR) | (1L << EXIT_FUNCTION) | (1L << EXIT_PROPERTY) | (1L << EXIT_SUB))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LINE_INPUT - 64)) | (1L << (LSET - 64)) | (1L << (MACRO_IF - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (ON_ERROR - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)) | (1L << (PUT - 64)) | (1L << (RANDOM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)))) != 0) || _la==L_SQUARE_BRACKET || _la==IDENTIFIER) {
				{
				State = 2220; block();
				State = 2222;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					{
					State = 2221; Match(NEWLINE);
					}
					}
					State = 2224;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( _la==NEWLINE );
				}
			}

			State = 2228; Match(END_WITH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WriteStmtContext : ParserRuleContext {
		public ITerminalNode WRITE() { return GetToken(VisualBasic6Parser.WRITE, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(VisualBasic6Parser.COMMA, 0); }
		public OutputListContext outputList() {
			return GetRuleContext<OutputListContext>(0);
		}
		public WriteStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_writeStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterWriteStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitWriteStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WriteStmtContext writeStmt() {
		WriteStmtContext _localctx = new WriteStmtContext(Context, State);
		EnterRule(_localctx, 208, RULE_writeStmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2230; Match(WRITE);
			State = 2231; Match(WS);
			State = 2232; valueStmt(0);
			State = 2234;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 2233; Match(WS);
				}
			}

			State = 2236; Match(COMMA);
			State = 2241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,356,Context) ) {
			case 1:
				{
				State = 2238;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,355,Context) ) {
				case 1:
					{
					State = 2237; Match(WS);
					}
					break;
				}
				State = 2240; outputList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitCallStmtContext : ParserRuleContext {
		public ECS_ProcedureCallContext eCS_ProcedureCall() {
			return GetRuleContext<ECS_ProcedureCallContext>(0);
		}
		public ECS_MemberProcedureCallContext eCS_MemberProcedureCall() {
			return GetRuleContext<ECS_MemberProcedureCallContext>(0);
		}
		public ExplicitCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterExplicitCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitExplicitCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitCallStmtContext explicitCallStmt() {
		ExplicitCallStmtContext _localctx = new ExplicitCallStmtContext(Context, State);
		EnterRule(_localctx, 210, RULE_explicitCallStmt);
		try {
			State = 2245;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,357,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2243; eCS_ProcedureCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2244; eCS_MemberProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ECS_ProcedureCallContext : ParserRuleContext {
		public ITerminalNode CALL() { return GetToken(VisualBasic6Parser.CALL, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ECS_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eCS_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterECS_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitECS_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ECS_ProcedureCallContext eCS_ProcedureCall() {
		ECS_ProcedureCallContext _localctx = new ECS_ProcedureCallContext(Context, State);
		EnterRule(_localctx, 212, RULE_eCS_ProcedureCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2247; Match(CALL);
			State = 2248; Match(WS);
			State = 2249; ambiguousIdentifier();
			State = 2251;
			_la = TokenStream.La(1);
			if (((((_la - 174)) & ~0x3f) == 0 && ((1L << (_la - 174)) & ((1L << (AMPERSAND - 174)) | (1L << (AT - 174)) | (1L << (DOLLAR - 174)) | (1L << (EXCLAMATIONMARK - 174)) | (1L << (HASH - 174)) | (1L << (PERCENT - 174)))) != 0)) {
				{
				State = 2250; typeHint();
				}
			}

			State = 2266;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,362,Context) ) {
			case 1:
				{
				State = 2254;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 2253; Match(WS);
					}
				}

				State = 2256; Match(LPAREN);
				State = 2258;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,360,Context) ) {
				case 1:
					{
					State = 2257; Match(WS);
					}
					break;
				}
				State = 2260; argsCall();
				State = 2262;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 2261; Match(WS);
					}
				}

				State = 2264; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ECS_MemberProcedureCallContext : ParserRuleContext {
		public ITerminalNode CALL() { return GetToken(VisualBasic6Parser.CALL, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode DOT() { return GetToken(VisualBasic6Parser.DOT, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ECS_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eCS_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterECS_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitECS_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitECS_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ECS_MemberProcedureCallContext eCS_MemberProcedureCall() {
		ECS_MemberProcedureCallContext _localctx = new ECS_MemberProcedureCallContext(Context, State);
		EnterRule(_localctx, 214, RULE_eCS_MemberProcedureCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2268; Match(CALL);
			State = 2269; Match(WS);
			State = 2271;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,363,Context) ) {
			case 1:
				{
				State = 2270; implicitCallStmt_InStmt();
				}
				break;
			}
			State = 2273; Match(DOT);
			State = 2274; ambiguousIdentifier();
			State = 2276;
			_la = TokenStream.La(1);
			if (((((_la - 174)) & ~0x3f) == 0 && ((1L << (_la - 174)) & ((1L << (AMPERSAND - 174)) | (1L << (AT - 174)) | (1L << (DOLLAR - 174)) | (1L << (EXCLAMATIONMARK - 174)) | (1L << (HASH - 174)) | (1L << (PERCENT - 174)))) != 0)) {
				{
				State = 2275; typeHint();
				}
			}

			State = 2291;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,368,Context) ) {
			case 1:
				{
				State = 2279;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 2278; Match(WS);
					}
				}

				State = 2281; Match(LPAREN);
				State = 2283;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,366,Context) ) {
				case 1:
					{
					State = 2282; Match(WS);
					}
					break;
				}
				State = 2285; argsCall();
				State = 2287;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 2286; Match(WS);
					}
				}

				State = 2289; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InBlockContext : ParserRuleContext {
		public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
			return GetRuleContext<ICS_B_ProcedureCallContext>(0);
		}
		public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
			return GetRuleContext<ICS_B_MemberProcedureCallContext>(0);
		}
		public ImplicitCallStmt_InBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InBlockContext implicitCallStmt_InBlock() {
		ImplicitCallStmt_InBlockContext _localctx = new ImplicitCallStmt_InBlockContext(Context, State);
		EnterRule(_localctx, 216, RULE_implicitCallStmt_InBlock);
		try {
			State = 2295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,369,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2293; iCS_B_ProcedureCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2294; iCS_B_MemberProcedureCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_ProcedureCallContext : ParserRuleContext {
		public CertainIdentifierContext certainIdentifier() {
			return GetRuleContext<CertainIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public ICS_B_ProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_ProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_B_ProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_B_ProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_ProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_ProcedureCallContext iCS_B_ProcedureCall() {
		ICS_B_ProcedureCallContext _localctx = new ICS_B_ProcedureCallContext(Context, State);
		EnterRule(_localctx, 218, RULE_iCS_B_ProcedureCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2297; certainIdentifier();
			State = 2300;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,370,Context) ) {
			case 1:
				{
				State = 2298; Match(WS);
				State = 2299; argsCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_B_MemberProcedureCallContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(VisualBasic6Parser.DOT, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
			return GetRuleContext<ImplicitCallStmt_InStmtContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_B_MemberProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_B_MemberProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_B_MemberProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_B_MemberProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_B_MemberProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_B_MemberProcedureCallContext iCS_B_MemberProcedureCall() {
		ICS_B_MemberProcedureCallContext _localctx = new ICS_B_MemberProcedureCallContext(Context, State);
		EnterRule(_localctx, 220, RULE_iCS_B_MemberProcedureCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2303;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,371,Context) ) {
			case 1:
				{
				State = 2302; implicitCallStmt_InStmt();
				}
				break;
			}
			State = 2305; Match(DOT);
			State = 2306; ambiguousIdentifier();
			State = 2308;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,372,Context) ) {
			case 1:
				{
				State = 2307; typeHint();
				}
				break;
			}
			State = 2312;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,373,Context) ) {
			case 1:
				{
				State = 2310; Match(WS);
				State = 2311; argsCall();
				}
				break;
			}
			State = 2315;
			_la = TokenStream.La(1);
			if (_la==EXCLAMATIONMARK) {
				{
				State = 2314; dictionaryCallStmt();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitCallStmt_InStmtContext : ParserRuleContext {
		public ICS_S_MembersCallContext iCS_S_MembersCall() {
			return GetRuleContext<ICS_S_MembersCallContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
			return GetRuleContext<ICS_S_DictionaryCallContext>(0);
		}
		public ImplicitCallStmt_InStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitCallStmt_InStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterImplicitCallStmt_InStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitImplicitCallStmt_InStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicitCallStmt_InStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitCallStmt_InStmtContext implicitCallStmt_InStmt() {
		ImplicitCallStmt_InStmtContext _localctx = new ImplicitCallStmt_InStmtContext(Context, State);
		EnterRule(_localctx, 222, RULE_implicitCallStmt_InStmt);
		try {
			State = 2321;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,375,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2317; iCS_S_MembersCall();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2318; iCS_S_VariableOrProcedureCall();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2319; iCS_S_ProcedureOrArrayCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2320; iCS_S_DictionaryCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_VariableOrProcedureCallContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_VariableOrProcedureCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_VariableOrProcedureCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_S_VariableOrProcedureCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_S_VariableOrProcedureCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_VariableOrProcedureCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
		ICS_S_VariableOrProcedureCallContext _localctx = new ICS_S_VariableOrProcedureCallContext(Context, State);
		EnterRule(_localctx, 224, RULE_iCS_S_VariableOrProcedureCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2323; ambiguousIdentifier();
			State = 2325;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,376,Context) ) {
			case 1:
				{
				State = 2324; typeHint();
				}
				break;
			}
			State = 2328;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,377,Context) ) {
			case 1:
				{
				State = 2327; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_ProcedureOrArrayCallContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ArgsCallContext argsCall() {
			return GetRuleContext<ArgsCallContext>(0);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_ProcedureOrArrayCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_S_ProcedureOrArrayCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_S_ProcedureOrArrayCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_ProcedureOrArrayCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
		ICS_S_ProcedureOrArrayCallContext _localctx = new ICS_S_ProcedureOrArrayCallContext(Context, State);
		EnterRule(_localctx, 226, RULE_iCS_S_ProcedureOrArrayCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2332;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,378,Context) ) {
			case 1:
				{
				State = 2330; ambiguousIdentifier();
				}
				break;
			case 2:
				{
				State = 2331; baseType();
				}
				break;
			}
			State = 2335;
			_la = TokenStream.La(1);
			if (((((_la - 174)) & ~0x3f) == 0 && ((1L << (_la - 174)) & ((1L << (AMPERSAND - 174)) | (1L << (AT - 174)) | (1L << (DOLLAR - 174)) | (1L << (EXCLAMATIONMARK - 174)) | (1L << (HASH - 174)) | (1L << (PERCENT - 174)))) != 0)) {
				{
				State = 2334; typeHint();
				}
			}

			State = 2338;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 2337; Match(WS);
				}
			}

			State = 2340; Match(LPAREN);
			State = 2342;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,381,Context) ) {
			case 1:
				{
				State = 2341; Match(WS);
				}
				break;
			}
			State = 2348;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)) | (1L << (PUT - 64)) | (1L << (RANDOM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (COMMA - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)) | (1L << (LPAREN - 128)) | (1L << (MINUS - 128)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (PLUS - 195)) | (1L << (SEMICOLON - 195)) | (1L << (L_SQUARE_BRACKET - 195)) | (1L << (STRINGLITERAL - 195)) | (1L << (DATELITERAL - 195)) | (1L << (COLORLITERAL - 195)) | (1L << (INTEGERLITERAL - 195)) | (1L << (DOUBLELITERAL - 195)) | (1L << (FILENUMBER - 195)) | (1L << (IDENTIFIER - 195)) | (1L << (WS - 195)))) != 0)) {
				{
				State = 2344; argsCall();
				State = 2346;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 2345; Match(WS);
					}
				}

				}
			}

			State = 2350; Match(RPAREN);
			State = 2352;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,384,Context) ) {
			case 1:
				{
				State = 2351; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MembersCallContext : ParserRuleContext {
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_MemberCallContext[] iCS_S_MemberCall() {
			return GetRuleContexts<ICS_S_MemberCallContext>();
		}
		public ICS_S_MemberCallContext iCS_S_MemberCall(int i) {
			return GetRuleContext<ICS_S_MemberCallContext>(i);
		}
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_MembersCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MembersCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_S_MembersCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_S_MembersCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MembersCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MembersCallContext iCS_S_MembersCall() {
		ICS_S_MembersCallContext _localctx = new ICS_S_MembersCallContext(Context, State);
		EnterRule(_localctx, 228, RULE_iCS_S_MembersCall);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2356;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,385,Context) ) {
			case 1:
				{
				State = 2354; iCS_S_VariableOrProcedureCall();
				}
				break;
			case 2:
				{
				State = 2355; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			State = 2359;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2358; iCS_S_MemberCall();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2361;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,386,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 2364;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,387,Context) ) {
			case 1:
				{
				State = 2363; dictionaryCallStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_MemberCallContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(VisualBasic6Parser.DOT, 0); }
		public ICS_S_VariableOrProcedureCallContext iCS_S_VariableOrProcedureCall() {
			return GetRuleContext<ICS_S_VariableOrProcedureCallContext>(0);
		}
		public ICS_S_ProcedureOrArrayCallContext iCS_S_ProcedureOrArrayCall() {
			return GetRuleContext<ICS_S_ProcedureOrArrayCallContext>(0);
		}
		public ICS_S_MemberCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_MemberCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_S_MemberCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_S_MemberCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_MemberCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_MemberCallContext iCS_S_MemberCall() {
		ICS_S_MemberCallContext _localctx = new ICS_S_MemberCallContext(Context, State);
		EnterRule(_localctx, 230, RULE_iCS_S_MemberCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2366; Match(DOT);
			State = 2369;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,388,Context) ) {
			case 1:
				{
				State = 2367; iCS_S_VariableOrProcedureCall();
				}
				break;
			case 2:
				{
				State = 2368; iCS_S_ProcedureOrArrayCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ICS_S_DictionaryCallContext : ParserRuleContext {
		public DictionaryCallStmtContext dictionaryCallStmt() {
			return GetRuleContext<DictionaryCallStmtContext>(0);
		}
		public ICS_S_DictionaryCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iCS_S_DictionaryCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterICS_S_DictionaryCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitICS_S_DictionaryCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitICS_S_DictionaryCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ICS_S_DictionaryCallContext iCS_S_DictionaryCall() {
		ICS_S_DictionaryCallContext _localctx = new ICS_S_DictionaryCallContext(Context, State);
		EnterRule(_localctx, 232, RULE_iCS_S_DictionaryCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2371; dictionaryCallStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgsCallContext : ParserRuleContext {
		public ArgCallContext[] argCall() {
			return GetRuleContexts<ArgCallContext>();
		}
		public ArgCallContext argCall(int i) {
			return GetRuleContext<ArgCallContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(VisualBasic6Parser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(VisualBasic6Parser.SEMICOLON, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ArgsCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argsCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterArgsCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitArgsCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgsCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgsCallContext argsCall() {
		ArgsCallContext _localctx = new ArgsCallContext(Context, State);
		EnterRule(_localctx, 234, RULE_argsCall);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2385;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,392,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2374;
					_la = TokenStream.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)) | (1L << (PUT - 64)) | (1L << (RANDOM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)) | (1L << (DOT - 128)) | (1L << (EXCLAMATIONMARK - 128)) | (1L << (LPAREN - 128)) | (1L << (MINUS - 128)))) != 0) || ((((_la - 195)) & ~0x3f) == 0 && ((1L << (_la - 195)) & ((1L << (PLUS - 195)) | (1L << (L_SQUARE_BRACKET - 195)) | (1L << (STRINGLITERAL - 195)) | (1L << (DATELITERAL - 195)) | (1L << (COLORLITERAL - 195)) | (1L << (INTEGERLITERAL - 195)) | (1L << (DOUBLELITERAL - 195)) | (1L << (FILENUMBER - 195)) | (1L << (IDENTIFIER - 195)))) != 0)) {
						{
						State = 2373; argCall();
						}
					}

					State = 2377;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 2376; Match(WS);
						}
					}

					State = 2379;
					_la = TokenStream.La(1);
					if ( !(_la==COMMA || _la==SEMICOLON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					State = 2381;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,391,Context) ) {
					case 1:
						{
						State = 2380; Match(WS);
						}
						break;
					}
					}
					} 
				}
				State = 2387;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,392,Context);
			}
			State = 2388; argCall();
			State = 2401;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,396,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2390;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 2389; Match(WS);
						}
					}

					State = 2392;
					_la = TokenStream.La(1);
					if ( !(_la==COMMA || _la==SEMICOLON) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					State = 2394;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,394,Context) ) {
					case 1:
						{
						State = 2393; Match(WS);
						}
						break;
					}
					State = 2397;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,395,Context) ) {
					case 1:
						{
						State = 2396; argCall();
						}
						break;
					}
					}
					} 
				}
				State = 2403;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,396,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgCallContext : ParserRuleContext {
		public ValueStmtContext valueStmt() {
			return GetRuleContext<ValueStmtContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ITerminalNode BYVAL() { return GetToken(VisualBasic6Parser.BYVAL, 0); }
		public ITerminalNode BYREF() { return GetToken(VisualBasic6Parser.BYREF, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VisualBasic6Parser.PARAMARRAY, 0); }
		public ArgCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterArgCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitArgCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgCallContext argCall() {
		ArgCallContext _localctx = new ArgCallContext(Context, State);
		EnterRule(_localctx, 236, RULE_argCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2406;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,397,Context) ) {
			case 1:
				{
				State = 2404;
				_la = TokenStream.La(1);
				if ( !(_la==BYVAL || _la==BYREF || _la==PARAMARRAY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 2405; Match(WS);
				}
				break;
			}
			State = 2408; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DictionaryCallStmtContext : ParserRuleContext {
		public ITerminalNode EXCLAMATIONMARK() { return GetToken(VisualBasic6Parser.EXCLAMATIONMARK, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public TypeHintContext typeHint() {
			return GetRuleContext<TypeHintContext>(0);
		}
		public DictionaryCallStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dictionaryCallStmt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterDictionaryCallStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitDictionaryCallStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDictionaryCallStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DictionaryCallStmtContext dictionaryCallStmt() {
		DictionaryCallStmtContext _localctx = new DictionaryCallStmtContext(Context, State);
		EnterRule(_localctx, 238, RULE_dictionaryCallStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2410; Match(EXCLAMATIONMARK);
			State = 2411; ambiguousIdentifier();
			State = 2413;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,398,Context) ) {
			case 1:
				{
				State = 2412; typeHint();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgListContext : ParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ArgContext[] arg() {
			return GetRuleContexts<ArgContext>();
		}
		public ArgContext arg(int i) {
			return GetRuleContext<ArgContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ArgListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterArgList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitArgList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgListContext argList() {
		ArgListContext _localctx = new ArgListContext(Context, State);
		EnterRule(_localctx, 240, RULE_argList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2415; Match(LPAREN);
			State = 2433;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,403,Context) ) {
			case 1:
				{
				State = 2417;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 2416; Match(WS);
					}
				}

				State = 2419; arg();
				State = 2430;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,402,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 2421;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 2420; Match(WS);
							}
						}

						State = 2423; Match(COMMA);
						State = 2425;
						_la = TokenStream.La(1);
						if (_la==WS) {
							{
							State = 2424; Match(WS);
							}
						}

						State = 2427; arg();
						}
						} 
					}
					State = 2432;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,402,Context);
				}
				}
				break;
			}
			State = 2436;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 2435; Match(WS);
				}
			}

			State = 2438; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode OPTIONAL() { return GetToken(VisualBasic6Parser.OPTIONAL, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode PARAMARRAY() { return GetToken(VisualBasic6Parser.PARAMARRAY, 0); }
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public AsTypeClauseContext asTypeClause() {
			return GetRuleContext<AsTypeClauseContext>(0);
		}
		public ArgDefaultValueContext argDefaultValue() {
			return GetRuleContext<ArgDefaultValueContext>(0);
		}
		public ITerminalNode BYVAL() { return GetToken(VisualBasic6Parser.BYVAL, 0); }
		public ITerminalNode BYREF() { return GetToken(VisualBasic6Parser.BYREF, 0); }
		public ArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitArg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgContext arg() {
		ArgContext _localctx = new ArgContext(Context, State);
		EnterRule(_localctx, 242, RULE_arg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2442;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,405,Context) ) {
			case 1:
				{
				State = 2440; Match(OPTIONAL);
				State = 2441; Match(WS);
				}
				break;
			}
			State = 2446;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,406,Context) ) {
			case 1:
				{
				State = 2444;
				_la = TokenStream.La(1);
				if ( !(_la==BYVAL || _la==BYREF) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 2445; Match(WS);
				}
				break;
			}
			State = 2450;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,407,Context) ) {
			case 1:
				{
				State = 2448; Match(PARAMARRAY);
				State = 2449; Match(WS);
				}
				break;
			}
			State = 2452; ambiguousIdentifier();
			State = 2461;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,410,Context) ) {
			case 1:
				{
				State = 2454;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 2453; Match(WS);
					}
				}

				State = 2456; Match(LPAREN);
				State = 2458;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 2457; Match(WS);
					}
				}

				State = 2460; Match(RPAREN);
				}
				break;
			}
			State = 2465;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,411,Context) ) {
			case 1:
				{
				State = 2463; Match(WS);
				State = 2464; asTypeClause();
				}
				break;
			}
			State = 2471;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,413,Context) ) {
			case 1:
				{
				State = 2468;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 2467; Match(WS);
					}
				}

				State = 2470; argDefaultValue();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDefaultValueContext : ParserRuleContext {
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public ArgDefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDefaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterArgDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitArgDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgDefaultValueContext argDefaultValue() {
		ArgDefaultValueContext _localctx = new ArgDefaultValueContext(Context, State);
		EnterRule(_localctx, 244, RULE_argDefaultValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2473; Match(EQ);
			State = 2475;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 2474; Match(WS);
				}
			}

			State = 2479;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,415,Context) ) {
			case 1:
				{
				State = 2477; literal();
				}
				break;
			case 2:
				{
				State = 2478; ambiguousIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptsContext : ParserRuleContext {
		public SubscriptContext[] subscript() {
			return GetRuleContexts<SubscriptContext>();
		}
		public SubscriptContext subscript(int i) {
			return GetRuleContext<SubscriptContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(VisualBasic6Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(VisualBasic6Parser.COMMA, i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public SubscriptsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscripts; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSubscripts(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSubscripts(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscripts(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptsContext subscripts() {
		SubscriptsContext _localctx = new SubscriptsContext(Context, State);
		EnterRule(_localctx, 246, RULE_subscripts);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2481; subscript();
			State = 2492;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,418,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2483;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 2482; Match(WS);
						}
					}

					State = 2485; Match(COMMA);
					State = 2487;
					_la = TokenStream.La(1);
					if (_la==WS) {
						{
						State = 2486; Match(WS);
						}
					}

					State = 2489; subscript();
					}
					} 
				}
				State = 2494;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,418,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptContext : ParserRuleContext {
		public ValueStmtContext[] valueStmt() {
			return GetRuleContexts<ValueStmtContext>();
		}
		public ValueStmtContext valueStmt(int i) {
			return GetRuleContext<ValueStmtContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public ITerminalNode TO() { return GetToken(VisualBasic6Parser.TO, 0); }
		public SubscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterSubscript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitSubscript(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptContext subscript() {
		SubscriptContext _localctx = new SubscriptContext(Context, State);
		EnterRule(_localctx, 248, RULE_subscript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2500;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,419,Context) ) {
			case 1:
				{
				State = 2495; valueStmt(0);
				State = 2496; Match(WS);
				State = 2497; Match(TO);
				State = 2498; Match(WS);
				}
				break;
			}
			State = 2502; valueStmt(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousIdentifierContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(VisualBasic6Parser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(VisualBasic6Parser.IDENTIFIER, i);
		}
		public AmbiguousKeywordContext[] ambiguousKeyword() {
			return GetRuleContexts<AmbiguousKeywordContext>();
		}
		public AmbiguousKeywordContext ambiguousKeyword(int i) {
			return GetRuleContext<AmbiguousKeywordContext>(i);
		}
		public ITerminalNode L_SQUARE_BRACKET() { return GetToken(VisualBasic6Parser.L_SQUARE_BRACKET, 0); }
		public ITerminalNode R_SQUARE_BRACKET() { return GetToken(VisualBasic6Parser.R_SQUARE_BRACKET, 0); }
		public AmbiguousIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterAmbiguousIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitAmbiguousIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousIdentifierContext ambiguousIdentifier() {
		AmbiguousIdentifierContext _localctx = new AmbiguousIdentifierContext(Context, State);
		EnterRule(_localctx, 250, RULE_ambiguousIdentifier);
		int _la;
		try {
			int _alt;
			State = 2518;
			switch (TokenStream.La(1)) {
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2506;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						State = 2506;
						switch (TokenStream.La(1)) {
						case IDENTIFIER:
							{
							State = 2504; Match(IDENTIFIER);
							}
							break;
						case ACCESS:
						case ADDRESSOF:
						case ALIAS:
						case AND:
						case ATTRIBUTE:
						case APPACTIVATE:
						case APPEND:
						case AS:
						case BEGIN:
						case BEEP:
						case BINARY:
						case BOOLEAN:
						case BYVAL:
						case BYREF:
						case BYTE:
						case CALL:
						case CASE:
						case CHDIR:
						case CHDRIVE:
						case CLASS:
						case CLOSE:
						case COLLECTION:
						case CONST:
						case DATE:
						case DECLARE:
						case DEFBOOL:
						case DEFBYTE:
						case DEFDATE:
						case DEFDBL:
						case DEFDEC:
						case DEFCUR:
						case DEFINT:
						case DEFLNG:
						case DEFOBJ:
						case DEFSNG:
						case DEFSTR:
						case DEFVAR:
						case DELETESETTING:
						case DIM:
						case DO:
						case DOUBLE:
						case EACH:
						case ELSE:
						case ELSEIF:
						case END:
						case ENUM:
						case EQV:
						case ERASE:
						case ERROR:
						case EVENT:
						case FALSE:
						case FILECOPY:
						case FRIEND:
						case FOR:
						case FUNCTION:
						case GET:
						case GLOBAL:
						case GOSUB:
						case GOTO:
						case IF:
						case IMP:
						case IMPLEMENTS:
						case IN:
						case INPUT:
						case IS:
						case INTEGER:
						case KILL:
						case LOAD:
						case LOCK:
						case LONG:
						case LOOP:
						case LEN:
						case LET:
						case LIB:
						case LIKE:
						case LSET:
						case ME:
						case MID:
						case MKDIR:
						case MOD:
						case NAME:
						case NEXT:
						case NEW:
						case NOT:
						case NOTHING:
						case NULL:
						case ON:
						case OPEN:
						case OPTIONAL:
						case OR:
						case OUTPUT:
						case PARAMARRAY:
						case PRESERVE:
						case PRINT:
						case PRIVATE:
						case PUBLIC:
						case PUT:
						case RANDOM:
						case RANDOMIZE:
						case RAISEEVENT:
						case READ:
						case REDIM:
						case REM:
						case RESET:
						case RESUME:
						case RETURN:
						case RMDIR:
						case RSET:
						case SAVEPICTURE:
						case SAVESETTING:
						case SEEK:
						case SELECT:
						case SENDKEYS:
						case SET:
						case SETATTR:
						case SHARED:
						case SINGLE:
						case SPC:
						case STATIC:
						case STEP:
						case STOP:
						case STRING:
						case SUB:
						case TAB:
						case TEXT:
						case THEN:
						case TIME:
						case TO:
						case TRUE:
						case TYPE:
						case TYPEOF:
						case UNLOAD:
						case UNLOCK:
						case UNTIL:
						case VARIANT:
						case VERSION:
						case WEND:
						case WHILE:
						case WIDTH:
						case WITH:
						case WITHEVENTS:
						case WRITE:
						case XOR:
							{
							State = 2505; ambiguousKeyword();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 2508;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,421,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;
			case L_SQUARE_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2510; Match(L_SQUARE_BRACKET);
				State = 2513;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					State = 2513;
					switch (TokenStream.La(1)) {
					case IDENTIFIER:
						{
						State = 2511; Match(IDENTIFIER);
						}
						break;
					case ACCESS:
					case ADDRESSOF:
					case ALIAS:
					case AND:
					case ATTRIBUTE:
					case APPACTIVATE:
					case APPEND:
					case AS:
					case BEGIN:
					case BEEP:
					case BINARY:
					case BOOLEAN:
					case BYVAL:
					case BYREF:
					case BYTE:
					case CALL:
					case CASE:
					case CHDIR:
					case CHDRIVE:
					case CLASS:
					case CLOSE:
					case COLLECTION:
					case CONST:
					case DATE:
					case DECLARE:
					case DEFBOOL:
					case DEFBYTE:
					case DEFDATE:
					case DEFDBL:
					case DEFDEC:
					case DEFCUR:
					case DEFINT:
					case DEFLNG:
					case DEFOBJ:
					case DEFSNG:
					case DEFSTR:
					case DEFVAR:
					case DELETESETTING:
					case DIM:
					case DO:
					case DOUBLE:
					case EACH:
					case ELSE:
					case ELSEIF:
					case END:
					case ENUM:
					case EQV:
					case ERASE:
					case ERROR:
					case EVENT:
					case FALSE:
					case FILECOPY:
					case FRIEND:
					case FOR:
					case FUNCTION:
					case GET:
					case GLOBAL:
					case GOSUB:
					case GOTO:
					case IF:
					case IMP:
					case IMPLEMENTS:
					case IN:
					case INPUT:
					case IS:
					case INTEGER:
					case KILL:
					case LOAD:
					case LOCK:
					case LONG:
					case LOOP:
					case LEN:
					case LET:
					case LIB:
					case LIKE:
					case LSET:
					case ME:
					case MID:
					case MKDIR:
					case MOD:
					case NAME:
					case NEXT:
					case NEW:
					case NOT:
					case NOTHING:
					case NULL:
					case ON:
					case OPEN:
					case OPTIONAL:
					case OR:
					case OUTPUT:
					case PARAMARRAY:
					case PRESERVE:
					case PRINT:
					case PRIVATE:
					case PUBLIC:
					case PUT:
					case RANDOM:
					case RANDOMIZE:
					case RAISEEVENT:
					case READ:
					case REDIM:
					case REM:
					case RESET:
					case RESUME:
					case RETURN:
					case RMDIR:
					case RSET:
					case SAVEPICTURE:
					case SAVESETTING:
					case SEEK:
					case SELECT:
					case SENDKEYS:
					case SET:
					case SETATTR:
					case SHARED:
					case SINGLE:
					case SPC:
					case STATIC:
					case STEP:
					case STOP:
					case STRING:
					case SUB:
					case TAB:
					case TEXT:
					case THEN:
					case TIME:
					case TO:
					case TRUE:
					case TYPE:
					case TYPEOF:
					case UNLOAD:
					case UNLOCK:
					case UNTIL:
					case VARIANT:
					case VERSION:
					case WEND:
					case WHILE:
					case WIDTH:
					case WITH:
					case WITHEVENTS:
					case WRITE:
					case XOR:
						{
						State = 2512; ambiguousKeyword();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2515;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)) | (1L << (PUT - 64)) | (1L << (RANDOM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==IDENTIFIER );
				State = 2517; Match(R_SQUARE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsTypeClauseContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(VisualBasic6Parser.AS, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(VisualBasic6Parser.NEW, 0); }
		public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		public AsTypeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asTypeClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterAsTypeClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitAsTypeClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAsTypeClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AsTypeClauseContext asTypeClause() {
		AsTypeClauseContext _localctx = new AsTypeClauseContext(Context, State);
		EnterRule(_localctx, 252, RULE_asTypeClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2520; Match(AS);
			State = 2521; Match(WS);
			State = 2524;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,425,Context) ) {
			case 1:
				{
				State = 2522; Match(NEW);
				State = 2523; Match(WS);
				}
				break;
			}
			State = 2526; type();
			State = 2529;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,426,Context) ) {
			case 1:
				{
				State = 2527; Match(WS);
				State = 2528; fieldLength();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public ITerminalNode BOOLEAN() { return GetToken(VisualBasic6Parser.BOOLEAN, 0); }
		public ITerminalNode BYTE() { return GetToken(VisualBasic6Parser.BYTE, 0); }
		public ITerminalNode COLLECTION() { return GetToken(VisualBasic6Parser.COLLECTION, 0); }
		public ITerminalNode DATE() { return GetToken(VisualBasic6Parser.DATE, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VisualBasic6Parser.DOUBLE, 0); }
		public ITerminalNode INTEGER() { return GetToken(VisualBasic6Parser.INTEGER, 0); }
		public ITerminalNode LONG() { return GetToken(VisualBasic6Parser.LONG, 0); }
		public ITerminalNode SINGLE() { return GetToken(VisualBasic6Parser.SINGLE, 0); }
		public ITerminalNode STRING() { return GetToken(VisualBasic6Parser.STRING, 0); }
		public ITerminalNode VARIANT() { return GetToken(VisualBasic6Parser.VARIANT, 0); }
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBaseType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext baseType() {
		BaseTypeContext _localctx = new BaseTypeContext(Context, State);
		EnterRule(_localctx, 254, RULE_baseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2531;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << COLLECTION) | (1L << DATE) | (1L << DOUBLE))) != 0) || _la==INTEGER || _la==LONG || ((((_la - 147)) & ~0x3f) == 0 && ((1L << (_la - 147)) & ((1L << (SINGLE - 147)) | (1L << (STRING - 147)) | (1L << (VARIANT - 147)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CertainIdentifierContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(VisualBasic6Parser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(VisualBasic6Parser.IDENTIFIER, i);
		}
		public AmbiguousKeywordContext[] ambiguousKeyword() {
			return GetRuleContexts<AmbiguousKeywordContext>();
		}
		public AmbiguousKeywordContext ambiguousKeyword(int i) {
			return GetRuleContext<AmbiguousKeywordContext>(i);
		}
		public CertainIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_certainIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterCertainIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitCertainIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCertainIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CertainIdentifierContext certainIdentifier() {
		CertainIdentifierContext _localctx = new CertainIdentifierContext(Context, State);
		EnterRule(_localctx, 256, RULE_certainIdentifier);
		int _la;
		try {
			State = 2548;
			switch (TokenStream.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2533; Match(IDENTIFIER);
				State = 2538;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)) | (1L << (PUT - 64)) | (1L << (RANDOM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==IDENTIFIER) {
					{
					State = 2536;
					switch (TokenStream.La(1)) {
					case ACCESS:
					case ADDRESSOF:
					case ALIAS:
					case AND:
					case ATTRIBUTE:
					case APPACTIVATE:
					case APPEND:
					case AS:
					case BEGIN:
					case BEEP:
					case BINARY:
					case BOOLEAN:
					case BYVAL:
					case BYREF:
					case BYTE:
					case CALL:
					case CASE:
					case CHDIR:
					case CHDRIVE:
					case CLASS:
					case CLOSE:
					case COLLECTION:
					case CONST:
					case DATE:
					case DECLARE:
					case DEFBOOL:
					case DEFBYTE:
					case DEFDATE:
					case DEFDBL:
					case DEFDEC:
					case DEFCUR:
					case DEFINT:
					case DEFLNG:
					case DEFOBJ:
					case DEFSNG:
					case DEFSTR:
					case DEFVAR:
					case DELETESETTING:
					case DIM:
					case DO:
					case DOUBLE:
					case EACH:
					case ELSE:
					case ELSEIF:
					case END:
					case ENUM:
					case EQV:
					case ERASE:
					case ERROR:
					case EVENT:
					case FALSE:
					case FILECOPY:
					case FRIEND:
					case FOR:
					case FUNCTION:
					case GET:
					case GLOBAL:
					case GOSUB:
					case GOTO:
					case IF:
					case IMP:
					case IMPLEMENTS:
					case IN:
					case INPUT:
					case IS:
					case INTEGER:
					case KILL:
					case LOAD:
					case LOCK:
					case LONG:
					case LOOP:
					case LEN:
					case LET:
					case LIB:
					case LIKE:
					case LSET:
					case ME:
					case MID:
					case MKDIR:
					case MOD:
					case NAME:
					case NEXT:
					case NEW:
					case NOT:
					case NOTHING:
					case NULL:
					case ON:
					case OPEN:
					case OPTIONAL:
					case OR:
					case OUTPUT:
					case PARAMARRAY:
					case PRESERVE:
					case PRINT:
					case PRIVATE:
					case PUBLIC:
					case PUT:
					case RANDOM:
					case RANDOMIZE:
					case RAISEEVENT:
					case READ:
					case REDIM:
					case REM:
					case RESET:
					case RESUME:
					case RETURN:
					case RMDIR:
					case RSET:
					case SAVEPICTURE:
					case SAVESETTING:
					case SEEK:
					case SELECT:
					case SENDKEYS:
					case SET:
					case SETATTR:
					case SHARED:
					case SINGLE:
					case SPC:
					case STATIC:
					case STEP:
					case STOP:
					case STRING:
					case SUB:
					case TAB:
					case TEXT:
					case THEN:
					case TIME:
					case TO:
					case TRUE:
					case TYPE:
					case TYPEOF:
					case UNLOAD:
					case UNLOCK:
					case UNTIL:
					case VARIANT:
					case VERSION:
					case WEND:
					case WHILE:
					case WIDTH:
					case WITH:
					case WITHEVENTS:
					case WRITE:
					case XOR:
						{
						State = 2534; ambiguousKeyword();
						}
						break;
					case IDENTIFIER:
						{
						State = 2535; Match(IDENTIFIER);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2540;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2541; ambiguousKeyword();
				State = 2544;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				do {
					{
					State = 2544;
					switch (TokenStream.La(1)) {
					case ACCESS:
					case ADDRESSOF:
					case ALIAS:
					case AND:
					case ATTRIBUTE:
					case APPACTIVATE:
					case APPEND:
					case AS:
					case BEGIN:
					case BEEP:
					case BINARY:
					case BOOLEAN:
					case BYVAL:
					case BYREF:
					case BYTE:
					case CALL:
					case CASE:
					case CHDIR:
					case CHDRIVE:
					case CLASS:
					case CLOSE:
					case COLLECTION:
					case CONST:
					case DATE:
					case DECLARE:
					case DEFBOOL:
					case DEFBYTE:
					case DEFDATE:
					case DEFDBL:
					case DEFDEC:
					case DEFCUR:
					case DEFINT:
					case DEFLNG:
					case DEFOBJ:
					case DEFSNG:
					case DEFSTR:
					case DEFVAR:
					case DELETESETTING:
					case DIM:
					case DO:
					case DOUBLE:
					case EACH:
					case ELSE:
					case ELSEIF:
					case END:
					case ENUM:
					case EQV:
					case ERASE:
					case ERROR:
					case EVENT:
					case FALSE:
					case FILECOPY:
					case FRIEND:
					case FOR:
					case FUNCTION:
					case GET:
					case GLOBAL:
					case GOSUB:
					case GOTO:
					case IF:
					case IMP:
					case IMPLEMENTS:
					case IN:
					case INPUT:
					case IS:
					case INTEGER:
					case KILL:
					case LOAD:
					case LOCK:
					case LONG:
					case LOOP:
					case LEN:
					case LET:
					case LIB:
					case LIKE:
					case LSET:
					case ME:
					case MID:
					case MKDIR:
					case MOD:
					case NAME:
					case NEXT:
					case NEW:
					case NOT:
					case NOTHING:
					case NULL:
					case ON:
					case OPEN:
					case OPTIONAL:
					case OR:
					case OUTPUT:
					case PARAMARRAY:
					case PRESERVE:
					case PRINT:
					case PRIVATE:
					case PUBLIC:
					case PUT:
					case RANDOM:
					case RANDOMIZE:
					case RAISEEVENT:
					case READ:
					case REDIM:
					case REM:
					case RESET:
					case RESUME:
					case RETURN:
					case RMDIR:
					case RSET:
					case SAVEPICTURE:
					case SAVESETTING:
					case SEEK:
					case SELECT:
					case SENDKEYS:
					case SET:
					case SETATTR:
					case SHARED:
					case SINGLE:
					case SPC:
					case STATIC:
					case STEP:
					case STOP:
					case STRING:
					case SUB:
					case TAB:
					case TEXT:
					case THEN:
					case TIME:
					case TO:
					case TRUE:
					case TYPE:
					case TYPEOF:
					case UNLOAD:
					case UNLOCK:
					case UNTIL:
					case VARIANT:
					case VERSION:
					case WEND:
					case WHILE:
					case WIDTH:
					case WITH:
					case WITHEVENTS:
					case WRITE:
					case XOR:
						{
						State = 2542; ambiguousKeyword();
						}
						break;
					case IDENTIFIER:
						{
						State = 2543; Match(IDENTIFIER);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2546;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)) | (1L << (PUT - 64)) | (1L << (RANDOM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0) || _la==IDENTIFIER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(VisualBasic6Parser.LT, 0); }
		public ITerminalNode LEQ() { return GetToken(VisualBasic6Parser.LEQ, 0); }
		public ITerminalNode GT() { return GetToken(VisualBasic6Parser.GT, 0); }
		public ITerminalNode GEQ() { return GetToken(VisualBasic6Parser.GEQ, 0); }
		public ITerminalNode EQ() { return GetToken(VisualBasic6Parser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(VisualBasic6Parser.NEQ, 0); }
		public ITerminalNode IS() { return GetToken(VisualBasic6Parser.IS, 0); }
		public ITerminalNode LIKE() { return GetToken(VisualBasic6Parser.LIKE, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterComparisonOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitComparisonOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(Context, State);
		EnterRule(_localctx, 258, RULE_comparisonOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2550;
			_la = TokenStream.La(1);
			if ( !(_la==IS || _la==LIKE || ((((_la - 182)) & ~0x3f) == 0 && ((1L << (_la - 182)) & ((1L << (EQ - 182)) | (1L << (GEQ - 182)) | (1L << (GT - 182)) | (1L << (LEQ - 182)) | (1L << (LT - 182)) | (1L << (NEQ - 182)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexTypeContext : ParserRuleContext {
		public AmbiguousIdentifierContext[] ambiguousIdentifier() {
			return GetRuleContexts<AmbiguousIdentifierContext>();
		}
		public AmbiguousIdentifierContext ambiguousIdentifier(int i) {
			return GetRuleContext<AmbiguousIdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(VisualBasic6Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(VisualBasic6Parser.DOT, i);
		}
		public ComplexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterComplexType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitComplexType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplexType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComplexTypeContext complexType() {
		ComplexTypeContext _localctx = new ComplexTypeContext(Context, State);
		EnterRule(_localctx, 260, RULE_complexType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2552; ambiguousIdentifier();
			State = 2557;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,432,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2553; Match(DOT);
					State = 2554; ambiguousIdentifier();
					}
					} 
				}
				State = 2559;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,432,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		public ITerminalNode MULT() { return GetToken(VisualBasic6Parser.MULT, 0); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VisualBasic6Parser.INTEGERLITERAL, 0); }
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode WS() { return GetToken(VisualBasic6Parser.WS, 0); }
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldLength(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(Context, State);
		EnterRule(_localctx, 262, RULE_fieldLength);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2560; Match(MULT);
			State = 2562;
			_la = TokenStream.La(1);
			if (_la==WS) {
				{
				State = 2561; Match(WS);
				}
			}

			State = 2566;
			switch (TokenStream.La(1)) {
			case INTEGERLITERAL:
				{
				State = 2564; Match(INTEGERLITERAL);
				}
				break;
			case ACCESS:
			case ADDRESSOF:
			case ALIAS:
			case AND:
			case ATTRIBUTE:
			case APPACTIVATE:
			case APPEND:
			case AS:
			case BEGIN:
			case BEEP:
			case BINARY:
			case BOOLEAN:
			case BYVAL:
			case BYREF:
			case BYTE:
			case CALL:
			case CASE:
			case CHDIR:
			case CHDRIVE:
			case CLASS:
			case CLOSE:
			case COLLECTION:
			case CONST:
			case DATE:
			case DECLARE:
			case DEFBOOL:
			case DEFBYTE:
			case DEFDATE:
			case DEFDBL:
			case DEFDEC:
			case DEFCUR:
			case DEFINT:
			case DEFLNG:
			case DEFOBJ:
			case DEFSNG:
			case DEFSTR:
			case DEFVAR:
			case DELETESETTING:
			case DIM:
			case DO:
			case DOUBLE:
			case EACH:
			case ELSE:
			case ELSEIF:
			case END:
			case ENUM:
			case EQV:
			case ERASE:
			case ERROR:
			case EVENT:
			case FALSE:
			case FILECOPY:
			case FRIEND:
			case FOR:
			case FUNCTION:
			case GET:
			case GLOBAL:
			case GOSUB:
			case GOTO:
			case IF:
			case IMP:
			case IMPLEMENTS:
			case IN:
			case INPUT:
			case IS:
			case INTEGER:
			case KILL:
			case LOAD:
			case LOCK:
			case LONG:
			case LOOP:
			case LEN:
			case LET:
			case LIB:
			case LIKE:
			case LSET:
			case ME:
			case MID:
			case MKDIR:
			case MOD:
			case NAME:
			case NEXT:
			case NEW:
			case NOT:
			case NOTHING:
			case NULL:
			case ON:
			case OPEN:
			case OPTIONAL:
			case OR:
			case OUTPUT:
			case PARAMARRAY:
			case PRESERVE:
			case PRINT:
			case PRIVATE:
			case PUBLIC:
			case PUT:
			case RANDOM:
			case RANDOMIZE:
			case RAISEEVENT:
			case READ:
			case REDIM:
			case REM:
			case RESET:
			case RESUME:
			case RETURN:
			case RMDIR:
			case RSET:
			case SAVEPICTURE:
			case SAVESETTING:
			case SEEK:
			case SELECT:
			case SENDKEYS:
			case SET:
			case SETATTR:
			case SHARED:
			case SINGLE:
			case SPC:
			case STATIC:
			case STEP:
			case STOP:
			case STRING:
			case SUB:
			case TAB:
			case TEXT:
			case THEN:
			case TIME:
			case TO:
			case TRUE:
			case TYPE:
			case TYPEOF:
			case UNLOAD:
			case UNLOCK:
			case UNTIL:
			case VARIANT:
			case VERSION:
			case WEND:
			case WHILE:
			case WIDTH:
			case WITH:
			case WITHEVENTS:
			case WRITE:
			case XOR:
			case L_SQUARE_BRACKET:
			case IDENTIFIER:
				{
				State = 2565; ambiguousIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetterrangeContext : ParserRuleContext {
		public CertainIdentifierContext[] certainIdentifier() {
			return GetRuleContexts<CertainIdentifierContext>();
		}
		public CertainIdentifierContext certainIdentifier(int i) {
			return GetRuleContext<CertainIdentifierContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(VisualBasic6Parser.MINUS, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public LetterrangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letterrange; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLetterrange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLetterrange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLetterrange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LetterrangeContext letterrange() {
		LetterrangeContext _localctx = new LetterrangeContext(Context, State);
		EnterRule(_localctx, 264, RULE_letterrange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2568; certainIdentifier();
			State = 2577;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,437,Context) ) {
			case 1:
				{
				State = 2570;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 2569; Match(WS);
					}
				}

				State = 2572; Match(MINUS);
				State = 2574;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 2573; Match(WS);
					}
				}

				State = 2576; certainIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineLabelContext : ParserRuleContext {
		public AmbiguousIdentifierContext ambiguousIdentifier() {
			return GetRuleContext<AmbiguousIdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(VisualBasic6Parser.COLON, 0); }
		public LineLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLineLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLineLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLineLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineLabelContext lineLabel() {
		LineLabelContext _localctx = new LineLabelContext(Context, State);
		EnterRule(_localctx, 266, RULE_lineLabel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2579; ambiguousIdentifier();
			State = 2580; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode COLORLITERAL() { return GetToken(VisualBasic6Parser.COLORLITERAL, 0); }
		public ITerminalNode DATELITERAL() { return GetToken(VisualBasic6Parser.DATELITERAL, 0); }
		public ITerminalNode DOUBLELITERAL() { return GetToken(VisualBasic6Parser.DOUBLELITERAL, 0); }
		public ITerminalNode FILENUMBER() { return GetToken(VisualBasic6Parser.FILENUMBER, 0); }
		public ITerminalNode INTEGERLITERAL() { return GetToken(VisualBasic6Parser.INTEGERLITERAL, 0); }
		public ITerminalNode STRINGLITERAL() { return GetToken(VisualBasic6Parser.STRINGLITERAL, 0); }
		public ITerminalNode TRUE() { return GetToken(VisualBasic6Parser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(VisualBasic6Parser.FALSE, 0); }
		public ITerminalNode NOTHING() { return GetToken(VisualBasic6Parser.NOTHING, 0); }
		public ITerminalNode NULL() { return GetToken(VisualBasic6Parser.NULL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 268, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2582;
			_la = TokenStream.La(1);
			if ( !(((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (TRUE - 159)) | (1L << (STRINGLITERAL - 159)) | (1L << (DATELITERAL - 159)) | (1L << (COLORLITERAL - 159)) | (1L << (INTEGERLITERAL - 159)) | (1L << (DOUBLELITERAL - 159)) | (1L << (FILENUMBER - 159)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ComplexTypeContext complexType() {
			return GetRuleContext<ComplexTypeContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(VisualBasic6Parser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(VisualBasic6Parser.RPAREN, 0); }
		public ITerminalNode[] WS() { return GetTokens(VisualBasic6Parser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(VisualBasic6Parser.WS, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 270, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2586;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,438,Context) ) {
			case 1:
				{
				State = 2584; baseType();
				}
				break;
			case 2:
				{
				State = 2585; complexType();
				}
				break;
			}
			State = 2596;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,441,Context) ) {
			case 1:
				{
				State = 2589;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 2588; Match(WS);
					}
				}

				State = 2591; Match(LPAREN);
				State = 2593;
				_la = TokenStream.La(1);
				if (_la==WS) {
					{
					State = 2592; Match(WS);
					}
				}

				State = 2595; Match(RPAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeHintContext : ParserRuleContext {
		public ITerminalNode AMPERSAND() { return GetToken(VisualBasic6Parser.AMPERSAND, 0); }
		public ITerminalNode AT() { return GetToken(VisualBasic6Parser.AT, 0); }
		public ITerminalNode DOLLAR() { return GetToken(VisualBasic6Parser.DOLLAR, 0); }
		public ITerminalNode EXCLAMATIONMARK() { return GetToken(VisualBasic6Parser.EXCLAMATIONMARK, 0); }
		public ITerminalNode HASH() { return GetToken(VisualBasic6Parser.HASH, 0); }
		public ITerminalNode PERCENT() { return GetToken(VisualBasic6Parser.PERCENT, 0); }
		public TypeHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeHint; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterTypeHint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitTypeHint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeHint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeHintContext typeHint() {
		TypeHintContext _localctx = new TypeHintContext(Context, State);
		EnterRule(_localctx, 272, RULE_typeHint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2598;
			_la = TokenStream.La(1);
			if ( !(((((_la - 174)) & ~0x3f) == 0 && ((1L << (_la - 174)) & ((1L << (AMPERSAND - 174)) | (1L << (AT - 174)) | (1L << (DOLLAR - 174)) | (1L << (EXCLAMATIONMARK - 174)) | (1L << (HASH - 174)) | (1L << (PERCENT - 174)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		public ITerminalNode PRIVATE() { return GetToken(VisualBasic6Parser.PRIVATE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VisualBasic6Parser.PUBLIC, 0); }
		public ITerminalNode FRIEND() { return GetToken(VisualBasic6Parser.FRIEND, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VisualBasic6Parser.GLOBAL, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVisibility(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(Context, State);
		EnterRule(_localctx, 274, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2600;
			_la = TokenStream.La(1);
			if ( !(((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (FRIEND - 66)) | (1L << (GLOBAL - 66)) | (1L << (PRIVATE - 66)) | (1L << (PUBLIC - 66)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AmbiguousKeywordContext : ParserRuleContext {
		public ITerminalNode ACCESS() { return GetToken(VisualBasic6Parser.ACCESS, 0); }
		public ITerminalNode ADDRESSOF() { return GetToken(VisualBasic6Parser.ADDRESSOF, 0); }
		public ITerminalNode ALIAS() { return GetToken(VisualBasic6Parser.ALIAS, 0); }
		public ITerminalNode AND() { return GetToken(VisualBasic6Parser.AND, 0); }
		public ITerminalNode ATTRIBUTE() { return GetToken(VisualBasic6Parser.ATTRIBUTE, 0); }
		public ITerminalNode APPACTIVATE() { return GetToken(VisualBasic6Parser.APPACTIVATE, 0); }
		public ITerminalNode APPEND() { return GetToken(VisualBasic6Parser.APPEND, 0); }
		public ITerminalNode AS() { return GetToken(VisualBasic6Parser.AS, 0); }
		public ITerminalNode BEEP() { return GetToken(VisualBasic6Parser.BEEP, 0); }
		public ITerminalNode BEGIN() { return GetToken(VisualBasic6Parser.BEGIN, 0); }
		public ITerminalNode BINARY() { return GetToken(VisualBasic6Parser.BINARY, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(VisualBasic6Parser.BOOLEAN, 0); }
		public ITerminalNode BYVAL() { return GetToken(VisualBasic6Parser.BYVAL, 0); }
		public ITerminalNode BYREF() { return GetToken(VisualBasic6Parser.BYREF, 0); }
		public ITerminalNode BYTE() { return GetToken(VisualBasic6Parser.BYTE, 0); }
		public ITerminalNode CALL() { return GetToken(VisualBasic6Parser.CALL, 0); }
		public ITerminalNode CASE() { return GetToken(VisualBasic6Parser.CASE, 0); }
		public ITerminalNode CLASS() { return GetToken(VisualBasic6Parser.CLASS, 0); }
		public ITerminalNode CLOSE() { return GetToken(VisualBasic6Parser.CLOSE, 0); }
		public ITerminalNode CHDIR() { return GetToken(VisualBasic6Parser.CHDIR, 0); }
		public ITerminalNode CHDRIVE() { return GetToken(VisualBasic6Parser.CHDRIVE, 0); }
		public ITerminalNode COLLECTION() { return GetToken(VisualBasic6Parser.COLLECTION, 0); }
		public ITerminalNode CONST() { return GetToken(VisualBasic6Parser.CONST, 0); }
		public ITerminalNode DATE() { return GetToken(VisualBasic6Parser.DATE, 0); }
		public ITerminalNode DECLARE() { return GetToken(VisualBasic6Parser.DECLARE, 0); }
		public ITerminalNode DEFBOOL() { return GetToken(VisualBasic6Parser.DEFBOOL, 0); }
		public ITerminalNode DEFBYTE() { return GetToken(VisualBasic6Parser.DEFBYTE, 0); }
		public ITerminalNode DEFCUR() { return GetToken(VisualBasic6Parser.DEFCUR, 0); }
		public ITerminalNode DEFDBL() { return GetToken(VisualBasic6Parser.DEFDBL, 0); }
		public ITerminalNode DEFDATE() { return GetToken(VisualBasic6Parser.DEFDATE, 0); }
		public ITerminalNode DEFDEC() { return GetToken(VisualBasic6Parser.DEFDEC, 0); }
		public ITerminalNode DEFINT() { return GetToken(VisualBasic6Parser.DEFINT, 0); }
		public ITerminalNode DEFLNG() { return GetToken(VisualBasic6Parser.DEFLNG, 0); }
		public ITerminalNode DEFOBJ() { return GetToken(VisualBasic6Parser.DEFOBJ, 0); }
		public ITerminalNode DEFSNG() { return GetToken(VisualBasic6Parser.DEFSNG, 0); }
		public ITerminalNode DEFSTR() { return GetToken(VisualBasic6Parser.DEFSTR, 0); }
		public ITerminalNode DEFVAR() { return GetToken(VisualBasic6Parser.DEFVAR, 0); }
		public ITerminalNode DELETESETTING() { return GetToken(VisualBasic6Parser.DELETESETTING, 0); }
		public ITerminalNode DIM() { return GetToken(VisualBasic6Parser.DIM, 0); }
		public ITerminalNode DO() { return GetToken(VisualBasic6Parser.DO, 0); }
		public ITerminalNode DOUBLE() { return GetToken(VisualBasic6Parser.DOUBLE, 0); }
		public ITerminalNode EACH() { return GetToken(VisualBasic6Parser.EACH, 0); }
		public ITerminalNode ELSE() { return GetToken(VisualBasic6Parser.ELSE, 0); }
		public ITerminalNode ELSEIF() { return GetToken(VisualBasic6Parser.ELSEIF, 0); }
		public ITerminalNode END() { return GetToken(VisualBasic6Parser.END, 0); }
		public ITerminalNode ENUM() { return GetToken(VisualBasic6Parser.ENUM, 0); }
		public ITerminalNode EQV() { return GetToken(VisualBasic6Parser.EQV, 0); }
		public ITerminalNode ERASE() { return GetToken(VisualBasic6Parser.ERASE, 0); }
		public ITerminalNode ERROR() { return GetToken(VisualBasic6Parser.ERROR, 0); }
		public ITerminalNode EVENT() { return GetToken(VisualBasic6Parser.EVENT, 0); }
		public ITerminalNode FALSE() { return GetToken(VisualBasic6Parser.FALSE, 0); }
		public ITerminalNode FILECOPY() { return GetToken(VisualBasic6Parser.FILECOPY, 0); }
		public ITerminalNode FRIEND() { return GetToken(VisualBasic6Parser.FRIEND, 0); }
		public ITerminalNode FOR() { return GetToken(VisualBasic6Parser.FOR, 0); }
		public ITerminalNode FUNCTION() { return GetToken(VisualBasic6Parser.FUNCTION, 0); }
		public ITerminalNode GET() { return GetToken(VisualBasic6Parser.GET, 0); }
		public ITerminalNode GLOBAL() { return GetToken(VisualBasic6Parser.GLOBAL, 0); }
		public ITerminalNode GOSUB() { return GetToken(VisualBasic6Parser.GOSUB, 0); }
		public ITerminalNode GOTO() { return GetToken(VisualBasic6Parser.GOTO, 0); }
		public ITerminalNode IF() { return GetToken(VisualBasic6Parser.IF, 0); }
		public ITerminalNode IMP() { return GetToken(VisualBasic6Parser.IMP, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(VisualBasic6Parser.IMPLEMENTS, 0); }
		public ITerminalNode IN() { return GetToken(VisualBasic6Parser.IN, 0); }
		public ITerminalNode INPUT() { return GetToken(VisualBasic6Parser.INPUT, 0); }
		public ITerminalNode IS() { return GetToken(VisualBasic6Parser.IS, 0); }
		public ITerminalNode INTEGER() { return GetToken(VisualBasic6Parser.INTEGER, 0); }
		public ITerminalNode KILL() { return GetToken(VisualBasic6Parser.KILL, 0); }
		public ITerminalNode LOAD() { return GetToken(VisualBasic6Parser.LOAD, 0); }
		public ITerminalNode LOCK() { return GetToken(VisualBasic6Parser.LOCK, 0); }
		public ITerminalNode LONG() { return GetToken(VisualBasic6Parser.LONG, 0); }
		public ITerminalNode LOOP() { return GetToken(VisualBasic6Parser.LOOP, 0); }
		public ITerminalNode LEN() { return GetToken(VisualBasic6Parser.LEN, 0); }
		public ITerminalNode LET() { return GetToken(VisualBasic6Parser.LET, 0); }
		public ITerminalNode LIB() { return GetToken(VisualBasic6Parser.LIB, 0); }
		public ITerminalNode LIKE() { return GetToken(VisualBasic6Parser.LIKE, 0); }
		public ITerminalNode LSET() { return GetToken(VisualBasic6Parser.LSET, 0); }
		public ITerminalNode ME() { return GetToken(VisualBasic6Parser.ME, 0); }
		public ITerminalNode MID() { return GetToken(VisualBasic6Parser.MID, 0); }
		public ITerminalNode MKDIR() { return GetToken(VisualBasic6Parser.MKDIR, 0); }
		public ITerminalNode MOD() { return GetToken(VisualBasic6Parser.MOD, 0); }
		public ITerminalNode NAME() { return GetToken(VisualBasic6Parser.NAME, 0); }
		public ITerminalNode NEXT() { return GetToken(VisualBasic6Parser.NEXT, 0); }
		public ITerminalNode NEW() { return GetToken(VisualBasic6Parser.NEW, 0); }
		public ITerminalNode NOT() { return GetToken(VisualBasic6Parser.NOT, 0); }
		public ITerminalNode NOTHING() { return GetToken(VisualBasic6Parser.NOTHING, 0); }
		public ITerminalNode NULL() { return GetToken(VisualBasic6Parser.NULL, 0); }
		public ITerminalNode ON() { return GetToken(VisualBasic6Parser.ON, 0); }
		public ITerminalNode OPEN() { return GetToken(VisualBasic6Parser.OPEN, 0); }
		public ITerminalNode OPTIONAL() { return GetToken(VisualBasic6Parser.OPTIONAL, 0); }
		public ITerminalNode OR() { return GetToken(VisualBasic6Parser.OR, 0); }
		public ITerminalNode OUTPUT() { return GetToken(VisualBasic6Parser.OUTPUT, 0); }
		public ITerminalNode PARAMARRAY() { return GetToken(VisualBasic6Parser.PARAMARRAY, 0); }
		public ITerminalNode PRESERVE() { return GetToken(VisualBasic6Parser.PRESERVE, 0); }
		public ITerminalNode PRINT() { return GetToken(VisualBasic6Parser.PRINT, 0); }
		public ITerminalNode PRIVATE() { return GetToken(VisualBasic6Parser.PRIVATE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(VisualBasic6Parser.PUBLIC, 0); }
		public ITerminalNode PUT() { return GetToken(VisualBasic6Parser.PUT, 0); }
		public ITerminalNode RANDOM() { return GetToken(VisualBasic6Parser.RANDOM, 0); }
		public ITerminalNode RANDOMIZE() { return GetToken(VisualBasic6Parser.RANDOMIZE, 0); }
		public ITerminalNode RAISEEVENT() { return GetToken(VisualBasic6Parser.RAISEEVENT, 0); }
		public ITerminalNode READ() { return GetToken(VisualBasic6Parser.READ, 0); }
		public ITerminalNode REDIM() { return GetToken(VisualBasic6Parser.REDIM, 0); }
		public ITerminalNode REM() { return GetToken(VisualBasic6Parser.REM, 0); }
		public ITerminalNode RESET() { return GetToken(VisualBasic6Parser.RESET, 0); }
		public ITerminalNode RESUME() { return GetToken(VisualBasic6Parser.RESUME, 0); }
		public ITerminalNode RETURN() { return GetToken(VisualBasic6Parser.RETURN, 0); }
		public ITerminalNode RMDIR() { return GetToken(VisualBasic6Parser.RMDIR, 0); }
		public ITerminalNode RSET() { return GetToken(VisualBasic6Parser.RSET, 0); }
		public ITerminalNode SAVEPICTURE() { return GetToken(VisualBasic6Parser.SAVEPICTURE, 0); }
		public ITerminalNode SAVESETTING() { return GetToken(VisualBasic6Parser.SAVESETTING, 0); }
		public ITerminalNode SEEK() { return GetToken(VisualBasic6Parser.SEEK, 0); }
		public ITerminalNode SELECT() { return GetToken(VisualBasic6Parser.SELECT, 0); }
		public ITerminalNode SENDKEYS() { return GetToken(VisualBasic6Parser.SENDKEYS, 0); }
		public ITerminalNode SET() { return GetToken(VisualBasic6Parser.SET, 0); }
		public ITerminalNode SETATTR() { return GetToken(VisualBasic6Parser.SETATTR, 0); }
		public ITerminalNode SHARED() { return GetToken(VisualBasic6Parser.SHARED, 0); }
		public ITerminalNode SINGLE() { return GetToken(VisualBasic6Parser.SINGLE, 0); }
		public ITerminalNode SPC() { return GetToken(VisualBasic6Parser.SPC, 0); }
		public ITerminalNode STATIC() { return GetToken(VisualBasic6Parser.STATIC, 0); }
		public ITerminalNode STEP() { return GetToken(VisualBasic6Parser.STEP, 0); }
		public ITerminalNode STOP() { return GetToken(VisualBasic6Parser.STOP, 0); }
		public ITerminalNode STRING() { return GetToken(VisualBasic6Parser.STRING, 0); }
		public ITerminalNode SUB() { return GetToken(VisualBasic6Parser.SUB, 0); }
		public ITerminalNode TAB() { return GetToken(VisualBasic6Parser.TAB, 0); }
		public ITerminalNode TEXT() { return GetToken(VisualBasic6Parser.TEXT, 0); }
		public ITerminalNode THEN() { return GetToken(VisualBasic6Parser.THEN, 0); }
		public ITerminalNode TIME() { return GetToken(VisualBasic6Parser.TIME, 0); }
		public ITerminalNode TO() { return GetToken(VisualBasic6Parser.TO, 0); }
		public ITerminalNode TRUE() { return GetToken(VisualBasic6Parser.TRUE, 0); }
		public ITerminalNode TYPE() { return GetToken(VisualBasic6Parser.TYPE, 0); }
		public ITerminalNode TYPEOF() { return GetToken(VisualBasic6Parser.TYPEOF, 0); }
		public ITerminalNode UNLOAD() { return GetToken(VisualBasic6Parser.UNLOAD, 0); }
		public ITerminalNode UNLOCK() { return GetToken(VisualBasic6Parser.UNLOCK, 0); }
		public ITerminalNode UNTIL() { return GetToken(VisualBasic6Parser.UNTIL, 0); }
		public ITerminalNode VARIANT() { return GetToken(VisualBasic6Parser.VARIANT, 0); }
		public ITerminalNode VERSION() { return GetToken(VisualBasic6Parser.VERSION, 0); }
		public ITerminalNode WEND() { return GetToken(VisualBasic6Parser.WEND, 0); }
		public ITerminalNode WHILE() { return GetToken(VisualBasic6Parser.WHILE, 0); }
		public ITerminalNode WIDTH() { return GetToken(VisualBasic6Parser.WIDTH, 0); }
		public ITerminalNode WITH() { return GetToken(VisualBasic6Parser.WITH, 0); }
		public ITerminalNode WITHEVENTS() { return GetToken(VisualBasic6Parser.WITHEVENTS, 0); }
		public ITerminalNode WRITE() { return GetToken(VisualBasic6Parser.WRITE, 0); }
		public ITerminalNode XOR() { return GetToken(VisualBasic6Parser.XOR, 0); }
		public AmbiguousKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ambiguousKeyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.EnterAmbiguousKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IVisualBasic6Listener typedListener = listener as IVisualBasic6Listener;
			if (typedListener != null) typedListener.ExitAmbiguousKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IVisualBasic6Visitor<TResult> typedVisitor = visitor as IVisualBasic6Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAmbiguousKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AmbiguousKeywordContext ambiguousKeyword() {
		AmbiguousKeywordContext _localctx = new AmbiguousKeywordContext(Context, State);
		EnterRule(_localctx, 276, RULE_ambiguousKeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2602;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ADDRESSOF) | (1L << ALIAS) | (1L << AND) | (1L << ATTRIBUTE) | (1L << APPACTIVATE) | (1L << APPEND) | (1L << AS) | (1L << BEGIN) | (1L << BEEP) | (1L << BINARY) | (1L << BOOLEAN) | (1L << BYVAL) | (1L << BYREF) | (1L << BYTE) | (1L << CALL) | (1L << CASE) | (1L << CHDIR) | (1L << CHDRIVE) | (1L << CLASS) | (1L << CLOSE) | (1L << COLLECTION) | (1L << CONST) | (1L << DATE) | (1L << DECLARE) | (1L << DEFBOOL) | (1L << DEFBYTE) | (1L << DEFDATE) | (1L << DEFDBL) | (1L << DEFDEC) | (1L << DEFCUR) | (1L << DEFINT) | (1L << DEFLNG) | (1L << DEFOBJ) | (1L << DEFSNG) | (1L << DEFSTR) | (1L << DEFVAR) | (1L << DELETESETTING) | (1L << DIM) | (1L << DO) | (1L << DOUBLE) | (1L << EACH) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENUM) | (1L << EQV) | (1L << ERASE) | (1L << ERROR) | (1L << EVENT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (FALSE - 64)) | (1L << (FILECOPY - 64)) | (1L << (FRIEND - 64)) | (1L << (FOR - 64)) | (1L << (FUNCTION - 64)) | (1L << (GET - 64)) | (1L << (GLOBAL - 64)) | (1L << (GOSUB - 64)) | (1L << (GOTO - 64)) | (1L << (IF - 64)) | (1L << (IMP - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IN - 64)) | (1L << (INPUT - 64)) | (1L << (IS - 64)) | (1L << (INTEGER - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (LONG - 64)) | (1L << (LOOP - 64)) | (1L << (LEN - 64)) | (1L << (LET - 64)) | (1L << (LIB - 64)) | (1L << (LIKE - 64)) | (1L << (LSET - 64)) | (1L << (ME - 64)) | (1L << (MID - 64)) | (1L << (MKDIR - 64)) | (1L << (MOD - 64)) | (1L << (NAME - 64)) | (1L << (NEXT - 64)) | (1L << (NEW - 64)) | (1L << (NOT - 64)) | (1L << (NOTHING - 64)) | (1L << (NULL - 64)) | (1L << (ON - 64)) | (1L << (OPEN - 64)) | (1L << (OPTIONAL - 64)) | (1L << (OR - 64)) | (1L << (OUTPUT - 64)) | (1L << (PARAMARRAY - 64)) | (1L << (PRESERVE - 64)) | (1L << (PRINT - 64)) | (1L << (PRIVATE - 64)) | (1L << (PUBLIC - 64)) | (1L << (PUT - 64)) | (1L << (RANDOM - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (RANDOMIZE - 128)) | (1L << (RAISEEVENT - 128)) | (1L << (READ - 128)) | (1L << (REDIM - 128)) | (1L << (REM - 128)) | (1L << (RESET - 128)) | (1L << (RESUME - 128)) | (1L << (RETURN - 128)) | (1L << (RMDIR - 128)) | (1L << (RSET - 128)) | (1L << (SAVEPICTURE - 128)) | (1L << (SAVESETTING - 128)) | (1L << (SEEK - 128)) | (1L << (SELECT - 128)) | (1L << (SENDKEYS - 128)) | (1L << (SET - 128)) | (1L << (SETATTR - 128)) | (1L << (SHARED - 128)) | (1L << (SINGLE - 128)) | (1L << (SPC - 128)) | (1L << (STATIC - 128)) | (1L << (STEP - 128)) | (1L << (STOP - 128)) | (1L << (STRING - 128)) | (1L << (SUB - 128)) | (1L << (TAB - 128)) | (1L << (TEXT - 128)) | (1L << (THEN - 128)) | (1L << (TIME - 128)) | (1L << (TO - 128)) | (1L << (TRUE - 128)) | (1L << (TYPE - 128)) | (1L << (TYPEOF - 128)) | (1L << (UNLOAD - 128)) | (1L << (UNLOCK - 128)) | (1L << (UNTIL - 128)) | (1L << (VARIANT - 128)) | (1L << (VERSION - 128)) | (1L << (WEND - 128)) | (1L << (WHILE - 128)) | (1L << (WIDTH - 128)) | (1L << (WITH - 128)) | (1L << (WITHEVENTS - 128)) | (1L << (WRITE - 128)) | (1L << (XOR - 128)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 97: return valueStmt_sempred((ValueStmtContext)_localctx, predIndex);
		}
		return true;
	}
	private bool valueStmt_sempred(ValueStmtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 23);
		case 1: return Precpred(Context, 22);
		case 2: return Precpred(Context, 21);
		case 3: return Precpred(Context, 20);
		case 4: return Precpred(Context, 19);
		case 5: return Precpred(Context, 18);
		case 6: return Precpred(Context, 17);
		case 7: return Precpred(Context, 16);
		case 8: return Precpred(Context, 15);
		case 9: return Precpred(Context, 12);
		case 10: return Precpred(Context, 11);
		case 11: return Precpred(Context, 10);
		case 12: return Precpred(Context, 9);
		case 13: return Precpred(Context, 8);
		case 14: return Precpred(Context, 7);
		case 15: return Precpred(Context, 6);
		case 16: return Precpred(Context, 5);
		case 17: return Precpred(Context, 4);
		case 18: return Precpred(Context, 3);
		case 19: return Precpred(Context, 2);
		}
		return true;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\xD6");
		sb.Append("\xA2F\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t");
		sb.Append("(\x4)\t)\x4*\t*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t");
		sb.Append("\x30\x4\x31\t\x31\x4\x32\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4");
		sb.Append("\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37\x4\x38\t\x38\x4\x39\t\x39");
		sb.Append("\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4@\t@\x4\x41\t\x41");
		sb.Append("\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45\x4\x46");
		sb.Append("\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N");
		sb.Append("\tN\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV");
		sb.Append("\x4W\tW\x4X\tX\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4");
		sb.Append("_\t_\x4`\t`\x4\x61\t\x61\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t");
		sb.Append("\x64\x4\x65\t\x65\x4\x66\t\x66\x4g\tg\x4h\th\x4i\ti\x4j\tj\x4");
		sb.Append("k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4q\tq\x4r\tr\x4s\t");
		sb.Append("s\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4{\t{\x4");
		sb.Append("|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4");
		sb.Append("\x82\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86");
		sb.Append("\x4\x87\t\x87\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B");
		sb.Append("\t\x8B\x4\x8C\t\x8C\x3\x2\x3\x2\x3\x2\x3\x3\x5\x3\x11D\n\x3");
		sb.Append("\x3\x3\a\x3\x120\n\x3\f\x3\xE\x3\x123\v\x3\x3\x3\x3\x3\x6\x3");
		sb.Append("\x127\n\x3\r\x3\xE\x3\x128\x5\x3\x12B\n\x3\x3\x3\x5\x3\x12E");
		sb.Append("\n\x3\x3\x3\a\x3\x131\n\x3\f\x3\xE\x3\x134\v\x3\x3\x3\x5\x3");
		sb.Append("\x137\n\x3\x3\x3\a\x3\x13A\n\x3\f\x3\xE\x3\x13D\v\x3\x3\x3\x5");
		sb.Append("\x3\x140\n\x3\x3\x3\a\x3\x143\n\x3\f\x3\xE\x3\x146\v\x3\x3\x3");
		sb.Append("\x5\x3\x149\n\x3\x3\x3\a\x3\x14C\n\x3\f\x3\xE\x3\x14F\v\x3\x3");
		sb.Append("\x3\x5\x3\x152\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5");
		sb.Append("\x3\x5\x6\x5\x15C\n\x5\r\x5\xE\x5\x15D\x3\x5\x6\x5\x161\n\x5");
		sb.Append("\r\x5\xE\x5\x162\x3\x5\x3\x5\x6\x5\x167\n\x5\r\x5\xE\x5\x168");
		sb.Append("\x3\x6\x3\x6\x5\x6\x16D\n\x6\x3\x6\x3\x6\x5\x6\x171\n\x6\x3");
		sb.Append("\x6\x3\x6\x3\x6\x3\a\x3\a\x6\a\x178\n\a\r\a\xE\a\x179\x6\a\x17C");
		sb.Append("\n\a\r\a\xE\a\x17D\x3\b\x3\b\x6\b\x182\n\b\r\b\xE\b\x183\x6");
		sb.Append("\b\x186\n\b\r\b\xE\b\x187\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t");
		sb.Append("\x3\t\x5\t\x192\n\t\x3\n\x3\n\x6\n\x196\n\n\r\n\xE\n\x197\x3");
		sb.Append("\n\a\n\x19B\n\n\f\n\xE\n\x19E\v\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3");
		sb.Append("\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\x1AB\n\v\x3\f\x3\f\x3\r\x3");
		sb.Append("\r\x3\r\x3\r\x5\r\x1B3\n\r\x3\r\x3\r\x5\r\x1B7\n\r\x3\r\x3\r");
		sb.Append("\x5\r\x1BB\n\r\x3\r\x3\r\x5\r\x1BF\n\r\x3\r\a\r\x1C2\n\r\f\r");
		sb.Append("\xE\r\x1C5\v\r\x3\xE\x3\xE\x6\xE\x1C9\n\xE\r\xE\xE\xE\x1CA\x3");
		sb.Append("\xE\x5\xE\x1CE\n\xE\x3\xE\a\xE\x1D1\n\xE\f\xE\xE\xE\x1D4\v\xE");
		sb.Append("\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF");
		sb.Append("\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF");
		sb.Append("\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF");
		sb.Append("\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF");
		sb.Append("\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF");
		sb.Append("\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF");
		sb.Append("\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\x219\n\xF\x3");
		sb.Append("\x10\x3\x10\x3\x10\x3\x10\x5\x10\x21F\n\x10\x3\x10\x3\x10\x5");
		sb.Append("\x10\x223\n\x10\x3\x10\x5\x10\x226\n\x10\x3\x11\x3\x11\x3\x12");
		sb.Append("\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x13\x3\x14\x3");
		sb.Append("\x14\x3\x14\x3\x14\x5\x14\x236\n\x14\x3\x14\x3\x14\x5\x14\x23A");
		sb.Append("\n\x14\x3\x14\a\x14\x23D\n\x14\f\x14\xE\x14\x240\v\x14\x5\x14");
		sb.Append("\x242\n\x14\x3\x15\x3\x15\x3\x15\x5\x15\x247\n\x15\x3\x15\x3");
		sb.Append("\x15\x3\x15\x3\x15\x5\x15\x24D\n\x15\x3\x15\x3\x15\x5\x15\x251");
		sb.Append("\n\x15\x3\x15\a\x15\x254\n\x15\f\x15\xE\x15\x257\v\x15\x3\x16");
		sb.Append("\x3\x16\x5\x16\x25B\n\x16\x3\x16\x3\x16\x5\x16\x25F\n\x16\x3");
		sb.Append("\x16\x5\x16\x262\n\x16\x3\x16\x3\x16\x5\x16\x266\n\x16\x3\x16");
		sb.Append("\x3\x16\x3\x17\x3\x17\x5\x17\x26C\n\x17\x3\x17\x3\x17\x5\x17");
		sb.Append("\x270\n\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x5\x18\x277\n");
		sb.Append("\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x27D\n\x18\x3\x18\x5");
		sb.Append("\x18\x280\n\x18\x3\x18\x3\x18\x3\x18\x5\x18\x285\n\x18\x3\x18");
		sb.Append("\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x3\x18\x5\x18\x28F");
		sb.Append("\n\x18\x3\x18\x5\x18\x292\n\x18\x3\x18\x5\x18\x295\n\x18\x3");
		sb.Append("\x18\x3\x18\x5\x18\x299\n\x18\x3\x19\x3\x19\x3\x19\x3\x19\x5");
		sb.Append("\x19\x29F\n\x19\x3\x19\x3\x19\x5\x19\x2A3\n\x19\x3\x19\a\x19");
		sb.Append("\x2A6\n\x19\f\x19\xE\x19\x2A9\v\x19\x3\x1A\x3\x1A\x3\x1A\x3");
		sb.Append("\x1A\x5\x1A\x2AF\n\x1A\x3\x1A\x3\x1A\x5\x1A\x2B3\n\x1A\x3\x1A");
		sb.Append("\x3\x1A\x5\x1A\x2B7\n\x1A\x3\x1A\x3\x1A\x5\x1A\x2BB\n\x1A\x3");
		sb.Append("\x1A\x5\x1A\x2BE\n\x1A\x3\x1B\x3\x1B\x6\x1B\x2C2\n\x1B\r\x1B");
		sb.Append("\xE\x1B\x2C3\x3\x1B\x3\x1B\x6\x1B\x2C8\n\x1B\r\x1B\xE\x1B\x2C9");
		sb.Append("\x5\x1B\x2CC\n\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B");
		sb.Append("\x3\x1B\x6\x1B\x2D5\n\x1B\r\x1B\xE\x1B\x2D6\x3\x1B\x3\x1B\x6");
		sb.Append("\x1B\x2DB\n\x1B\r\x1B\xE\x1B\x2DC\x5\x1B\x2DF\n\x1B\x3\x1B\x3");
		sb.Append("\x1B\x3\x1B\x3\x1B\x6\x1B\x2E5\n\x1B\r\x1B\xE\x1B\x2E6\x3\x1B");
		sb.Append("\x3\x1B\x6\x1B\x2EB\n\x1B\r\x1B\xE\x1B\x2EC\x3\x1B\x3\x1B\x3");
		sb.Append("\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x2F5\n\x1B\x3\x1C\x3\x1C\x3");
		sb.Append("\x1D\x3\x1D\x3\x1D\x5\x1D\x2FC\n\x1D\x3\x1D\x3\x1D\x3\x1D\x3");
		sb.Append("\x1D\x6\x1D\x302\n\x1D\r\x1D\xE\x1D\x303\x3\x1D\a\x1D\x307\n");
		sb.Append("\x1D\f\x1D\xE\x1D\x30A\v\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x5");
		sb.Append("\x1E\x310\n\x1E\x3\x1E\x3\x1E\x5\x1E\x314\n\x1E\x3\x1E\x5\x1E");
		sb.Append("\x317\n\x1E\x3\x1E\x6\x1E\x31A\n\x1E\r\x1E\xE\x1E\x31B\x3\x1F");
		sb.Append("\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x322\n\x1F\x3\x1F\x3\x1F\x5\x1F");
		sb.Append("\x326\n\x1F\x3\x1F\a\x1F\x329\n\x1F\f\x1F\xE\x1F\x32C\v\x1F");
		sb.Append("\x3 \x3 \x3 \x3 \x3!\x3!\x3!\x5!\x335\n!\x3!\x3!\x3!\x3!\x5");
		sb.Append("!\x33B\n!\x3!\x3!\x3\"\x3\"\x3#\x3#\x3#\x3#\x5#\x345\n#\x3#");
		sb.Append("\x3#\x5#\x349\n#\x3#\x3#\x3$\x3$\x3$\x3$\x3$\x3$\x5$\x353\n");
		sb.Append("$\x3$\x3$\x3$\x3$\x3$\x6$\x35A\n$\r$\xE$\x35B\x3$\x3$\x6$\x360");
		sb.Append("\n$\r$\xE$\x361\x5$\x364\n$\x3$\x3$\x3$\x5$\x369\n$\x3%\x3%");
		sb.Append("\x3%\x3%\x5%\x36F\n%\x3%\x3%\x5%\x373\n%\x3%\x5%\x376\n%\x3");
		sb.Append("%\x3%\x5%\x37A\n%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x3%\x5%\x385");
		sb.Append("\n%\x3%\x6%\x388\n%\r%\xE%\x389\x3%\x3%\x6%\x38E\n%\r%\xE%\x38F");
		sb.Append("\x5%\x392\n%\x3%\x3%\x3%\x5%\x397\n%\x3&\x3&\x3&\x5&\x39C\n");
		sb.Append("&\x3&\x3&\x5&\x3A0\n&\x3&\x3&\x3&\x3&\x5&\x3A6\n&\x3&\x5&\x3A9");
		sb.Append("\n&\x3&\x3&\x5&\x3AD\n&\x3&\x6&\x3B0\n&\r&\xE&\x3B1\x3&\x3&");
		sb.Append("\x6&\x3B6\n&\r&\xE&\x3B7\x5&\x3BA\n&\x3&\x3&\x3\'\x3\'\x3\'");
		sb.Append("\x3\'\x5\'\x3C2\n\'\x3\'\x3\'\x5\'\x3C6\n\'\x3\'\x5\'\x3C9\n");
		sb.Append("\'\x3\'\x5\'\x3CC\n\'\x3\'\x3\'\x5\'\x3D0\n\'\x3\'\x3\'\x3(");
		sb.Append("\x3(\x3(\x3(\x3)\x3)\x3)\x3)\x3*\x3*\x3*\x3*\x3*\x3*\x3*\x3");
		sb.Append("*\x3*\x3*\x3*\x5*\x3E7\n*\x3*\x3*\a*\x3EB\n*\f*\xE*\x3EE\v*");
		sb.Append("\x3*\x5*\x3F1\n*\x3*\x3*\x5*\x3F5\n*\x3+\x3+\x3+\x3+\x3+\x3");
		sb.Append("+\x6+\x3FD\n+\r+\xE+\x3FE\x3+\x3+\x6+\x403\n+\r+\xE+\x404\x5");
		sb.Append("+\x407\n+\x3,\x3,\x3-\x3-\x3-\x3-\x3-\x3-\x6-\x411\n-\r-\xE");
		sb.Append("-\x412\x3-\x3-\x6-\x417\n-\r-\xE-\x418\x5-\x41B\n-\x3.\x3.\x6");
		sb.Append(".\x41F\n.\r.\xE.\x420\x3.\x3.\x6.\x425\n.\r.\xE.\x426\x5.\x429");
		sb.Append("\n.\x3/\x3/\x3/\x3/\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x433");
		sb.Append("\n\x30\x3\x30\x3\x30\x5\x30\x437\n\x30\x3\x30\x6\x30\x43A\n");
		sb.Append("\x30\r\x30\xE\x30\x43B\x3\x31\x3\x31\x3\x31\x3\x31\x3\x32\x3");
		sb.Append("\x32\x5\x32\x444\n\x32\x3\x32\x3\x32\x5\x32\x448\n\x32\x3\x32");
		sb.Append("\x3\x32\x5\x32\x44C\n\x32\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33");
		sb.Append("\x3\x33\x5\x33\x454\n\x33\x3\x33\x3\x33\x5\x33\x458\n\x33\x3");
		sb.Append("\x33\x3\x33\x3\x34\x3\x34\x3\x34\x3\x34\x3\x35\x3\x35\x3\x35");
		sb.Append("\x3\x35\x5\x35\x464\n\x35\x3\x35\x3\x35\x5\x35\x468\n\x35\x3");
		sb.Append("\x35\x3\x35\x3\x35\x3\x35\x3\x35\x5\x35\x46F\n\x35\x5\x35\x471");
		sb.Append("\n\x35\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x477\n\x36\x3\x36");
		sb.Append("\x3\x36\x5\x36\x47B\n\x36\x3\x36\x3\x36\x3\x37\x3\x37\a\x37");
		sb.Append("\x481\n\x37\f\x37\xE\x37\x484\v\x37\x3\x37\x5\x37\x487\n\x37");
		sb.Append("\x3\x37\x3\x37\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x3\x38\x6");
		sb.Append("\x38\x491\n\x38\r\x38\xE\x38\x492\x3\x38\x3\x38\x6\x38\x497");
		sb.Append("\n\x38\r\x38\xE\x38\x498\x5\x38\x49B\n\x38\x3\x39\x3\x39\x3");
		sb.Append("\x39\x3\x39\x3\x39\x3\x39\x6\x39\x4A3\n\x39\r\x39\xE\x39\x4A4");
		sb.Append("\x3\x39\x3\x39\x6\x39\x4A9\n\x39\r\x39\xE\x39\x4AA\x5\x39\x4AD");
		sb.Append("\n\x39\x3:\x3:\x6:\x4B1\n:\r:\xE:\x4B2\x3:\x3:\x6:\x4B7\n:\r");
		sb.Append(":\xE:\x4B8\x5:\x4BB\n:\x3;\x3;\x5;\x4BF\n;\x3;\x3;\x5;\x4C3");
		sb.Append("\n;\x3;\x3;\x5;\x4C7\n;\x3;\x3;\x3<\x3<\x3<\x3<\x3=\x3=\x3=");
		sb.Append("\x3=\x3=\x3=\x3=\x3=\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x3>\x5>\x4DF");
		sb.Append("\n>\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x5?\x4E9\n?\x3?\x3?\x5?");
		sb.Append("\x4ED\n?\x3?\a?\x4F0\n?\f?\xE?\x4F3\v?\x3@\x3@\x3@\x3@\x3@\x3");
		sb.Append("@\x3@\x3@\x5@\x4FD\n@\x3@\x3@\x5@\x501\n@\x3@\a@\x504\n@\f@");
		sb.Append("\xE@\x507\v@\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41");
		sb.Append("\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x514\n\x41\x3\x41\x3\x41");
		sb.Append("\x5\x41\x518\n\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41");
		sb.Append("\x3\x41\x5\x41\x521\n\x41\x3\x41\x3\x41\x5\x41\x525\n\x41\x3");
		sb.Append("\x41\x5\x41\x528\n\x41\x3\x42\x3\x42\x5\x42\x52C\n\x42\x3\x42");
		sb.Append("\x3\x42\x5\x42\x530\n\x42\x3\x42\x5\x42\x533\n\x42\a\x42\x535");
		sb.Append("\n\x42\f\x42\xE\x42\x538\v\x42\x3\x42\x5\x42\x53B\n\x42\x3\x42");
		sb.Append("\x5\x42\x53E\n\x42\x3\x42\x3\x42\x5\x42\x542\n\x42\x3\x42\x5");
		sb.Append("\x42\x545\n\x42\x6\x42\x547\n\x42\r\x42\xE\x42\x548\x5\x42\x54B");
		sb.Append("\n\x42\x3\x43\x3\x43\x3\x43\x5\x43\x550\n\x43\x3\x43\x3\x43");
		sb.Append("\x5\x43\x554\n\x43\x3\x43\x3\x43\x5\x43\x558\n\x43\x3\x43\x3");
		sb.Append("\x43\x5\x43\x55C\n\x43\x5\x43\x55E\n\x43\x3\x44\x3\x44\x3\x44");
		sb.Append("\x3\x44\x5\x44\x564\n\x44\x3\x44\x3\x44\x5\x44\x568\n\x44\x3");
		sb.Append("\x44\x5\x44\x56B\n\x44\x3\x45\x3\x45\x3\x45\x5\x45\x570\n\x45");
		sb.Append("\x3\x45\x3\x45\x5\x45\x574\n\x45\x3\x45\x3\x45\x3\x45\x3\x45");
		sb.Append("\x5\x45\x57A\n\x45\x3\x45\x5\x45\x57D\n\x45\x3\x45\x5\x45\x580");
		sb.Append("\n\x45\x3\x45\x3\x45\x5\x45\x584\n\x45\x3\x45\x6\x45\x587\n");
		sb.Append("\x45\r\x45\xE\x45\x588\x3\x45\x3\x45\x6\x45\x58D\n\x45\r\x45");
		sb.Append("\xE\x45\x58E\x5\x45\x591\n\x45\x3\x45\x3\x45\x3\x46\x3\x46\x3");
		sb.Append("\x46\x5\x46\x598\n\x46\x3\x46\x3\x46\x5\x46\x59C\n\x46\x3\x46");
		sb.Append("\x3\x46\x3\x46\x3\x46\x5\x46\x5A2\n\x46\x3\x46\x5\x46\x5A5\n");
		sb.Append("\x46\x3\x46\x6\x46\x5A8\n\x46\r\x46\xE\x46\x5A9\x3\x46\x3\x46");
		sb.Append("\x6\x46\x5AE\n\x46\r\x46\xE\x46\x5AF\x5\x46\x5B2\n\x46\x3\x46");
		sb.Append("\x3\x46\x3G\x3G\x3G\x5G\x5B9\nG\x3G\x3G\x5G\x5BD\nG\x3G\x3G");
		sb.Append("\x3G\x3G\x5G\x5C3\nG\x3G\x5G\x5C6\nG\x3G\x6G\x5C9\nG\rG\xEG");
		sb.Append("\x5CA\x3G\x3G\x6G\x5CF\nG\rG\xEG\x5D0\x5G\x5D3\nG\x3G\x3G\x3");
		sb.Append("H\x3H\x3H\x3H\x5H\x5DB\nH\x3H\x3H\x5H\x5DF\nH\x3H\x5H\x5E2\n");
		sb.Append("H\x3H\x5H\x5E5\nH\x3H\x3H\x5H\x5E9\nH\x3H\x3H\x3I\x3I\x3I\x3");
		sb.Append("I\x5I\x5F1\nI\x3I\x3I\x5I\x5F5\nI\x3I\x3I\x5I\x5F9\nI\x5I\x5FB");
		sb.Append("\nI\x3I\x5I\x5FE\nI\x3J\x3J\x3J\x5J\x603\nJ\x3K\x3K\x3K\x3K");
		sb.Append("\x5K\x609\nK\x3K\x3K\x5K\x60D\nK\x3K\x3K\x5K\x611\nK\x3K\aK");
		sb.Append("\x614\nK\fK\xEK\x617\vK\x3L\x3L\x5L\x61B\nL\x3L\x3L\x5L\x61F");
		sb.Append("\nL\x3L\x3L\x5L\x623\nL\x3L\x3L\x3L\x5L\x628\nL\x3M\x3M\x3N");
		sb.Append("\x3N\x3N\x3N\x5N\x630\nN\x5N\x632\nN\x3O\x3O\x3P\x3P\x3P\x3");
		sb.Append("P\x3Q\x3Q\x3Q\x3Q\x5Q\x63E\nQ\x3Q\x3Q\x5Q\x642\nQ\x3Q\x3Q\x3");
		sb.Append("R\x3R\x3R\x3R\x5R\x64A\nR\x3R\x3R\x5R\x64E\nR\x3R\x3R\x3S\x3");
		sb.Append("S\x3S\x3S\x5S\x656\nS\x3S\x3S\x5S\x65A\nS\x3S\x3S\x5S\x65E\n");
		sb.Append("S\x3S\x3S\x5S\x662\nS\x3S\x3S\x5S\x666\nS\x3S\x3S\x5S\x66A\n");
		sb.Append("S\x3S\x3S\x3T\x3T\x3T\x3T\x5T\x672\nT\x3T\x3T\x5T\x676\nT\x3");
		sb.Append("T\x3T\x3U\x3U\x3U\x3U\x3U\x3U\x6U\x680\nU\rU\xEU\x681\x3U\a");
		sb.Append("U\x685\nU\fU\xEU\x688\vU\x3U\x5U\x68B\nU\x3U\x3U\x3V\x3V\x3");
		sb.Append("V\x3V\x5V\x693\nV\x3V\x5V\x696\nV\x3V\aV\x699\nV\fV\xEV\x69C");
		sb.Append("\vV\x3V\x6V\x69F\nV\rV\xEV\x6A0\x5V\x6A3\nV\x3V\x3V\x6V\x6A7");
		sb.Append("\nV\rV\xEV\x6A8\x5V\x6AB\nV\x3W\x3W\x3W\x5W\x6B0\nW\x3W\x3W");
		sb.Append("\x5W\x6B4\nW\x3W\x3W\x3W\x3W\x5W\x6BA\nW\x3W\x3W\x5W\x6BE\n");
		sb.Append("W\x3W\aW\x6C1\nW\fW\xEW\x6C4\vW\x3W\x3W\x3W\x3W\x3W\x3W\x5W");
		sb.Append("\x6CC\nW\x3W\x3W\x5W\x6D0\nW\x3W\aW\x6D3\nW\fW\xEW\x6D6\vW\x5");
		sb.Append("W\x6D8\nW\x3X\x3X\x3X\x3X\x5X\x6DE\nX\x3X\x3X\x5X\x6E2\nX\x3");
		sb.Append("X\x5X\x6E5\nX\x3Y\x3Y\x3Y\x3Y\x5Y\x6EB\nY\x3Y\x3Y\x5Y\x6EF\n");
		sb.Append("Y\x3Y\x3Y\x3Z\x3Z\x3Z\x3Z\x5Z\x6F7\nZ\x3Z\x3Z\x5Z\x6FB\nZ\x3");
		sb.Append("Z\x3Z\x3[\x3[\x3\\\x3\\\x3\\\x5\\\x704\n\\\x3\\\x3\\\x5\\\x708");
		sb.Append("\n\\\x3\\\x3\\\x3\\\x3\\\x5\\\x70E\n\\\x3\\\x5\\\x711\n\\\x3");
		sb.Append("\\\x6\\\x714\n\\\r\\\xE\\\x715\x3\\\x3\\\x6\\\x71A\n\\\r\\\xE");
		sb.Append("\\\x71B\x5\\\x71E\n\\\x3\\\x3\\\x3]\x3]\x5]\x724\n]\x3]\x3]");
		sb.Append("\x5]\x728\n]\x3]\x3]\x3^\x3^\x3^\x5^\x72F\n^\x3^\x3^\x3^\x3");
		sb.Append("^\x6^\x735\n^\r^\xE^\x736\x3^\a^\x73A\n^\f^\xE^\x73D\v^\x3^");
		sb.Append("\x3^\x3_\x3_\x5_\x743\n_\x3_\x3_\x5_\x747\n_\x3_\x5_\x74A\n");
		sb.Append("_\x3_\x5_\x74D\n_\x3_\x5_\x750\n_\x3_\x3_\x5_\x754\n_\x3_\x6");
		sb.Append("_\x757\n_\r_\xE_\x758\x3`\x3`\x3`\x3`\x3`\x3`\x3`\x5`\x762\n");
		sb.Append("`\x3\x61\x3\x61\x3\x61\x3\x61\x3\x62\x3\x62\x3\x62\x3\x62\x5");
		sb.Append("\x62\x76C\n\x62\x3\x62\x3\x62\x5\x62\x770\n\x62\x3\x62\x3\x62");
		sb.Append("\x3\x62\x3\x62\x3\x62\x5\x62\x777\n\x62\x5\x62\x779\n\x62\x3");
		sb.Append("\x63\x3\x63\x3\x63\x3\x63\x3\x63\x5\x63\x780\n\x63\x3\x63\x3");
		sb.Append("\x63\x5\x63\x784\n\x63\x3\x63\x3\x63\x5\x63\x788\n\x63\x3\x63");
		sb.Append("\a\x63\x78B\n\x63\f\x63\xE\x63\x78E\v\x63\x3\x63\x3\x63\x3\x63");
		sb.Append("\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3");
		sb.Append("\x63\x5\x63\x79C\n\x63\x3\x63\x3\x63\x5\x63\x7A0\n\x63\x3\x63");
		sb.Append("\x3\x63\x3\x63\x3\x63\x5\x63\x7A6\n\x63\x3\x63\x3\x63\x3\x63");
		sb.Append("\x5\x63\x7AB\n\x63\x3\x63\x3\x63\x3\x63\x3\x63\x5\x63\x7B1\n");
		sb.Append("\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63");
		sb.Append("\x3\x63\x3\x63\x3\x63\x3\x63\x5\x63\x7BF\n\x63\x3\x63\x3\x63");
		sb.Append("\x5\x63\x7C3\n\x63\x3\x63\x3\x63\x3\x63\x5\x63\x7C8\n\x63\x3");
		sb.Append("\x63\x3\x63\x5\x63\x7CC\n\x63\x3\x63\x3\x63\x3\x63\x5\x63\x7D1");
		sb.Append("\n\x63\x3\x63\x3\x63\x5\x63\x7D5\n\x63\x3\x63\x3\x63\x3\x63");
		sb.Append("\x5\x63\x7DA\n\x63\x3\x63\x3\x63\x5\x63\x7DE\n\x63\x3\x63\x3");
		sb.Append("\x63\x3\x63\x5\x63\x7E3\n\x63\x3\x63\x3\x63\x5\x63\x7E7\n\x63");
		sb.Append("\x3\x63\x3\x63\x3\x63\x5\x63\x7EC\n\x63\x3\x63\x3\x63\x5\x63");
		sb.Append("\x7F0\n\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63");
		sb.Append("\x3\x63\x5\x63\x7FA\n\x63\x3\x63\x3\x63\x5\x63\x7FE\n\x63\x3");
		sb.Append("\x63\x3\x63\x3\x63\x5\x63\x803\n\x63\x3\x63\x3\x63\x5\x63\x807");
		sb.Append("\n\x63\x3\x63\x3\x63\x3\x63\x5\x63\x80C\n\x63\x3\x63\x3\x63");
		sb.Append("\x5\x63\x810\n\x63\x3\x63\x3\x63\x3\x63\x5\x63\x815\n\x63\x3");
		sb.Append("\x63\x3\x63\x5\x63\x819\n\x63\x3\x63\x3\x63\x3\x63\x5\x63\x81E");
		sb.Append("\n\x63\x3\x63\x3\x63\x5\x63\x822\n\x63\x3\x63\x3\x63\x3\x63");
		sb.Append("\x5\x63\x827\n\x63\x3\x63\x3\x63\x5\x63\x82B\n\x63\x3\x63\x3");
		sb.Append("\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63");
		sb.Append("\x3\x63\x3\x63\x3\x63\x5\x63\x83A\n\x63\x3\x63\x3\x63\x5\x63");
		sb.Append("\x83E\n\x63\x3\x63\x3\x63\x3\x63\x5\x63\x843\n\x63\x3\x63\x3");
		sb.Append("\x63\x5\x63\x847\n\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3\x63\x3");
		sb.Append("\x63\a\x63\x84F\n\x63\f\x63\xE\x63\x852\v\x63\x3\x64\x3\x64");
		sb.Append("\x3\x64\x5\x64\x857\n\x64\x3\x64\x3\x64\x3\x64\x5\x64\x85C\n");
		sb.Append("\x64\x3\x64\x3\x64\x3\x65\x3\x65\x5\x65\x862\n\x65\x3\x65\x3");
		sb.Append("\x65\x5\x65\x866\n\x65\x3\x65\a\x65\x869\n\x65\f\x65\xE\x65");
		sb.Append("\x86C\v\x65\x3\x66\x3\x66\x5\x66\x870\n\x66\x3\x66\x3\x66\x5");
		sb.Append("\x66\x874\n\x66\x3\x66\x3\x66\x5\x66\x878\n\x66\x5\x66\x87A");
		sb.Append("\n\x66\x3\x66\x3\x66\x5\x66\x87E\n\x66\x5\x66\x880\n\x66\x3");
		sb.Append("\x66\x5\x66\x883\n\x66\x3\x66\x3\x66\x5\x66\x887\n\x66\x3g\x3");
		sb.Append("g\x3g\x3g\x6g\x88D\ng\rg\xEg\x88E\x3g\x3g\x3g\ag\x894\ng\fg");
		sb.Append("\xEg\x897\vg\x3g\x3g\x3h\x3h\x3h\x3h\x5h\x89F\nh\x3h\x3h\x5");
		sb.Append("h\x8A3\nh\x3h\x3h\x3i\x3i\x3i\x3i\x6i\x8AB\ni\ri\xEi\x8AC\x3");
		sb.Append("i\x3i\x6i\x8B1\ni\ri\xEi\x8B2\x5i\x8B5\ni\x3i\x3i\x3j\x3j\x3");
		sb.Append("j\x3j\x5j\x8BD\nj\x3j\x3j\x5j\x8C1\nj\x3j\x5j\x8C4\nj\x3k\x3");
		sb.Append("k\x5k\x8C8\nk\x3l\x3l\x3l\x3l\x5l\x8CE\nl\x3l\x5l\x8D1\nl\x3");
		sb.Append("l\x3l\x5l\x8D5\nl\x3l\x3l\x5l\x8D9\nl\x3l\x3l\x5l\x8DD\nl\x3");
		sb.Append("m\x3m\x3m\x5m\x8E2\nm\x3m\x3m\x3m\x5m\x8E7\nm\x3m\x5m\x8EA\n");
		sb.Append("m\x3m\x3m\x5m\x8EE\nm\x3m\x3m\x5m\x8F2\nm\x3m\x3m\x5m\x8F6\n");
		sb.Append("m\x3n\x3n\x5n\x8FA\nn\x3o\x3o\x3o\x5o\x8FF\no\x3p\x5p\x902\n");
		sb.Append("p\x3p\x3p\x3p\x5p\x907\np\x3p\x3p\x5p\x90B\np\x3p\x5p\x90E\n");
		sb.Append("p\x3q\x3q\x3q\x3q\x5q\x914\nq\x3r\x3r\x5r\x918\nr\x3r\x5r\x91B");
		sb.Append("\nr\x3s\x3s\x5s\x91F\ns\x3s\x5s\x922\ns\x3s\x5s\x925\ns\x3s");
		sb.Append("\x3s\x5s\x929\ns\x3s\x3s\x5s\x92D\ns\x5s\x92F\ns\x3s\x3s\x5");
		sb.Append("s\x933\ns\x3t\x3t\x5t\x937\nt\x3t\x6t\x93A\nt\rt\xEt\x93B\x3");
		sb.Append("t\x5t\x93F\nt\x3u\x3u\x3u\x5u\x944\nu\x3v\x3v\x3w\x5w\x949\n");
		sb.Append("w\x3w\x5w\x94C\nw\x3w\x3w\x5w\x950\nw\aw\x952\nw\fw\xEw\x955");
		sb.Append("\vw\x3w\x3w\x5w\x959\nw\x3w\x3w\x5w\x95D\nw\x3w\x5w\x960\nw");
		sb.Append("\aw\x962\nw\fw\xEw\x965\vw\x3x\x3x\x5x\x969\nx\x3x\x3x\x3y\x3");
		sb.Append("y\x3y\x5y\x970\ny\x3z\x3z\x5z\x974\nz\x3z\x3z\x5z\x978\nz\x3");
		sb.Append("z\x3z\x5z\x97C\nz\x3z\az\x97F\nz\fz\xEz\x982\vz\x5z\x984\nz");
		sb.Append("\x3z\x5z\x987\nz\x3z\x3z\x3{\x3{\x5{\x98D\n{\x3{\x3{\x5{\x991");
		sb.Append("\n{\x3{\x3{\x5{\x995\n{\x3{\x3{\x5{\x999\n{\x3{\x3{\x5{\x99D");
		sb.Append("\n{\x3{\x5{\x9A0\n{\x3{\x3{\x5{\x9A4\n{\x3{\x5{\x9A7\n{\x3{");
		sb.Append("\x5{\x9AA\n{\x3|\x3|\x5|\x9AE\n|\x3|\x3|\x5|\x9B2\n|\x3}\x3");
		sb.Append("}\x5}\x9B6\n}\x3}\x3}\x5}\x9BA\n}\x3}\a}\x9BD\n}\f}\xE}\x9C0");
		sb.Append("\v}\x3~\x3~\x3~\x3~\x3~\x5~\x9C7\n~\x3~\x3~\x3\x7F\x3\x7F\x6");
		sb.Append("\x7F\x9CD\n\x7F\r\x7F\xE\x7F\x9CE\x3\x7F\x3\x7F\x3\x7F\x6\x7F");
		sb.Append("\x9D4\n\x7F\r\x7F\xE\x7F\x9D5\x3\x7F\x5\x7F\x9D9\n\x7F\x3\x80");
		sb.Append("\x3\x80\x3\x80\x3\x80\x5\x80\x9DF\n\x80\x3\x80\x3\x80\x3\x80");
		sb.Append("\x5\x80\x9E4\n\x80\x3\x81\x3\x81\x3\x82\x3\x82\x3\x82\a\x82");
		sb.Append("\x9EB\n\x82\f\x82\xE\x82\x9EE\v\x82\x3\x82\x3\x82\x3\x82\x6");
		sb.Append("\x82\x9F3\n\x82\r\x82\xE\x82\x9F4\x5\x82\x9F7\n\x82\x3\x83\x3");
		sb.Append("\x83\x3\x84\x3\x84\x3\x84\a\x84\x9FE\n\x84\f\x84\xE\x84\xA01");
		sb.Append("\v\x84\x3\x85\x3\x85\x5\x85\xA05\n\x85\x3\x85\x3\x85\x5\x85");
		sb.Append("\xA09\n\x85\x3\x86\x3\x86\x5\x86\xA0D\n\x86\x3\x86\x3\x86\x5");
		sb.Append("\x86\xA11\n\x86\x3\x86\x5\x86\xA14\n\x86\x3\x87\x3\x87\x3\x87");
		sb.Append("\x3\x88\x3\x88\x3\x89\x3\x89\x5\x89\xA1D\n\x89\x3\x89\x5\x89");
		sb.Append("\xA20\n\x89\x3\x89\x3\x89\x5\x89\xA24\n\x89\x3\x89\x5\x89\xA27");
		sb.Append("\n\x89\x3\x8A\x3\x8A\x3\x8B\x3\x8B\x3\x8C\x3\x8C\x3\x8C\x2\x3");
		sb.Append("\xC4\x8D\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E ");
		sb.Append("\"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62");
		sb.Append("\x64\x66hjlnprtvxz|~\x80\x82\x84\x86\x88\x8A\x8C\x8E\x90\x92");
		sb.Append("\x94\x96\x98\x9A\x9C\x9E\xA0\xA2\xA4\xA6\xA8\xAA\xAC\xAE\xB0");
		sb.Append("\xB2\xB4\xB6\xB8\xBA\xBC\xBE\xC0\xC2\xC4\xC6\xC8\xCA\xCC\xCE");
		sb.Append("\xD0\xD2\xD4\xD6\xD8\xDA\xDC\xDE\xE0\xE2\xE4\xE6\xE8\xEA\xEC");
		sb.Append("\xEE\xF0\xF2\xF4\xF6\xF8\xFA\xFC\xFE\x100\x102\x104\x106\x108");
		sb.Append("\x10A\x10C\x10E\x110\x112\x114\x116\x2\x14\x4\x2\r\r\x9D\x9D");
		sb.Append("\x3\x2\x1C\'\x4\x2\xA6\xA6\xAA\xAA\x3\x2=\x41\x5\x2\xB8\xB8");
		sb.Append("\xC1\xC1\xC6\xC6\a\x2\t\t\r\rOOww\x81\x81\x4\x2\x84\x85\xAE");
		sb.Append("\xAE\x4\x2\\^\x94\x94\x4\x2\xB4\xB4\xC9\xC9\x4\x2\x96\x96\x9C");
		sb.Append("\x9C\x4\x2\xF\x10xx\x3\x2\xF\x10\f\x2\xE\xE\x11\x11\x18\x18");
		sb.Append("\x1A\x1A++QQUU\x95\x95\x9A\x9A\xA7\xA7\t\x2PPZZ\xB8\xB8\xBA");
		sb.Append("\xBB\xBD\xBD\xBF\xBF\xC3\xC3\x6\x2\x42\x42lm\xA1\xA1\xCC\xD1");
		sb.Append("\b\x2\xB0\xB0\xB2\xB2\xB6\xB6\xB9\xB9\xBC\xBC\xC4\xC4\x6\x2");
		sb.Append("\x44\x44HH{{\x7F\x7F\v\x2\x3.\x37<\x42Z__\x64npqv{\x7F\x84\x86");
		sb.Append("\xAF\xBCB\x2\x118\x3\x2\x2\x2\x4\x11C\x3\x2\x2\x2\x6\x153\x3");
		sb.Append("\x2\x2\x2\b\x159\x3\x2\x2\x2\n\x16A\x3\x2\x2\x2\f\x17B\x3\x2");
		sb.Append("\x2\x2\xE\x185\x3\x2\x2\x2\x10\x191\x3\x2\x2\x2\x12\x193\x3");
		sb.Append("\x2\x2\x2\x14\x1AA\x3\x2\x2\x2\x16\x1AC\x3\x2\x2\x2\x18\x1AE");
		sb.Append("\x3\x2\x2\x2\x1A\x1C6\x3\x2\x2\x2\x1C\x218\x3\x2\x2\x2\x1E\x21A");
		sb.Append("\x3\x2\x2\x2 \x227\x3\x2\x2\x2\"\x229\x3\x2\x2\x2$\x22D\x3\x2");
		sb.Append("\x2\x2&\x231\x3\x2\x2\x2(\x246\x3\x2\x2\x2*\x258\x3\x2\x2\x2");
		sb.Append(",\x269\x3\x2\x2\x2.\x276\x3\x2\x2\x2\x30\x29A\x3\x2\x2\x2\x32");
		sb.Append("\x2AA\x3\x2\x2\x2\x34\x2F4\x3\x2\x2\x2\x36\x2F6\x3\x2\x2\x2");
		sb.Append("\x38\x2FB\x3\x2\x2\x2:\x30D\x3\x2\x2\x2<\x31D\x3\x2\x2\x2>\x32D");
		sb.Append("\x3\x2\x2\x2@\x334\x3\x2\x2\x2\x42\x33E\x3\x2\x2\x2\x44\x340");
		sb.Append("\x3\x2\x2\x2\x46\x34C\x3\x2\x2\x2H\x36A\x3\x2\x2\x2J\x39B\x3");
		sb.Append("\x2\x2\x2L\x3BD\x3\x2\x2\x2N\x3D3\x3\x2\x2\x2P\x3D7\x3\x2\x2");
		sb.Append("\x2R\x3F4\x3\x2\x2\x2T\x3F6\x3\x2\x2\x2V\x408\x3\x2\x2\x2X\x40A");
		sb.Append("\x3\x2\x2\x2Z\x41C\x3\x2\x2\x2\\\x42A\x3\x2\x2\x2^\x42E\x3\x2");
		sb.Append("\x2\x2`\x43D\x3\x2\x2\x2\x62\x443\x3\x2\x2\x2\x64\x44F\x3\x2");
		sb.Append("\x2\x2\x66\x45B\x3\x2\x2\x2h\x45F\x3\x2\x2\x2j\x472\x3\x2\x2");
		sb.Append("\x2l\x47E\x3\x2\x2\x2n\x48A\x3\x2\x2\x2p\x49C\x3\x2\x2\x2r\x4AE");
		sb.Append("\x3\x2\x2\x2t\x4BC\x3\x2\x2\x2v\x4CA\x3\x2\x2\x2x\x4CE\x3\x2");
		sb.Append("\x2\x2z\x4D6\x3\x2\x2\x2|\x4E0\x3\x2\x2\x2~\x4F4\x3\x2\x2\x2");
		sb.Append("\x80\x508\x3\x2\x2\x2\x82\x54A\x3\x2\x2\x2\x84\x55D\x3\x2\x2");
		sb.Append("\x2\x86\x55F\x3\x2\x2\x2\x88\x56F\x3\x2\x2\x2\x8A\x597\x3\x2");
		sb.Append("\x2\x2\x8C\x5B8\x3\x2\x2\x2\x8E\x5D6\x3\x2\x2\x2\x90\x5EC\x3");
		sb.Append("\x2\x2\x2\x92\x5FF\x3\x2\x2\x2\x94\x604\x3\x2\x2\x2\x96\x618");
		sb.Append("\x3\x2\x2\x2\x98\x629\x3\x2\x2\x2\x9A\x62B\x3\x2\x2\x2\x9C\x633");
		sb.Append("\x3\x2\x2\x2\x9E\x635\x3\x2\x2\x2\xA0\x639\x3\x2\x2\x2\xA2\x645");
		sb.Append("\x3\x2\x2\x2\xA4\x651\x3\x2\x2\x2\xA6\x66D\x3\x2\x2\x2\xA8\x679");
		sb.Append("\x3\x2\x2\x2\xAA\x68E\x3\x2\x2\x2\xAC\x6D7\x3\x2\x2\x2\xAE\x6D9");
		sb.Append("\x3\x2\x2\x2\xB0\x6E6\x3\x2\x2\x2\xB2\x6F2\x3\x2\x2\x2\xB4\x6FE");
		sb.Append("\x3\x2\x2\x2\xB6\x703\x3\x2\x2\x2\xB8\x721\x3\x2\x2\x2\xBA\x72E");
		sb.Append("\x3\x2\x2\x2\xBC\x740\x3\x2\x2\x2\xBE\x75A\x3\x2\x2\x2\xC0\x763");
		sb.Append("\x3\x2\x2\x2\xC2\x767\x3\x2\x2\x2\xC4\x7B0\x3\x2\x2\x2\xC6\x856");
		sb.Append("\x3\x2\x2\x2\xC8\x85F\x3\x2\x2\x2\xCA\x86D\x3\x2\x2\x2\xCC\x888");
		sb.Append("\x3\x2\x2\x2\xCE\x89A\x3\x2\x2\x2\xD0\x8A6\x3\x2\x2\x2\xD2\x8B8");
		sb.Append("\x3\x2\x2\x2\xD4\x8C7\x3\x2\x2\x2\xD6\x8C9\x3\x2\x2\x2\xD8\x8DE");
		sb.Append("\x3\x2\x2\x2\xDA\x8F9\x3\x2\x2\x2\xDC\x8FB\x3\x2\x2\x2\xDE\x901");
		sb.Append("\x3\x2\x2\x2\xE0\x913\x3\x2\x2\x2\xE2\x915\x3\x2\x2\x2\xE4\x91E");
		sb.Append("\x3\x2\x2\x2\xE6\x936\x3\x2\x2\x2\xE8\x940\x3\x2\x2\x2\xEA\x945");
		sb.Append("\x3\x2\x2\x2\xEC\x953\x3\x2\x2\x2\xEE\x968\x3\x2\x2\x2\xF0\x96C");
		sb.Append("\x3\x2\x2\x2\xF2\x971\x3\x2\x2\x2\xF4\x98C\x3\x2\x2\x2\xF6\x9AB");
		sb.Append("\x3\x2\x2\x2\xF8\x9B3\x3\x2\x2\x2\xFA\x9C6\x3\x2\x2\x2\xFC\x9D8");
		sb.Append("\x3\x2\x2\x2\xFE\x9DA\x3\x2\x2\x2\x100\x9E5\x3\x2\x2\x2\x102");
		sb.Append("\x9F6\x3\x2\x2\x2\x104\x9F8\x3\x2\x2\x2\x106\x9FA\x3\x2\x2\x2");
		sb.Append("\x108\xA02\x3\x2\x2\x2\x10A\xA0A\x3\x2\x2\x2\x10C\xA15\x3\x2");
		sb.Append("\x2\x2\x10E\xA18\x3\x2\x2\x2\x110\xA1C\x3\x2\x2\x2\x112\xA28");
		sb.Append("\x3\x2\x2\x2\x114\xA2A\x3\x2\x2\x2\x116\xA2C\x3\x2\x2\x2\x118");
		sb.Append("\x119\x5\x4\x3\x2\x119\x11A\a\x2\x2\x3\x11A\x3\x3\x2\x2\x2\x11B");
		sb.Append("\x11D\a\xD6\x2\x2\x11C\x11B\x3\x2\x2\x2\x11C\x11D\x3\x2\x2\x2");
		sb.Append("\x11D\x121\x3\x2\x2\x2\x11E\x120\a\xD4\x2\x2\x11F\x11E\x3\x2");
		sb.Append("\x2\x2\x120\x123\x3\x2\x2\x2\x121\x11F\x3\x2\x2\x2\x121\x122");
		sb.Append("\x3\x2\x2\x2\x122\x12A\x3\x2\x2\x2\x123\x121\x3\x2\x2\x2\x124");
		sb.Append("\x126\x5\x6\x4\x2\x125\x127\a\xD4\x2\x2\x126\x125\x3\x2\x2\x2");
		sb.Append("\x127\x128\x3\x2\x2\x2\x128\x126\x3\x2\x2\x2\x128\x129\x3\x2");
		sb.Append("\x2\x2\x129\x12B\x3\x2\x2\x2\x12A\x124\x3\x2\x2\x2\x12A\x12B");
		sb.Append("\x3\x2\x2\x2\x12B\x12D\x3\x2\x2\x2\x12C\x12E\x5\b\x5\x2\x12D");
		sb.Append("\x12C\x3\x2\x2\x2\x12D\x12E\x3\x2\x2\x2\x12E\x132\x3\x2\x2\x2");
		sb.Append("\x12F\x131\a\xD4\x2\x2\x130\x12F\x3\x2\x2\x2\x131\x134\x3\x2");
		sb.Append("\x2\x2\x132\x130\x3\x2\x2\x2\x132\x133\x3\x2\x2\x2\x133\x136");
		sb.Append("\x3\x2\x2\x2\x134\x132\x3\x2\x2\x2\x135\x137\x5\f\a\x2\x136");
		sb.Append("\x135\x3\x2\x2\x2\x136\x137\x3\x2\x2\x2\x137\x13B\x3\x2\x2\x2");
		sb.Append("\x138\x13A\a\xD4\x2\x2\x139\x138\x3\x2\x2\x2\x13A\x13D\x3\x2");
		sb.Append("\x2\x2\x13B\x139\x3\x2\x2\x2\x13B\x13C\x3\x2\x2\x2\x13C\x13F");
		sb.Append("\x3\x2\x2\x2\x13D\x13B\x3\x2\x2\x2\x13E\x140\x5\xE\b\x2\x13F");
		sb.Append("\x13E\x3\x2\x2\x2\x13F\x140\x3\x2\x2\x2\x140\x144\x3\x2\x2\x2");
		sb.Append("\x141\x143\a\xD4\x2\x2\x142\x141\x3\x2\x2\x2\x143\x146\x3\x2");
		sb.Append("\x2\x2\x144\x142\x3\x2\x2\x2\x144\x145\x3\x2\x2\x2\x145\x148");
		sb.Append("\x3\x2\x2\x2\x146\x144\x3\x2\x2\x2\x147\x149\x5\x12\n\x2\x148");
		sb.Append("\x147\x3\x2\x2\x2\x148\x149\x3\x2\x2\x2\x149\x14D\x3\x2\x2\x2");
		sb.Append("\x14A\x14C\a\xD4\x2\x2\x14B\x14A\x3\x2\x2\x2\x14C\x14F\x3\x2");
		sb.Append("\x2\x2\x14D\x14B\x3\x2\x2\x2\x14D\x14E\x3\x2\x2\x2\x14E\x151");
		sb.Append("\x3\x2\x2\x2\x14F\x14D\x3\x2\x2\x2\x150\x152\a\xD6\x2\x2\x151");
		sb.Append("\x150\x3\x2\x2\x2\x151\x152\x3\x2\x2\x2\x152\x5\x3\x2\x2\x2");
		sb.Append("\x153\x154\a\xA8\x2\x2\x154\x155\a\xD6\x2\x2\x155\x156\a\xD0");
		sb.Append("\x2\x2\x156\x157\a\xD6\x2\x2\x157\x158\a\x16\x2\x2\x158\a\x3");
		sb.Append("\x2\x2\x2\x159\x15B\a\v\x2\x2\x15A\x15C\a\xD4\x2\x2\x15B\x15A");
		sb.Append("\x3\x2\x2\x2\x15C\x15D\x3\x2\x2\x2\x15D\x15B\x3\x2\x2\x2\x15D");
		sb.Append("\x15E\x3\x2\x2\x2\x15E\x160\x3\x2\x2\x2\x15F\x161\x5\n\x6\x2");
		sb.Append("\x160\x15F\x3\x2\x2\x2\x161\x162\x3\x2\x2\x2\x162\x160\x3\x2");
		sb.Append("\x2\x2\x162\x163\x3\x2\x2\x2\x163\x164\x3\x2\x2\x2\x164\x166");
		sb.Append("\a\x37\x2\x2\x165\x167\a\xD4\x2\x2\x166\x165\x3\x2\x2\x2\x167");
		sb.Append("\x168\x3\x2\x2\x2\x168\x166\x3\x2\x2\x2\x168\x169\x3\x2\x2\x2");
		sb.Append("\x169\t\x3\x2\x2\x2\x16A\x16C\x5\xFC\x7F\x2\x16B\x16D\a\xD6");
		sb.Append("\x2\x2\x16C\x16B\x3\x2\x2\x2\x16C\x16D\x3\x2\x2\x2\x16D\x16E");
		sb.Append("\x3\x2\x2\x2\x16E\x170\a\xB8\x2\x2\x16F\x171\a\xD6\x2\x2\x170");
		sb.Append("\x16F\x3\x2\x2\x2\x170\x171\x3\x2\x2\x2\x171\x172\x3\x2\x2\x2");
		sb.Append("\x172\x173\x5\x10E\x88\x2\x173\x174\a\xD4\x2\x2\x174\v\x3\x2");
		sb.Append("\x2\x2\x175\x177\x5\x18\r\x2\x176\x178\a\xD4\x2\x2\x177\x176");
		sb.Append("\x3\x2\x2\x2\x178\x179\x3\x2\x2\x2\x179\x177\x3\x2\x2\x2\x179");
		sb.Append("\x17A\x3\x2\x2\x2\x17A\x17C\x3\x2\x2\x2\x17B\x175\x3\x2\x2\x2");
		sb.Append("\x17C\x17D\x3\x2\x2\x2\x17D\x17B\x3\x2\x2\x2\x17D\x17E\x3\x2");
		sb.Append("\x2\x2\x17E\r\x3\x2\x2\x2\x17F\x181\x5\x10\t\x2\x180\x182\a");
		sb.Append("\xD4\x2\x2\x181\x180\x3\x2\x2\x2\x182\x183\x3\x2\x2\x2\x183");
		sb.Append("\x181\x3\x2\x2\x2\x183\x184\x3\x2\x2\x2\x184\x186\x3\x2\x2\x2");
		sb.Append("\x185\x17F\x3\x2\x2\x2\x186\x187\x3\x2\x2\x2\x187\x185\x3\x2");
		sb.Append("\x2\x2\x187\x188\x3\x2\x2\x2\x188\xF\x3\x2\x2\x2\x189\x18A\a");
		sb.Append("r\x2\x2\x18A\x18B\a\xD6\x2\x2\x18B\x192\a\xCF\x2\x2\x18C\x18D");
		sb.Append("\at\x2\x2\x18D\x18E\a\xD6\x2\x2\x18E\x192\t\x2\x2\x2\x18F\x192");
		sb.Append("\as\x2\x2\x190\x192\au\x2\x2\x191\x189\x3\x2\x2\x2\x191\x18C");
		sb.Append("\x3\x2\x2\x2\x191\x18F\x3\x2\x2\x2\x191\x190\x3\x2\x2\x2\x192");
		sb.Append("\x11\x3\x2\x2\x2\x193\x19C\x5\x14\v\x2\x194\x196\a\xD4\x2\x2");
		sb.Append("\x195\x194\x3\x2\x2\x2\x196\x197\x3\x2\x2\x2\x197\x195\x3\x2");
		sb.Append("\x2\x2\x197\x198\x3\x2\x2\x2\x198\x199\x3\x2\x2\x2\x199\x19B");
		sb.Append("\x5\x14\v\x2\x19A\x195\x3\x2\x2\x2\x19B\x19E\x3\x2\x2\x2\x19C");
		sb.Append("\x19A\x3\x2\x2\x2\x19C\x19D\x3\x2\x2\x2\x19D\x13\x3\x2\x2\x2");
		sb.Append("\x19E\x19C\x3\x2\x2\x2\x19F\x1AB\x5\x16\f\x2\x1A0\x1AB\x5.\x18");
		sb.Append("\x2\x1A1\x1AB\x5\x38\x1D\x2\x1A2\x1AB\x5@!\x2\x1A3\x1AB\x5J");
		sb.Append("&\x2\x1A4\x1AB\x5l\x37\x2\x1A5\x1AB\x5\x88\x45\x2\x1A6\x1AB");
		sb.Append("\x5\x8A\x46\x2\x1A7\x1AB\x5\x8CG\x2\x1A8\x1AB\x5\xB6\\\x2\x1A9");
		sb.Append("\x1AB\x5\xBA^\x2\x1AA\x19F\x3\x2\x2\x2\x1AA\x1A0\x3\x2\x2\x2");
		sb.Append("\x1AA\x1A1\x3\x2\x2\x2\x1AA\x1A2\x3\x2\x2\x2\x1AA\x1A3\x3\x2");
		sb.Append("\x2\x2\x1AA\x1A4\x3\x2\x2\x2\x1AA\x1A5\x3\x2\x2\x2\x1AA\x1A6");
		sb.Append("\x3\x2\x2\x2\x1AA\x1A7\x3\x2\x2\x2\x1AA\x1A8\x3\x2\x2\x2\x1AA");
		sb.Append("\x1A9\x3\x2\x2\x2\x1AB\x15\x3\x2\x2\x2\x1AC\x1AD\x5\x1A\xE\x2");
		sb.Append("\x1AD\x17\x3\x2\x2\x2\x1AE\x1AF\a\a\x2\x2\x1AF\x1B0\a\xD6\x2");
		sb.Append("\x2\x1B0\x1B2\x5\xE0q\x2\x1B1\x1B3\a\xD6\x2\x2\x1B2\x1B1\x3");
		sb.Append("\x2\x2\x2\x1B2\x1B3\x3\x2\x2\x2\x1B3\x1B4\x3\x2\x2\x2\x1B4\x1B6");
		sb.Append("\a\xB8\x2\x2\x1B5\x1B7\a\xD6\x2\x2\x1B6\x1B5\x3\x2\x2\x2\x1B6");
		sb.Append("\x1B7\x3\x2\x2\x2\x1B7\x1B8\x3\x2\x2\x2\x1B8\x1C3\x5\x10E\x88");
		sb.Append("\x2\x1B9\x1BB\a\xD6\x2\x2\x1BA\x1B9\x3\x2\x2\x2\x1BA\x1BB\x3");
		sb.Append("\x2\x2\x2\x1BB\x1BC\x3\x2\x2\x2\x1BC\x1BE\a\xB4\x2\x2\x1BD\x1BF");
		sb.Append("\a\xD6\x2\x2\x1BE\x1BD\x3\x2\x2\x2\x1BE\x1BF\x3\x2\x2\x2\x1BF");
		sb.Append("\x1C0\x3\x2\x2\x2\x1C0\x1C2\x5\x10E\x88\x2\x1C1\x1BA\x3\x2\x2");
		sb.Append("\x2\x1C2\x1C5\x3\x2\x2\x2\x1C3\x1C1\x3\x2\x2\x2\x1C3\x1C4\x3");
		sb.Append("\x2\x2\x2\x1C4\x19\x3\x2\x2\x2\x1C5\x1C3\x3\x2\x2\x2\x1C6\x1D2");
		sb.Append("\x5\x1C\xF\x2\x1C7\x1C9\a\xD4\x2\x2\x1C8\x1C7\x3\x2\x2\x2\x1C9");
		sb.Append("\x1CA\x3\x2\x2\x2\x1CA\x1C8\x3\x2\x2\x2\x1CA\x1CB\x3\x2\x2\x2");
		sb.Append("\x1CB\x1CD\x3\x2\x2\x2\x1CC\x1CE\a\xD6\x2\x2\x1CD\x1CC\x3\x2");
		sb.Append("\x2\x2\x1CD\x1CE\x3\x2\x2\x2\x1CE\x1CF\x3\x2\x2\x2\x1CF\x1D1");
		sb.Append("\x5\x1C\xF\x2\x1D0\x1C8\x3\x2\x2\x2\x1D1\x1D4\x3\x2\x2\x2\x1D2");
		sb.Append("\x1D0\x3\x2\x2\x2\x1D2\x1D3\x3\x2\x2\x2\x1D3\x1B\x3\x2\x2\x2");
		sb.Append("\x1D4\x1D2\x3\x2\x2\x2\x1D5\x219\x5\x1E\x10\x2\x1D6\x219\x5");
		sb.Append("\x18\r\x2\x1D7\x219\x5 \x11\x2\x1D8\x219\x5\"\x12\x2\x1D9\x219");
		sb.Append("\x5$\x13\x2\x1DA\x219\x5&\x14\x2\x1DB\x219\x5(\x15\x2\x1DC\x219");
		sb.Append("\x5,\x17\x2\x1DD\x219\x5\x32\x1A\x2\x1DE\x219\x5\x30\x19\x2");
		sb.Append("\x1DF\x219\x5\x34\x1B\x2\x1E0\x219\x5\x36\x1C\x2\x1E1\x219\x5");
		sb.Append("<\x1F\x2\x1E2\x219\x5> \x2\x1E3\x219\x5\x42\"\x2\x1E4\x219\x5");
		sb.Append("\xD4k\x2\x1E5\x219\x5\x44#\x2\x1E6\x219\x5\x46$\x2\x1E7\x219");
		sb.Append("\x5H%\x2\x1E8\x219\x5L\'\x2\x1E9\x219\x5N(\x2\x1EA\x219\x5P");
		sb.Append(")\x2\x1EB\x219\x5R*\x2\x1EC\x219\x5\\/\x2\x1ED\x219\x5^\x30");
		sb.Append("\x2\x1EE\x219\x5`\x31\x2\x1EF\x219\x5\x62\x32\x2\x1F0\x219\x5");
		sb.Append("\x64\x33\x2\x1F1\x219\x5\x10C\x87\x2\x1F2\x219\x5\x66\x34\x2");
		sb.Append("\x1F3\x219\x5h\x35\x2\x1F4\x219\x5j\x36\x2\x1F5\x219\x5l\x37");
		sb.Append("\x2\x1F6\x219\x5t;\x2\x1F7\x219\x5v<\x2\x1F8\x219\x5x=\x2\x1F9");
		sb.Append("\x219\x5z>\x2\x1FA\x219\x5|?\x2\x1FB\x219\x5~@\x2\x1FC\x219");
		sb.Append("\x5\x80\x41\x2\x1FD\x219\x5\x86\x44\x2\x1FE\x219\x5\x8EH\x2");
		sb.Append("\x1FF\x219\x5\x90I\x2\x200\x219\x5\x92J\x2\x201\x219\x5\x94");
		sb.Append("K\x2\x202\x219\x5\x98M\x2\x203\x219\x5\x9AN\x2\x204\x219\x5");
		sb.Append("\x9CO\x2\x205\x219\x5\x9EP\x2\x206\x219\x5\xA0Q\x2\x207\x219");
		sb.Append("\x5\xA2R\x2\x208\x219\x5\xA4S\x2\x209\x219\x5\xA6T\x2\x20A\x219");
		sb.Append("\x5\xA8U\x2\x20B\x219\x5\xAEX\x2\x20C\x219\x5\xB0Y\x2\x20D\x219");
		sb.Append("\x5\xB2Z\x2\x20E\x219\x5\xB4[\x2\x20F\x219\x5\xB8]\x2\x210\x219");
		sb.Append("\x5\xC0\x61\x2\x211\x219\x5\xC2\x62\x2\x212\x219\x5\xC6\x64");
		sb.Append("\x2\x213\x219\x5\xCCg\x2\x214\x219\x5\xCEh\x2\x215\x219\x5\xD0");
		sb.Append("i\x2\x216\x219\x5\xD2j\x2\x217\x219\x5\xDAn\x2\x218\x1D5\x3");
		sb.Append("\x2\x2\x2\x218\x1D6\x3\x2\x2\x2\x218\x1D7\x3\x2\x2\x2\x218\x1D8");
		sb.Append("\x3\x2\x2\x2\x218\x1D9\x3\x2\x2\x2\x218\x1DA\x3\x2\x2\x2\x218");
		sb.Append("\x1DB\x3\x2\x2\x2\x218\x1DC\x3\x2\x2\x2\x218\x1DD\x3\x2\x2\x2");
		sb.Append("\x218\x1DE\x3\x2\x2\x2\x218\x1DF\x3\x2\x2\x2\x218\x1E0\x3\x2");
		sb.Append("\x2\x2\x218\x1E1\x3\x2\x2\x2\x218\x1E2\x3\x2\x2\x2\x218\x1E3");
		sb.Append("\x3\x2\x2\x2\x218\x1E4\x3\x2\x2\x2\x218\x1E5\x3\x2\x2\x2\x218");
		sb.Append("\x1E6\x3\x2\x2\x2\x218\x1E7\x3\x2\x2\x2\x218\x1E8\x3\x2\x2\x2");
		sb.Append("\x218\x1E9\x3\x2\x2\x2\x218\x1EA\x3\x2\x2\x2\x218\x1EB\x3\x2");
		sb.Append("\x2\x2\x218\x1EC\x3\x2\x2\x2\x218\x1ED\x3\x2\x2\x2\x218\x1EE");
		sb.Append("\x3\x2\x2\x2\x218\x1EF\x3\x2\x2\x2\x218\x1F0\x3\x2\x2\x2\x218");
		sb.Append("\x1F1\x3\x2\x2\x2\x218\x1F2\x3\x2\x2\x2\x218\x1F3\x3\x2\x2\x2");
		sb.Append("\x218\x1F4\x3\x2\x2\x2\x218\x1F5\x3\x2\x2\x2\x218\x1F6\x3\x2");
		sb.Append("\x2\x2\x218\x1F7\x3\x2\x2\x2\x218\x1F8\x3\x2\x2\x2\x218\x1F9");
		sb.Append("\x3\x2\x2\x2\x218\x1FA\x3\x2\x2\x2\x218\x1FB\x3\x2\x2\x2\x218");
		sb.Append("\x1FC\x3\x2\x2\x2\x218\x1FD\x3\x2\x2\x2\x218\x1FE\x3\x2\x2\x2");
		sb.Append("\x218\x1FF\x3\x2\x2\x2\x218\x200\x3\x2\x2\x2\x218\x201\x3\x2");
		sb.Append("\x2\x2\x218\x202\x3\x2\x2\x2\x218\x203\x3\x2\x2\x2\x218\x204");
		sb.Append("\x3\x2\x2\x2\x218\x205\x3\x2\x2\x2\x218\x206\x3\x2\x2\x2\x218");
		sb.Append("\x207\x3\x2\x2\x2\x218\x208\x3\x2\x2\x2\x218\x209\x3\x2\x2\x2");
		sb.Append("\x218\x20A\x3\x2\x2\x2\x218\x20B\x3\x2\x2\x2\x218\x20C\x3\x2");
		sb.Append("\x2\x2\x218\x20D\x3\x2\x2\x2\x218\x20E\x3\x2\x2\x2\x218\x20F");
		sb.Append("\x3\x2\x2\x2\x218\x210\x3\x2\x2\x2\x218\x211\x3\x2\x2\x2\x218");
		sb.Append("\x212\x3\x2\x2\x2\x218\x213\x3\x2\x2\x2\x218\x214\x3\x2\x2\x2");
		sb.Append("\x218\x215\x3\x2\x2\x2\x218\x216\x3\x2\x2\x2\x218\x217\x3\x2");
		sb.Append("\x2\x2\x219\x1D\x3\x2\x2\x2\x21A\x21B\a\b\x2\x2\x21B\x21C\a");
		sb.Append("\xD6\x2\x2\x21C\x225\x5\xC4\x63\x2\x21D\x21F\a\xD6\x2\x2\x21E");
		sb.Append("\x21D\x3\x2\x2\x2\x21E\x21F\x3\x2\x2\x2\x21F\x220\x3\x2\x2\x2");
		sb.Append("\x220\x222\a\xB4\x2\x2\x221\x223\a\xD6\x2\x2\x222\x221\x3\x2");
		sb.Append("\x2\x2\x222\x223\x3\x2\x2\x2\x223\x224\x3\x2\x2\x2\x224\x226");
		sb.Append("\x5\xC4\x63\x2\x225\x21E\x3\x2\x2\x2\x225\x226\x3\x2\x2\x2\x226");
		sb.Append("\x1F\x3\x2\x2\x2\x227\x228\a\f\x2\x2\x228!\x3\x2\x2\x2\x229");
		sb.Append("\x22A\a\x14\x2\x2\x22A\x22B\a\xD6\x2\x2\x22B\x22C\x5\xC4\x63");
		sb.Append("\x2\x22C#\x3\x2\x2\x2\x22D\x22E\a\x15\x2\x2\x22E\x22F\a\xD6");
		sb.Append("\x2\x2\x22F\x230\x5\xC4\x63\x2\x230%\x3\x2\x2\x2\x231\x241\a");
		sb.Append("\x17\x2\x2\x232\x233\a\xD6\x2\x2\x233\x23E\x5\xC4\x63\x2\x234");
		sb.Append("\x236\a\xD6\x2\x2\x235\x234\x3\x2\x2\x2\x235\x236\x3\x2\x2\x2");
		sb.Append("\x236\x237\x3\x2\x2\x2\x237\x239\a\xB4\x2\x2\x238\x23A\a\xD6");
		sb.Append("\x2\x2\x239\x238\x3\x2\x2\x2\x239\x23A\x3\x2\x2\x2\x23A\x23B");
		sb.Append("\x3\x2\x2\x2\x23B\x23D\x5\xC4\x63\x2\x23C\x235\x3\x2\x2\x2\x23D");
		sb.Append("\x240\x3\x2\x2\x2\x23E\x23C\x3\x2\x2\x2\x23E\x23F\x3\x2\x2\x2");
		sb.Append("\x23F\x242\x3\x2\x2\x2\x240\x23E\x3\x2\x2\x2\x241\x232\x3\x2");
		sb.Append("\x2\x2\x241\x242\x3\x2\x2\x2\x242\'\x3\x2\x2\x2\x243\x244\x5");
		sb.Append("\x114\x8B\x2\x244\x245\a\xD6\x2\x2\x245\x247\x3\x2\x2\x2\x246");
		sb.Append("\x243\x3\x2\x2\x2\x246\x247\x3\x2\x2\x2\x247\x248\x3\x2\x2\x2");
		sb.Append("\x248\x249\a\x19\x2\x2\x249\x24A\a\xD6\x2\x2\x24A\x255\x5*\x16");
		sb.Append("\x2\x24B\x24D\a\xD6\x2\x2\x24C\x24B\x3\x2\x2\x2\x24C\x24D\x3");
		sb.Append("\x2\x2\x2\x24D\x24E\x3\x2\x2\x2\x24E\x250\a\xB4\x2\x2\x24F\x251");
		sb.Append("\a\xD6\x2\x2\x250\x24F\x3\x2\x2\x2\x250\x251\x3\x2\x2\x2\x251");
		sb.Append("\x252\x3\x2\x2\x2\x252\x254\x5*\x16\x2\x253\x24C\x3\x2\x2\x2");
		sb.Append("\x254\x257\x3\x2\x2\x2\x255\x253\x3\x2\x2\x2\x255\x256\x3\x2");
		sb.Append("\x2\x2\x256)\x3\x2\x2\x2\x257\x255\x3\x2\x2\x2\x258\x25A\x5");
		sb.Append("\xFC\x7F\x2\x259\x25B\x5\x112\x8A\x2\x25A\x259\x3\x2\x2\x2\x25A");
		sb.Append("\x25B\x3\x2\x2\x2\x25B\x25E\x3\x2\x2\x2\x25C\x25D\a\xD6\x2\x2");
		sb.Append("\x25D\x25F\x5\xFE\x80\x2\x25E\x25C\x3\x2\x2\x2\x25E\x25F\x3");
		sb.Append("\x2\x2\x2\x25F\x261\x3\x2\x2\x2\x260\x262\a\xD6\x2\x2\x261\x260");
		sb.Append("\x3\x2\x2\x2\x261\x262\x3\x2\x2\x2\x262\x263\x3\x2\x2\x2\x263");
		sb.Append("\x265\a\xB8\x2\x2\x264\x266\a\xD6\x2\x2\x265\x264\x3\x2\x2\x2");
		sb.Append("\x265\x266\x3\x2\x2\x2\x266\x267\x3\x2\x2\x2\x267\x268\x5\xC4");
		sb.Append("\x63\x2\x268+\x3\x2\x2\x2\x269\x26B\a\x1A\x2\x2\x26A\x26C\a");
		sb.Append("\xD6\x2\x2\x26B\x26A\x3\x2\x2\x2\x26B\x26C\x3\x2\x2\x2\x26C");
		sb.Append("\x26D\x3\x2\x2\x2\x26D\x26F\a\xB8\x2\x2\x26E\x270\a\xD6\x2\x2");
		sb.Append("\x26F\x26E\x3\x2\x2\x2\x26F\x270\x3\x2\x2\x2\x270\x271\x3\x2");
		sb.Append("\x2\x2\x271\x272\x5\xC4\x63\x2\x272-\x3\x2\x2\x2\x273\x274\x5");
		sb.Append("\x114\x8B\x2\x274\x275\a\xD6\x2\x2\x275\x277\x3\x2\x2\x2\x276");
		sb.Append("\x273\x3\x2\x2\x2\x276\x277\x3\x2\x2\x2\x277\x278\x3\x2\x2\x2");
		sb.Append("\x278\x279\a\x1B\x2\x2\x279\x27F\a\xD6\x2\x2\x27A\x27C\a\x46");
		sb.Append("\x2\x2\x27B\x27D\x5\x112\x8A\x2\x27C\x27B\x3\x2\x2\x2\x27C\x27D");
		sb.Append("\x3\x2\x2\x2\x27D\x280\x3\x2\x2\x2\x27E\x280\a\x9B\x2\x2\x27F");
		sb.Append("\x27A\x3\x2\x2\x2\x27F\x27E\x3\x2\x2\x2\x280\x281\x3\x2\x2\x2");
		sb.Append("\x281\x282\a\xD6\x2\x2\x282\x284\x5\xFC\x7F\x2\x283\x285\x5");
		sb.Append("\x112\x8A\x2\x284\x283\x3\x2\x2\x2\x284\x285\x3\x2\x2\x2\x285");
		sb.Append("\x286\x3\x2\x2\x2\x286\x287\a\xD6\x2\x2\x287\x288\aY\x2\x2\x288");
		sb.Append("\x289\a\xD6\x2\x2\x289\x28E\a\xCC\x2\x2\x28A\x28B\a\xD6\x2\x2");
		sb.Append("\x28B\x28C\a\x5\x2\x2\x28C\x28D\a\xD6\x2\x2\x28D\x28F\a\xCC");
		sb.Append("\x2\x2\x28E\x28A\x3\x2\x2\x2\x28E\x28F\x3\x2\x2\x2\x28F\x294");
		sb.Append("\x3\x2\x2\x2\x290\x292\a\xD6\x2\x2\x291\x290\x3\x2\x2\x2\x291");
		sb.Append("\x292\x3\x2\x2\x2\x292\x293\x3\x2\x2\x2\x293\x295\x5\xF2z\x2");
		sb.Append("\x294\x291\x3\x2\x2\x2\x294\x295\x3\x2\x2\x2\x295\x298\x3\x2");
		sb.Append("\x2\x2\x296\x297\a\xD6\x2\x2\x297\x299\x5\xFE\x80\x2\x298\x296");
		sb.Append("\x3\x2\x2\x2\x298\x299\x3\x2\x2\x2\x299/\x3\x2\x2\x2\x29A\x29B");
		sb.Append("\t\x3\x2\x2\x29B\x29C\a\xD6\x2\x2\x29C\x2A7\x5\x10A\x86\x2\x29D");
		sb.Append("\x29F\a\xD6\x2\x2\x29E\x29D\x3\x2\x2\x2\x29E\x29F\x3\x2\x2\x2");
		sb.Append("\x29F\x2A0\x3\x2\x2\x2\x2A0\x2A2\a\xB4\x2\x2\x2A1\x2A3\a\xD6");
		sb.Append("\x2\x2\x2A2\x2A1\x3\x2\x2\x2\x2A2\x2A3\x3\x2\x2\x2\x2A3\x2A4");
		sb.Append("\x3\x2\x2\x2\x2A4\x2A6\x5\x10A\x86\x2\x2A5\x29E\x3\x2\x2\x2");
		sb.Append("\x2A6\x2A9\x3\x2\x2\x2\x2A7\x2A5\x3\x2\x2\x2\x2A7\x2A8\x3\x2");
		sb.Append("\x2\x2\x2A8\x31\x3\x2\x2\x2\x2A9\x2A7\x3\x2\x2\x2\x2AA\x2AB");
		sb.Append("\a(\x2\x2\x2AB\x2AC\a\xD6\x2\x2\x2AC\x2AE\x5\xC4\x63\x2\x2AD");
		sb.Append("\x2AF\a\xD6\x2\x2\x2AE\x2AD\x3\x2\x2\x2\x2AE\x2AF\x3\x2\x2\x2");
		sb.Append("\x2AF\x2B0\x3\x2\x2\x2\x2B0\x2B2\a\xB4\x2\x2\x2B1\x2B3\a\xD6");
		sb.Append("\x2\x2\x2B2\x2B1\x3\x2\x2\x2\x2B2\x2B3\x3\x2\x2\x2\x2B3\x2B4");
		sb.Append("\x3\x2\x2\x2\x2B4\x2BD\x5\xC4\x63\x2\x2B5\x2B7\a\xD6\x2\x2\x2B6");
		sb.Append("\x2B5\x3\x2\x2\x2\x2B6\x2B7\x3\x2\x2\x2\x2B7\x2B8\x3\x2\x2\x2");
		sb.Append("\x2B8\x2BA\a\xB4\x2\x2\x2B9\x2BB\a\xD6\x2\x2\x2BA\x2B9\x3\x2");
		sb.Append("\x2\x2\x2BA\x2BB\x3\x2\x2\x2\x2BB\x2BC\x3\x2\x2\x2\x2BC\x2BE");
		sb.Append("\x5\xC4\x63\x2\x2BD\x2B6\x3\x2\x2\x2\x2BD\x2BE\x3\x2\x2\x2\x2BE");
		sb.Append("\x33\x3\x2\x2\x2\x2BF\x2C1\a*\x2\x2\x2C0\x2C2\a\xD4\x2\x2\x2C1");
		sb.Append("\x2C0\x3\x2\x2\x2\x2C2\x2C3\x3\x2\x2\x2\x2C3\x2C1\x3\x2\x2\x2");
		sb.Append("\x2C3\x2C4\x3\x2\x2\x2\x2C4\x2CB\x3\x2\x2\x2\x2C5\x2C7\x5\x1A");
		sb.Append("\xE\x2\x2C6\x2C8\a\xD4\x2\x2\x2C7\x2C6\x3\x2\x2\x2\x2C8\x2C9");
		sb.Append("\x3\x2\x2\x2\x2C9\x2C7\x3\x2\x2\x2\x2C9\x2CA\x3\x2\x2\x2\x2CA");
		sb.Append("\x2CC\x3\x2\x2\x2\x2CB\x2C5\x3\x2\x2\x2\x2CB\x2CC\x3\x2\x2\x2");
		sb.Append("\x2CC\x2CD\x3\x2\x2\x2\x2CD\x2F5\aV\x2\x2\x2CE\x2CF\a*\x2\x2");
		sb.Append("\x2CF\x2D0\a\xD6\x2\x2\x2D0\x2D1\t\x4\x2\x2\x2D1\x2D2\a\xD6");
		sb.Append("\x2\x2\x2D2\x2D4\x5\xC4\x63\x2\x2D3\x2D5\a\xD4\x2\x2\x2D4\x2D3");
		sb.Append("\x3\x2\x2\x2\x2D5\x2D6\x3\x2\x2\x2\x2D6\x2D4\x3\x2\x2\x2\x2D6");
		sb.Append("\x2D7\x3\x2\x2\x2\x2D7\x2DE\x3\x2\x2\x2\x2D8\x2DA\x5\x1A\xE");
		sb.Append("\x2\x2D9\x2DB\a\xD4\x2\x2\x2DA\x2D9\x3\x2\x2\x2\x2DB\x2DC\x3");
		sb.Append("\x2\x2\x2\x2DC\x2DA\x3\x2\x2\x2\x2DC\x2DD\x3\x2\x2\x2\x2DD\x2DF");
		sb.Append("\x3\x2\x2\x2\x2DE\x2D8\x3\x2\x2\x2\x2DE\x2DF\x3\x2\x2\x2\x2DF");
		sb.Append("\x2E0\x3\x2\x2\x2\x2E0\x2E1\aV\x2\x2\x2E1\x2F5\x3\x2\x2\x2\x2E2");
		sb.Append("\x2E4\a*\x2\x2\x2E3\x2E5\a\xD4\x2\x2\x2E4\x2E3\x3\x2\x2\x2\x2E5");
		sb.Append("\x2E6\x3\x2\x2\x2\x2E6\x2E4\x3\x2\x2\x2\x2E6\x2E7\x3\x2\x2\x2");
		sb.Append("\x2E7\x2E8\x3\x2\x2\x2\x2E8\x2EA\x5\x1A\xE\x2\x2E9\x2EB\a\xD4");
		sb.Append("\x2\x2\x2EA\x2E9\x3\x2\x2\x2\x2EB\x2EC\x3\x2\x2\x2\x2EC\x2EA");
		sb.Append("\x3\x2\x2\x2\x2EC\x2ED\x3\x2\x2\x2\x2ED\x2EE\x3\x2\x2\x2\x2EE");
		sb.Append("\x2EF\aV\x2\x2\x2EF\x2F0\a\xD6\x2\x2\x2F0\x2F1\t\x4\x2\x2\x2F1");
		sb.Append("\x2F2\a\xD6\x2\x2\x2F2\x2F3\x5\xC4\x63\x2\x2F3\x2F5\x3\x2\x2");
		sb.Append("\x2\x2F4\x2BF\x3\x2\x2\x2\x2F4\x2CE\x3\x2\x2\x2\x2F4\x2E2\x3");
		sb.Append("\x2\x2\x2\x2F5\x35\x3\x2\x2\x2\x2F6\x2F7\a\x37\x2\x2\x2F7\x37");
		sb.Append("\x3\x2\x2\x2\x2F8\x2F9\x5\x114\x8B\x2\x2F9\x2FA\a\xD6\x2\x2");
		sb.Append("\x2FA\x2FC\x3\x2\x2\x2\x2FB\x2F8\x3\x2\x2\x2\x2FB\x2FC\x3\x2");
		sb.Append("\x2\x2\x2FC\x2FD\x3\x2\x2\x2\x2FD\x2FE\a\x38\x2\x2\x2FE\x2FF");
		sb.Append("\a\xD6\x2\x2\x2FF\x301\x5\xFC\x7F\x2\x300\x302\a\xD4\x2\x2\x301");
		sb.Append("\x300\x3\x2\x2\x2\x302\x303\x3\x2\x2\x2\x303\x301\x3\x2\x2\x2");
		sb.Append("\x303\x304\x3\x2\x2\x2\x304\x308\x3\x2\x2\x2\x305\x307\x5:\x1E");
		sb.Append("\x2\x306\x305\x3\x2\x2\x2\x307\x30A\x3\x2\x2\x2\x308\x306\x3");
		sb.Append("\x2\x2\x2\x308\x309\x3\x2\x2\x2\x309\x30B\x3\x2\x2\x2\x30A\x308");
		sb.Append("\x3\x2\x2\x2\x30B\x30C\a/\x2\x2\x30C\x39\x3\x2\x2\x2\x30D\x316");
		sb.Append("\x5\xFC\x7F\x2\x30E\x310\a\xD6\x2\x2\x30F\x30E\x3\x2\x2\x2\x30F");
		sb.Append("\x310\x3\x2\x2\x2\x310\x311\x3\x2\x2\x2\x311\x313\a\xB8\x2\x2");
		sb.Append("\x312\x314\a\xD6\x2\x2\x313\x312\x3\x2\x2\x2\x313\x314\x3\x2");
		sb.Append("\x2\x2\x314\x315\x3\x2\x2\x2\x315\x317\x5\xC4\x63\x2\x316\x30F");
		sb.Append("\x3\x2\x2\x2\x316\x317\x3\x2\x2\x2\x317\x319\x3\x2\x2\x2\x318");
		sb.Append("\x31A\a\xD4\x2\x2\x319\x318\x3\x2\x2\x2\x31A\x31B\x3\x2\x2\x2");
		sb.Append("\x31B\x319\x3\x2\x2\x2\x31B\x31C\x3\x2\x2\x2\x31C;\x3\x2\x2");
		sb.Append("\x2\x31D\x31E\a:\x2\x2\x31E\x31F\a\xD6\x2\x2\x31F\x32A\x5\xC4");
		sb.Append("\x63\x2\x320\x322\a\xD6\x2\x2\x321\x320\x3\x2\x2\x2\x321\x322");
		sb.Append("\x3\x2\x2\x2\x322\x323\x3\x2\x2\x2\x323\x325\a\xB4\x2\x2\x324");
		sb.Append("\x326\a\xD6\x2\x2\x325\x324\x3\x2\x2\x2\x325\x326\x3\x2\x2\x2");
		sb.Append("\x326\x327\x3\x2\x2\x2\x327\x329\x5\xC4\x63\x2\x328\x321\x3");
		sb.Append("\x2\x2\x2\x329\x32C\x3\x2\x2\x2\x32A\x328\x3\x2\x2\x2\x32A\x32B");
		sb.Append("\x3\x2\x2\x2\x32B=\x3\x2\x2\x2\x32C\x32A\x3\x2\x2\x2\x32D\x32E");
		sb.Append("\a;\x2\x2\x32E\x32F\a\xD6\x2\x2\x32F\x330\x5\xC4\x63\x2\x330");
		sb.Append("?\x3\x2\x2\x2\x331\x332\x5\x114\x8B\x2\x332\x333\a\xD6\x2\x2");
		sb.Append("\x333\x335\x3\x2\x2\x2\x334\x331\x3\x2\x2\x2\x334\x335\x3\x2");
		sb.Append("\x2\x2\x335\x336\x3\x2\x2\x2\x336\x337\a<\x2\x2\x337\x338\a");
		sb.Append("\xD6\x2\x2\x338\x33A\x5\xFC\x7F\x2\x339\x33B\a\xD6\x2\x2\x33A");
		sb.Append("\x339\x3\x2\x2\x2\x33A\x33B\x3\x2\x2\x2\x33B\x33C\x3\x2\x2\x2");
		sb.Append("\x33C\x33D\x5\xF2z\x2\x33D\x41\x3\x2\x2\x2\x33E\x33F\t\x5\x2");
		sb.Append("\x2\x33F\x43\x3\x2\x2\x2\x340\x341\a\x43\x2\x2\x341\x342\a\xD6");
		sb.Append("\x2\x2\x342\x344\x5\xC4\x63\x2\x343\x345\a\xD6\x2\x2\x344\x343");
		sb.Append("\x3\x2\x2\x2\x344\x345\x3\x2\x2\x2\x345\x346\x3\x2\x2\x2\x346");
		sb.Append("\x348\a\xB4\x2\x2\x347\x349\a\xD6\x2\x2\x348\x347\x3\x2\x2\x2");
		sb.Append("\x348\x349\x3\x2\x2\x2\x349\x34A\x3\x2\x2\x2\x34A\x34B\x5\xC4");
		sb.Append("\x63\x2\x34B\x45\x3\x2\x2\x2\x34C\x34D\a\x45\x2\x2\x34D\x34E");
		sb.Append("\a\xD6\x2\x2\x34E\x34F\a,\x2\x2\x34F\x350\a\xD6\x2\x2\x350\x352");
		sb.Append("\x5\xFC\x7F\x2\x351\x353\x5\x112\x8A\x2\x352\x351\x3\x2\x2\x2");
		sb.Append("\x352\x353\x3\x2\x2\x2\x353\x354\x3\x2\x2\x2\x354\x355\a\xD6");
		sb.Append("\x2\x2\x355\x356\aN\x2\x2\x356\x357\a\xD6\x2\x2\x357\x359\x5");
		sb.Append("\xC4\x63\x2\x358\x35A\a\xD4\x2\x2\x359\x358\x3\x2\x2\x2\x35A");
		sb.Append("\x35B\x3\x2\x2\x2\x35B\x359\x3\x2\x2\x2\x35B\x35C\x3\x2\x2\x2");
		sb.Append("\x35C\x363\x3\x2\x2\x2\x35D\x35F\x5\x1A\xE\x2\x35E\x360\a\xD4");
		sb.Append("\x2\x2\x35F\x35E\x3\x2\x2\x2\x360\x361\x3\x2\x2\x2\x361\x35F");
		sb.Append("\x3\x2\x2\x2\x361\x362\x3\x2\x2\x2\x362\x364\x3\x2\x2\x2\x363");
		sb.Append("\x35D\x3\x2\x2\x2\x363\x364\x3\x2\x2\x2\x364\x365\x3\x2\x2\x2");
		sb.Append("\x365\x368\ai\x2\x2\x366\x367\a\xD6\x2\x2\x367\x369\x5\xFC\x7F");
		sb.Append("\x2\x368\x366\x3\x2\x2\x2\x368\x369\x3\x2\x2\x2\x369G\x3\x2");
		sb.Append("\x2\x2\x36A\x36B\a\x45\x2\x2\x36B\x36C\a\xD6\x2\x2\x36C\x36E");
		sb.Append("\x5\xFC\x7F\x2\x36D\x36F\x5\x112\x8A\x2\x36E\x36D\x3\x2\x2\x2");
		sb.Append("\x36E\x36F\x3\x2\x2\x2\x36F\x372\x3\x2\x2\x2\x370\x371\a\xD6");
		sb.Append("\x2\x2\x371\x373\x5\xFE\x80\x2\x372\x370\x3\x2\x2\x2\x372\x373");
		sb.Append("\x3\x2\x2\x2\x373\x375\x3\x2\x2\x2\x374\x376\a\xD6\x2\x2\x375");
		sb.Append("\x374\x3\x2\x2\x2\x375\x376\x3\x2\x2\x2\x376\x377\x3\x2\x2\x2");
		sb.Append("\x377\x379\a\xB8\x2\x2\x378\x37A\a\xD6\x2\x2\x379\x378\x3\x2");
		sb.Append("\x2\x2\x379\x37A\x3\x2\x2\x2\x37A\x37B\x3\x2\x2\x2\x37B\x37C");
		sb.Append("\x5\xC4\x63\x2\x37C\x37D\a\xD6\x2\x2\x37D\x37E\a\xA0\x2\x2\x37E");
		sb.Append("\x37F\a\xD6\x2\x2\x37F\x384\x5\xC4\x63\x2\x380\x381\a\xD6\x2");
		sb.Append("\x2\x381\x382\a\x98\x2\x2\x382\x383\a\xD6\x2\x2\x383\x385\x5");
		sb.Append("\xC4\x63\x2\x384\x380\x3\x2\x2\x2\x384\x385\x3\x2\x2\x2\x385");
		sb.Append("\x387\x3\x2\x2\x2\x386\x388\a\xD4\x2\x2\x387\x386\x3\x2\x2\x2");
		sb.Append("\x388\x389\x3\x2\x2\x2\x389\x387\x3\x2\x2\x2\x389\x38A\x3\x2");
		sb.Append("\x2\x2\x38A\x391\x3\x2\x2\x2\x38B\x38D\x5\x1A\xE\x2\x38C\x38E");
		sb.Append("\a\xD4\x2\x2\x38D\x38C\x3\x2\x2\x2\x38E\x38F\x3\x2\x2\x2\x38F");
		sb.Append("\x38D\x3\x2\x2\x2\x38F\x390\x3\x2\x2\x2\x390\x392\x3\x2\x2\x2");
		sb.Append("\x391\x38B\x3\x2\x2\x2\x391\x392\x3\x2\x2\x2\x392\x393\x3\x2");
		sb.Append("\x2\x2\x393\x396\ai\x2\x2\x394\x395\a\xD6\x2\x2\x395\x397\x5");
		sb.Append("\xFC\x7F\x2\x396\x394\x3\x2\x2\x2\x396\x397\x3\x2\x2\x2\x397");
		sb.Append("I\x3\x2\x2\x2\x398\x399\x5\x114\x8B\x2\x399\x39A\a\xD6\x2\x2");
		sb.Append("\x39A\x39C\x3\x2\x2\x2\x39B\x398\x3\x2\x2\x2\x39B\x39C\x3\x2");
		sb.Append("\x2\x2\x39C\x39F\x3\x2\x2\x2\x39D\x39E\a\x97\x2\x2\x39E\x3A0");
		sb.Append("\a\xD6\x2\x2\x39F\x39D\x3\x2\x2\x2\x39F\x3A0\x3\x2\x2\x2\x3A0");
		sb.Append("\x3A1\x3\x2\x2\x2\x3A1\x3A2\a\x46\x2\x2\x3A2\x3A3\a\xD6\x2\x2");
		sb.Append("\x3A3\x3A8\x5\xFC\x7F\x2\x3A4\x3A6\a\xD6\x2\x2\x3A5\x3A4\x3");
		sb.Append("\x2\x2\x2\x3A5\x3A6\x3\x2\x2\x2\x3A6\x3A7\x3\x2\x2\x2\x3A7\x3A9");
		sb.Append("\x5\xF2z\x2\x3A8\x3A5\x3\x2\x2\x2\x3A8\x3A9\x3\x2\x2\x2\x3A9");
		sb.Append("\x3AC\x3\x2\x2\x2\x3AA\x3AB\a\xD6\x2\x2\x3AB\x3AD\x5\xFE\x80");
		sb.Append("\x2\x3AC\x3AA\x3\x2\x2\x2\x3AC\x3AD\x3\x2\x2\x2\x3AD\x3AF\x3");
		sb.Append("\x2\x2\x2\x3AE\x3B0\a\xD4\x2\x2\x3AF\x3AE\x3\x2\x2\x2\x3B0\x3B1");
		sb.Append("\x3\x2\x2\x2\x3B1\x3AF\x3\x2\x2\x2\x3B1\x3B2\x3\x2\x2\x2\x3B2");
		sb.Append("\x3B9\x3\x2\x2\x2\x3B3\x3B5\x5\x1A\xE\x2\x3B4\x3B6\a\xD4\x2");
		sb.Append("\x2\x3B5\x3B4\x3\x2\x2\x2\x3B6\x3B7\x3\x2\x2\x2\x3B7\x3B5\x3");
		sb.Append("\x2\x2\x2\x3B7\x3B8\x3\x2\x2\x2\x3B8\x3BA\x3\x2\x2\x2\x3B9\x3B3");
		sb.Append("\x3\x2\x2\x2\x3B9\x3BA\x3\x2\x2\x2\x3BA\x3BB\x3\x2\x2\x2\x3BB");
		sb.Append("\x3BC\a\x30\x2\x2\x3BCK\x3\x2\x2\x2\x3BD\x3BE\aG\x2\x2\x3BE");
		sb.Append("\x3BF\a\xD6\x2\x2\x3BF\x3C1\x5\xC4\x63\x2\x3C0\x3C2\a\xD6\x2");
		sb.Append("\x2\x3C1\x3C0\x3\x2\x2\x2\x3C1\x3C2\x3\x2\x2\x2\x3C2\x3C3\x3");
		sb.Append("\x2\x2\x2\x3C3\x3C5\a\xB4\x2\x2\x3C4\x3C6\a\xD6\x2\x2\x3C5\x3C4");
		sb.Append("\x3\x2\x2\x2\x3C5\x3C6\x3\x2\x2\x2\x3C6\x3C8\x3\x2\x2\x2\x3C7");
		sb.Append("\x3C9\x5\xC4\x63\x2\x3C8\x3C7\x3\x2\x2\x2\x3C8\x3C9\x3\x2\x2");
		sb.Append("\x2\x3C9\x3CB\x3\x2\x2\x2\x3CA\x3CC\a\xD6\x2\x2\x3CB\x3CA\x3");
		sb.Append("\x2\x2\x2\x3CB\x3CC\x3\x2\x2\x2\x3CC\x3CD\x3\x2\x2\x2\x3CD\x3CF");
		sb.Append("\a\xB4\x2\x2\x3CE\x3D0\a\xD6\x2\x2\x3CF\x3CE\x3\x2\x2\x2\x3CF");
		sb.Append("\x3D0\x3\x2\x2\x2\x3D0\x3D1\x3\x2\x2\x2\x3D1\x3D2\x5\xC4\x63");
		sb.Append("\x2\x3D2M\x3\x2\x2\x2\x3D3\x3D4\aI\x2\x2\x3D4\x3D5\a\xD6\x2");
		sb.Append("\x2\x3D5\x3D6\x5\xC4\x63\x2\x3D6O\x3\x2\x2\x2\x3D7\x3D8\aJ\x2");
		sb.Append("\x2\x3D8\x3D9\a\xD6\x2\x2\x3D9\x3DA\x5\xC4\x63\x2\x3DAQ\x3\x2");
		sb.Append("\x2\x2\x3DB\x3DC\aK\x2\x2\x3DC\x3DD\a\xD6\x2\x2\x3DD\x3DE\x5");
		sb.Append("V,\x2\x3DE\x3DF\a\xD6\x2\x2\x3DF\x3E0\a\x9E\x2\x2\x3E0\x3E1");
		sb.Append("\a\xD6\x2\x2\x3E1\x3E6\x5\x1C\xF\x2\x3E2\x3E3\a\xD6\x2\x2\x3E3");
		sb.Append("\x3E4\a-\x2\x2\x3E4\x3E5\a\xD6\x2\x2\x3E5\x3E7\x5\x1C\xF\x2");
		sb.Append("\x3E6\x3E2\x3\x2\x2\x2\x3E6\x3E7\x3\x2\x2\x2\x3E7\x3F5\x3\x2");
		sb.Append("\x2\x2\x3E8\x3EC\x5T+\x2\x3E9\x3EB\x5X-\x2\x3EA\x3E9\x3\x2\x2");
		sb.Append("\x2\x3EB\x3EE\x3\x2\x2\x2\x3EC\x3EA\x3\x2\x2\x2\x3EC\x3ED\x3");
		sb.Append("\x2\x2\x2\x3ED\x3F0\x3\x2\x2\x2\x3EE\x3EC\x3\x2\x2\x2\x3EF\x3F1");
		sb.Append("\x5Z.\x2\x3F0\x3EF\x3\x2\x2\x2\x3F0\x3F1\x3\x2\x2\x2\x3F1\x3F2");
		sb.Append("\x3\x2\x2\x2\x3F2\x3F3\a\x31\x2\x2\x3F3\x3F5\x3\x2\x2\x2\x3F4");
		sb.Append("\x3DB\x3\x2\x2\x2\x3F4\x3E8\x3\x2\x2\x2\x3F5S\x3\x2\x2\x2\x3F6");
		sb.Append("\x3F7\aK\x2\x2\x3F7\x3F8\a\xD6\x2\x2\x3F8\x3F9\x5V,\x2\x3F9");
		sb.Append("\x3FA\a\xD6\x2\x2\x3FA\x3FC\a\x9E\x2\x2\x3FB\x3FD\a\xD4\x2\x2");
		sb.Append("\x3FC\x3FB\x3\x2\x2\x2\x3FD\x3FE\x3\x2\x2\x2\x3FE\x3FC\x3\x2");
		sb.Append("\x2\x2\x3FE\x3FF\x3\x2\x2\x2\x3FF\x406\x3\x2\x2\x2\x400\x402");
		sb.Append("\x5\x1A\xE\x2\x401\x403\a\xD4\x2\x2\x402\x401\x3\x2\x2\x2\x403");
		sb.Append("\x404\x3\x2\x2\x2\x404\x402\x3\x2\x2\x2\x404\x405\x3\x2\x2\x2");
		sb.Append("\x405\x407\x3\x2\x2\x2\x406\x400\x3\x2\x2\x2\x406\x407\x3\x2");
		sb.Append("\x2\x2\x407U\x3\x2\x2\x2\x408\x409\x5\xC4\x63\x2\x409W\x3\x2");
		sb.Append("\x2\x2\x40A\x40B\a.\x2\x2\x40B\x40C\a\xD6\x2\x2\x40C\x40D\x5");
		sb.Append("V,\x2\x40D\x40E\a\xD6\x2\x2\x40E\x410\a\x9E\x2\x2\x40F\x411");
		sb.Append("\a\xD4\x2\x2\x410\x40F\x3\x2\x2\x2\x411\x412\x3\x2\x2\x2\x412");
		sb.Append("\x410\x3\x2\x2\x2\x412\x413\x3\x2\x2\x2\x413\x41A\x3\x2\x2\x2");
		sb.Append("\x414\x416\x5\x1A\xE\x2\x415\x417\a\xD4\x2\x2\x416\x415\x3\x2");
		sb.Append("\x2\x2\x417\x418\x3\x2\x2\x2\x418\x416\x3\x2\x2\x2\x418\x419");
		sb.Append("\x3\x2\x2\x2\x419\x41B\x3\x2\x2\x2\x41A\x414\x3\x2\x2\x2\x41A");
		sb.Append("\x41B\x3\x2\x2\x2\x41BY\x3\x2\x2\x2\x41C\x41E\a-\x2\x2\x41D");
		sb.Append("\x41F\a\xD4\x2\x2\x41E\x41D\x3\x2\x2\x2\x41F\x420\x3\x2\x2\x2");
		sb.Append("\x420\x41E\x3\x2\x2\x2\x420\x421\x3\x2\x2\x2\x421\x428\x3\x2");
		sb.Append("\x2\x2\x422\x424\x5\x1A\xE\x2\x423\x425\a\xD4\x2\x2\x424\x423");
		sb.Append("\x3\x2\x2\x2\x425\x426\x3\x2\x2\x2\x426\x424\x3\x2\x2\x2\x426");
		sb.Append("\x427\x3\x2\x2\x2\x427\x429\x3\x2\x2\x2\x428\x422\x3\x2\x2\x2");
		sb.Append("\x428\x429\x3\x2\x2\x2\x429[\x3\x2\x2\x2\x42A\x42B\aM\x2\x2");
		sb.Append("\x42B\x42C\a\xD6\x2\x2\x42C\x42D\x5\xFC\x7F\x2\x42D]\x3\x2\x2");
		sb.Append("\x2\x42E\x42F\aO\x2\x2\x42F\x430\a\xD6\x2\x2\x430\x439\x5\xC4");
		sb.Append("\x63\x2\x431\x433\a\xD6\x2\x2\x432\x431\x3\x2\x2\x2\x432\x433");
		sb.Append("\x3\x2\x2\x2\x433\x434\x3\x2\x2\x2\x434\x436\a\xB4\x2\x2\x435");
		sb.Append("\x437\a\xD6\x2\x2\x436\x435\x3\x2\x2\x2\x436\x437\x3\x2\x2\x2");
		sb.Append("\x437\x438\x3\x2\x2\x2\x438\x43A\x5\xC4\x63\x2\x439\x432\x3");
		sb.Append("\x2\x2\x2\x43A\x43B\x3\x2\x2\x2\x43B\x439\x3\x2\x2\x2\x43B\x43C");
		sb.Append("\x3\x2\x2\x2\x43C_\x3\x2\x2\x2\x43D\x43E\aR\x2\x2\x43E\x43F");
		sb.Append("\a\xD6\x2\x2\x43F\x440\x5\xC4\x63\x2\x440\x61\x3\x2\x2\x2\x441");
		sb.Append("\x442\aX\x2\x2\x442\x444\a\xD6\x2\x2\x443\x441\x3\x2\x2\x2\x443");
		sb.Append("\x444\x3\x2\x2\x2\x444\x445\x3\x2\x2\x2\x445\x447\x5\xE0q\x2");
		sb.Append("\x446\x448\a\xD6\x2\x2\x447\x446\x3\x2\x2\x2\x447\x448\x3\x2");
		sb.Append("\x2\x2\x448\x449\x3\x2\x2\x2\x449\x44B\t\x6\x2\x2\x44A\x44C");
		sb.Append("\a\xD6\x2\x2\x44B\x44A\x3\x2\x2\x2\x44B\x44C\x3\x2\x2\x2\x44C");
		sb.Append("\x44D\x3\x2\x2\x2\x44D\x44E\x5\xC4\x63\x2\x44E\x63\x3\x2\x2");
		sb.Append("\x2\x44F\x450\a[\x2\x2\x450\x451\a\xD6\x2\x2\x451\x453\x5\xC4");
		sb.Append("\x63\x2\x452\x454\a\xD6\x2\x2\x453\x452\x3\x2\x2\x2\x453\x454");
		sb.Append("\x3\x2\x2\x2\x454\x455\x3\x2\x2\x2\x455\x457\a\xB4\x2\x2\x456");
		sb.Append("\x458\a\xD6\x2\x2\x457\x456\x3\x2\x2\x2\x457\x458\x3\x2\x2\x2");
		sb.Append("\x458\x459\x3\x2\x2\x2\x459\x45A\x5\xC4\x63\x2\x45A\x65\x3\x2");
		sb.Append("\x2\x2\x45B\x45C\aS\x2\x2\x45C\x45D\a\xD6\x2\x2\x45D\x45E\x5");
		sb.Append("\xC4\x63\x2\x45Eg\x3\x2\x2\x2\x45F\x460\aT\x2\x2\x460\x461\a");
		sb.Append("\xD6\x2\x2\x461\x470\x5\xC4\x63\x2\x462\x464\a\xD6\x2\x2\x463");
		sb.Append("\x462\x3\x2\x2\x2\x463\x464\x3\x2\x2\x2\x464\x465\x3\x2\x2\x2");
		sb.Append("\x465\x467\a\xB4\x2\x2\x466\x468\a\xD6\x2\x2\x467\x466\x3\x2");
		sb.Append("\x2\x2\x467\x468\x3\x2\x2\x2\x468\x469\x3\x2\x2\x2\x469\x46E");
		sb.Append("\x5\xC4\x63\x2\x46A\x46B\a\xD6\x2\x2\x46B\x46C\a\xA0\x2\x2\x46C");
		sb.Append("\x46D\a\xD6\x2\x2\x46D\x46F\x5\xC4\x63\x2\x46E\x46A\x3\x2\x2");
		sb.Append("\x2\x46E\x46F\x3\x2\x2\x2\x46F\x471\x3\x2\x2\x2\x470\x463\x3");
		sb.Append("\x2\x2\x2\x470\x471\x3\x2\x2\x2\x471i\x3\x2\x2\x2\x472\x473");
		sb.Append("\a_\x2\x2\x473\x474\a\xD6\x2\x2\x474\x476\x5\xE0q\x2\x475\x477");
		sb.Append("\a\xD6\x2\x2\x476\x475\x3\x2\x2\x2\x476\x477\x3\x2\x2\x2\x477");
		sb.Append("\x478\x3\x2\x2\x2\x478\x47A\a\xB8\x2\x2\x479\x47B\a\xD6\x2\x2");
		sb.Append("\x47A\x479\x3\x2\x2\x2\x47A\x47B\x3\x2\x2\x2\x47B\x47C\x3\x2");
		sb.Append("\x2\x2\x47C\x47D\x5\xC4\x63\x2\x47Dk\x3\x2\x2\x2\x47E\x482\x5");
		sb.Append("n\x38\x2\x47F\x481\x5p\x39\x2\x480\x47F\x3\x2\x2\x2\x481\x484");
		sb.Append("\x3\x2\x2\x2\x482\x480\x3\x2\x2\x2\x482\x483\x3\x2\x2\x2\x483");
		sb.Append("\x486\x3\x2\x2\x2\x484\x482\x3\x2\x2\x2\x485\x487\x5r:\x2\x486");
		sb.Append("\x485\x3\x2\x2\x2\x486\x487\x3\x2\x2\x2\x487\x488\x3\x2\x2\x2");
		sb.Append("\x488\x489\a\x63\x2\x2\x489m\x3\x2\x2\x2\x48A\x48B\a`\x2\x2");
		sb.Append("\x48B\x48C\a\xD6\x2\x2\x48C\x48D\x5V,\x2\x48D\x48E\a\xD6\x2");
		sb.Append("\x2\x48E\x490\a\x9E\x2\x2\x48F\x491\a\xD4\x2\x2\x490\x48F\x3");
		sb.Append("\x2\x2\x2\x491\x492\x3\x2\x2\x2\x492\x490\x3\x2\x2\x2\x492\x493");
		sb.Append("\x3\x2\x2\x2\x493\x49A\x3\x2\x2\x2\x494\x496\x5\x12\n\x2\x495");
		sb.Append("\x497\a\xD4\x2\x2\x496\x495\x3\x2\x2\x2\x497\x498\x3\x2\x2\x2");
		sb.Append("\x498\x496\x3\x2\x2\x2\x498\x499\x3\x2\x2\x2\x499\x49B\x3\x2");
		sb.Append("\x2\x2\x49A\x494\x3\x2\x2\x2\x49A\x49B\x3\x2\x2\x2\x49Bo\x3");
		sb.Append("\x2\x2\x2\x49C\x49D\a\x61\x2\x2\x49D\x49E\a\xD6\x2\x2\x49E\x49F");
		sb.Append("\x5V,\x2\x49F\x4A0\a\xD6\x2\x2\x4A0\x4A2\a\x9E\x2\x2\x4A1\x4A3");
		sb.Append("\a\xD4\x2\x2\x4A2\x4A1\x3\x2\x2\x2\x4A3\x4A4\x3\x2\x2\x2\x4A4");
		sb.Append("\x4A2\x3\x2\x2\x2\x4A4\x4A5\x3\x2\x2\x2\x4A5\x4AC\x3\x2\x2\x2");
		sb.Append("\x4A6\x4A8\x5\x12\n\x2\x4A7\x4A9\a\xD4\x2\x2\x4A8\x4A7\x3\x2");
		sb.Append("\x2\x2\x4A9\x4AA\x3\x2\x2\x2\x4AA\x4A8\x3\x2\x2\x2\x4AA\x4AB");
		sb.Append("\x3\x2\x2\x2\x4AB\x4AD\x3\x2\x2\x2\x4AC\x4A6\x3\x2\x2\x2\x4AC");
		sb.Append("\x4AD\x3\x2\x2\x2\x4ADq\x3\x2\x2\x2\x4AE\x4B0\a\x62\x2\x2\x4AF");
		sb.Append("\x4B1\a\xD4\x2\x2\x4B0\x4AF\x3\x2\x2\x2\x4B1\x4B2\x3\x2\x2\x2");
		sb.Append("\x4B2\x4B0\x3\x2\x2\x2\x4B2\x4B3\x3\x2\x2\x2\x4B3\x4BA\x3\x2");
		sb.Append("\x2\x2\x4B4\x4B6\x5\x12\n\x2\x4B5\x4B7\a\xD4\x2\x2\x4B6\x4B5");
		sb.Append("\x3\x2\x2\x2\x4B7\x4B8\x3\x2\x2\x2\x4B8\x4B6\x3\x2\x2\x2\x4B8");
		sb.Append("\x4B9\x3\x2\x2\x2\x4B9\x4BB\x3\x2\x2\x2\x4BA\x4B4\x3\x2\x2\x2");
		sb.Append("\x4BA\x4BB\x3\x2\x2\x2\x4BBs\x3\x2\x2\x2\x4BC\x4BE\a\x65\x2");
		sb.Append("\x2\x4BD\x4BF\a\xD6\x2\x2\x4BE\x4BD\x3\x2\x2\x2\x4BE\x4BF\x3");
		sb.Append("\x2\x2\x2\x4BF\x4C0\x3\x2\x2\x2\x4C0\x4C2\a\xBE\x2\x2\x4C1\x4C3");
		sb.Append("\a\xD6\x2\x2\x4C2\x4C1\x3\x2\x2\x2\x4C2\x4C3\x3\x2\x2\x2\x4C3");
		sb.Append("\x4C4\x3\x2\x2\x2\x4C4\x4C6\x5\xECw\x2\x4C5\x4C7\a\xD6\x2\x2");
		sb.Append("\x4C6\x4C5\x3\x2\x2\x2\x4C6\x4C7\x3\x2\x2\x2\x4C7\x4C8\x3\x2");
		sb.Append("\x2\x2\x4C8\x4C9\a\xC8\x2\x2\x4C9u\x3\x2\x2\x2\x4CA\x4CB\a\x66");
		sb.Append("\x2\x2\x4CB\x4CC\a\xD6\x2\x2\x4CC\x4CD\x5\xC4\x63\x2\x4CDw\x3");
		sb.Append("\x2\x2\x2\x4CE\x4CF\ah\x2\x2\x4CF\x4D0\a\xD6\x2\x2\x4D0\x4D1");
		sb.Append("\x5\xC4\x63\x2\x4D1\x4D2\a\xD6\x2\x2\x4D2\x4D3\a\n\x2\x2\x4D3");
		sb.Append("\x4D4\a\xD6\x2\x2\x4D4\x4D5\x5\xC4\x63\x2\x4D5y\x3\x2\x2\x2");
		sb.Append("\x4D6\x4D7\ao\x2\x2\x4D7\x4DE\a\xD6\x2\x2\x4D8\x4D9\aJ\x2\x2");
		sb.Append("\x4D9\x4DA\a\xD6\x2\x2\x4DA\x4DF\x5\xC4\x63\x2\x4DB\x4DC\a\x89");
		sb.Append("\x2\x2\x4DC\x4DD\a\xD6\x2\x2\x4DD\x4DF\ai\x2\x2\x4DE\x4D8\x3");
		sb.Append("\x2\x2\x2\x4DE\x4DB\x3\x2\x2\x2\x4DF{\x3\x2\x2\x2\x4E0\x4E1");
		sb.Append("\an\x2\x2\x4E1\x4E2\a\xD6\x2\x2\x4E2\x4E3\x5\xC4\x63\x2\x4E3");
		sb.Append("\x4E4\a\xD6\x2\x2\x4E4\x4E5\aJ\x2\x2\x4E5\x4E6\a\xD6\x2\x2\x4E6");
		sb.Append("\x4F1\x5\xC4\x63\x2\x4E7\x4E9\a\xD6\x2\x2\x4E8\x4E7\x3\x2\x2");
		sb.Append("\x2\x4E8\x4E9\x3\x2\x2\x2\x4E9\x4EA\x3\x2\x2\x2\x4EA\x4EC\a");
		sb.Append("\xB4\x2\x2\x4EB\x4ED\a\xD6\x2\x2\x4EC\x4EB\x3\x2\x2\x2\x4EC");
		sb.Append("\x4ED\x3\x2\x2\x2\x4ED\x4EE\x3\x2\x2\x2\x4EE\x4F0\x5\xC4\x63");
		sb.Append("\x2\x4EF\x4E8\x3\x2\x2\x2\x4F0\x4F3\x3\x2\x2\x2\x4F1\x4EF\x3");
		sb.Append("\x2\x2\x2\x4F1\x4F2\x3\x2\x2\x2\x4F2}\x3\x2\x2\x2\x4F3\x4F1");
		sb.Append("\x3\x2\x2\x2\x4F4\x4F5\an\x2\x2\x4F5\x4F6\a\xD6\x2\x2\x4F6\x4F7");
		sb.Append("\x5\xC4\x63\x2\x4F7\x4F8\a\xD6\x2\x2\x4F8\x4F9\aI\x2\x2\x4F9");
		sb.Append("\x4FA\a\xD6\x2\x2\x4FA\x505\x5\xC4\x63\x2\x4FB\x4FD\a\xD6\x2");
		sb.Append("\x2\x4FC\x4FB\x3\x2\x2\x2\x4FC\x4FD\x3\x2\x2\x2\x4FD\x4FE\x3");
		sb.Append("\x2\x2\x2\x4FE\x500\a\xB4\x2\x2\x4FF\x501\a\xD6\x2\x2\x500\x4FF");
		sb.Append("\x3\x2\x2\x2\x500\x501\x3\x2\x2\x2\x501\x502\x3\x2\x2\x2\x502");
		sb.Append("\x504\x5\xC4\x63\x2\x503\x4FC\x3\x2\x2\x2\x504\x507\x3\x2\x2");
		sb.Append("\x2\x505\x503\x3\x2\x2\x2\x505\x506\x3\x2\x2\x2\x506\x7F\x3");
		sb.Append("\x2\x2\x2\x507\x505\x3\x2\x2\x2\x508\x509\ap\x2\x2\x509\x50A");
		sb.Append("\a\xD6\x2\x2\x50A\x50B\x5\xC4\x63\x2\x50B\x50C\a\xD6\x2\x2\x50C");
		sb.Append("\x50D\a\x45\x2\x2\x50D\x50E\a\xD6\x2\x2\x50E\x513\t\a\x2\x2");
		sb.Append("\x50F\x510\a\xD6\x2\x2\x510\x511\a\x3\x2\x2\x511\x512\a\xD6");
		sb.Append("\x2\x2\x512\x514\t\b\x2\x2\x513\x50F\x3\x2\x2\x2\x513\x514\x3");
		sb.Append("\x2\x2\x2\x514\x517\x3\x2\x2\x2\x515\x516\a\xD6\x2\x2\x516\x518");
		sb.Append("\t\t\x2\x2\x517\x515\x3\x2\x2\x2\x517\x518\x3\x2\x2\x2\x518");
		sb.Append("\x519\x3\x2\x2\x2\x519\x51A\a\xD6\x2\x2\x51A\x51B\a\n\x2\x2");
		sb.Append("\x51B\x51C\a\xD6\x2\x2\x51C\x527\x5\xC4\x63\x2\x51D\x51E\a\xD6");
		sb.Append("\x2\x2\x51E\x520\aW\x2\x2\x51F\x521\a\xD6\x2\x2\x520\x51F\x3");
		sb.Append("\x2\x2\x2\x520\x521\x3\x2\x2\x2\x521\x522\x3\x2\x2\x2\x522\x524");
		sb.Append("\a\xB8\x2\x2\x523\x525\a\xD6\x2\x2\x524\x523\x3\x2\x2\x2\x524");
		sb.Append("\x525\x3\x2\x2\x2\x525\x526\x3\x2\x2\x2\x526\x528\x5\xC4\x63");
		sb.Append("\x2\x527\x51D\x3\x2\x2\x2\x527\x528\x3\x2\x2\x2\x528\x81\x3");
		sb.Append("\x2\x2\x2\x529\x536\x5\x84\x43\x2\x52A\x52C\a\xD6\x2\x2\x52B");
		sb.Append("\x52A\x3\x2\x2\x2\x52B\x52C\x3\x2\x2\x2\x52C\x52D\x3\x2\x2\x2");
		sb.Append("\x52D\x52F\t\n\x2\x2\x52E\x530\a\xD6\x2\x2\x52F\x52E\x3\x2\x2");
		sb.Append("\x2\x52F\x530\x3\x2\x2\x2\x530\x532\x3\x2\x2\x2\x531\x533\x5");
		sb.Append("\x84\x43\x2\x532\x531\x3\x2\x2\x2\x532\x533\x3\x2\x2\x2\x533");
		sb.Append("\x535\x3\x2\x2\x2\x534\x52B\x3\x2\x2\x2\x535\x538\x3\x2\x2\x2");
		sb.Append("\x536\x534\x3\x2\x2\x2\x536\x537\x3\x2\x2\x2\x537\x54B\x3\x2");
		sb.Append("\x2\x2\x538\x536\x3\x2\x2\x2\x539\x53B\x5\x84\x43\x2\x53A\x539");
		sb.Append("\x3\x2\x2\x2\x53A\x53B\x3\x2\x2\x2\x53B\x546\x3\x2\x2\x2\x53C");
		sb.Append("\x53E\a\xD6\x2\x2\x53D\x53C\x3\x2\x2\x2\x53D\x53E\x3\x2\x2\x2");
		sb.Append("\x53E\x53F\x3\x2\x2\x2\x53F\x541\t\n\x2\x2\x540\x542\a\xD6\x2");
		sb.Append("\x2\x541\x540\x3\x2\x2\x2\x541\x542\x3\x2\x2\x2\x542\x544\x3");
		sb.Append("\x2\x2\x2\x543\x545\x5\x84\x43\x2\x544\x543\x3\x2\x2\x2\x544");
		sb.Append("\x545\x3\x2\x2\x2\x545\x547\x3\x2\x2\x2\x546\x53D\x3\x2\x2\x2");
		sb.Append("\x547\x548\x3\x2\x2\x2\x548\x546\x3\x2\x2\x2\x548\x549\x3\x2");
		sb.Append("\x2\x2\x549\x54B\x3\x2\x2\x2\x54A\x529\x3\x2\x2\x2\x54A\x53A");
		sb.Append("\x3\x2\x2\x2\x54B\x83\x3\x2\x2\x2\x54C\x55E\x5\xC4\x63\x2\x54D");
		sb.Append("\x55B\t\v\x2\x2\x54E\x550\a\xD6\x2\x2\x54F\x54E\x3\x2\x2\x2");
		sb.Append("\x54F\x550\x3\x2\x2\x2\x550\x551\x3\x2\x2\x2\x551\x553\a\xBE");
		sb.Append("\x2\x2\x552\x554\a\xD6\x2\x2\x553\x552\x3\x2\x2\x2\x553\x554");
		sb.Append("\x3\x2\x2\x2\x554\x555\x3\x2\x2\x2\x555\x557\x5\xECw\x2\x556");
		sb.Append("\x558\a\xD6\x2\x2\x557\x556\x3\x2\x2\x2\x557\x558\x3\x2\x2\x2");
		sb.Append("\x558\x559\x3\x2\x2\x2\x559\x55A\a\xC8\x2\x2\x55A\x55C\x3\x2");
		sb.Append("\x2\x2\x55B\x54F\x3\x2\x2\x2\x55B\x55C\x3\x2\x2\x2\x55C\x55E");
		sb.Append("\x3\x2\x2\x2\x55D\x54C\x3\x2\x2\x2\x55D\x54D\x3\x2\x2\x2\x55E");
		sb.Append("\x85\x3\x2\x2\x2\x55F\x560\az\x2\x2\x560\x561\a\xD6\x2\x2\x561");
		sb.Append("\x563\x5\xC4\x63\x2\x562\x564\a\xD6\x2\x2\x563\x562\x3\x2\x2");
		sb.Append("\x2\x563\x564\x3\x2\x2\x2\x564\x565\x3\x2\x2\x2\x565\x56A\a");
		sb.Append("\xB4\x2\x2\x566\x568\a\xD6\x2\x2\x567\x566\x3\x2\x2\x2\x567");
		sb.Append("\x568\x3\x2\x2\x2\x568\x569\x3\x2\x2\x2\x569\x56B\x5\x82\x42");
		sb.Append("\x2\x56A\x567\x3\x2\x2\x2\x56A\x56B\x3\x2\x2\x2\x56B\x87\x3");
		sb.Append("\x2\x2\x2\x56C\x56D\x5\x114\x8B\x2\x56D\x56E\a\xD6\x2\x2\x56E");
		sb.Append("\x570\x3\x2\x2\x2\x56F\x56C\x3\x2\x2\x2\x56F\x570\x3\x2\x2\x2");
		sb.Append("\x570\x573\x3\x2\x2\x2\x571\x572\a\x97\x2\x2\x572\x574\a\xD6");
		sb.Append("\x2\x2\x573\x571\x3\x2\x2\x2\x573\x574\x3\x2\x2\x2\x574\x575");
		sb.Append("\x3\x2\x2\x2\x575\x576\a|\x2\x2\x576\x577\a\xD6\x2\x2\x577\x579");
		sb.Append("\x5\xFC\x7F\x2\x578\x57A\x5\x112\x8A\x2\x579\x578\x3\x2\x2\x2");
		sb.Append("\x579\x57A\x3\x2\x2\x2\x57A\x57F\x3\x2\x2\x2\x57B\x57D\a\xD6");
		sb.Append("\x2\x2\x57C\x57B\x3\x2\x2\x2\x57C\x57D\x3\x2\x2\x2\x57D\x57E");
		sb.Append("\x3\x2\x2\x2\x57E\x580\x5\xF2z\x2\x57F\x57C\x3\x2\x2\x2\x57F");
		sb.Append("\x580\x3\x2\x2\x2\x580\x583\x3\x2\x2\x2\x581\x582\a\xD6\x2\x2");
		sb.Append("\x582\x584\x5\xFE\x80\x2\x583\x581\x3\x2\x2\x2\x583\x584\x3");
		sb.Append("\x2\x2\x2\x584\x586\x3\x2\x2\x2\x585\x587\a\xD4\x2\x2\x586\x585");
		sb.Append("\x3\x2\x2\x2\x587\x588\x3\x2\x2\x2\x588\x586\x3\x2\x2\x2\x588");
		sb.Append("\x589\x3\x2\x2\x2\x589\x590\x3\x2\x2\x2\x58A\x58C\x5\x1A\xE");
		sb.Append("\x2\x58B\x58D\a\xD4\x2\x2\x58C\x58B\x3\x2\x2\x2\x58D\x58E\x3");
		sb.Append("\x2\x2\x2\x58E\x58C\x3\x2\x2\x2\x58E\x58F\x3\x2\x2\x2\x58F\x591");
		sb.Append("\x3\x2\x2\x2\x590\x58A\x3\x2\x2\x2\x590\x591\x3\x2\x2\x2\x591");
		sb.Append("\x592\x3\x2\x2\x2\x592\x593\a\x32\x2\x2\x593\x89\x3\x2\x2\x2");
		sb.Append("\x594\x595\x5\x114\x8B\x2\x595\x596\a\xD6\x2\x2\x596\x598\x3");
		sb.Append("\x2\x2\x2\x597\x594\x3\x2\x2\x2\x597\x598\x3\x2\x2\x2\x598\x59B");
		sb.Append("\x3\x2\x2\x2\x599\x59A\a\x97\x2\x2\x59A\x59C\a\xD6\x2\x2\x59B");
		sb.Append("\x599\x3\x2\x2\x2\x59B\x59C\x3\x2\x2\x2\x59C\x59D\x3\x2\x2\x2");
		sb.Append("\x59D\x59E\a~\x2\x2\x59E\x59F\a\xD6\x2\x2\x59F\x5A4\x5\xFC\x7F");
		sb.Append("\x2\x5A0\x5A2\a\xD6\x2\x2\x5A1\x5A0\x3\x2\x2\x2\x5A1\x5A2\x3");
		sb.Append("\x2\x2\x2\x5A2\x5A3\x3\x2\x2\x2\x5A3\x5A5\x5\xF2z\x2\x5A4\x5A1");
		sb.Append("\x3\x2\x2\x2\x5A4\x5A5\x3\x2\x2\x2\x5A5\x5A7\x3\x2\x2\x2\x5A6");
		sb.Append("\x5A8\a\xD4\x2\x2\x5A7\x5A6\x3\x2\x2\x2\x5A8\x5A9\x3\x2\x2\x2");
		sb.Append("\x5A9\x5A7\x3\x2\x2\x2\x5A9\x5AA\x3\x2\x2\x2\x5AA\x5B1\x3\x2");
		sb.Append("\x2\x2\x5AB\x5AD\x5\x1A\xE\x2\x5AC\x5AE\a\xD4\x2\x2\x5AD\x5AC");
		sb.Append("\x3\x2\x2\x2\x5AE\x5AF\x3\x2\x2\x2\x5AF\x5AD\x3\x2\x2\x2\x5AF");
		sb.Append("\x5B0\x3\x2\x2\x2\x5B0\x5B2\x3\x2\x2\x2\x5B1\x5AB\x3\x2\x2\x2");
		sb.Append("\x5B1\x5B2\x3\x2\x2\x2\x5B2\x5B3\x3\x2\x2\x2\x5B3\x5B4\a\x32");
		sb.Append("\x2\x2\x5B4\x8B\x3\x2\x2\x2\x5B5\x5B6\x5\x114\x8B\x2\x5B6\x5B7");
		sb.Append("\a\xD6\x2\x2\x5B7\x5B9\x3\x2\x2\x2\x5B8\x5B5\x3\x2\x2\x2\x5B8");
		sb.Append("\x5B9\x3\x2\x2\x2\x5B9\x5BC\x3\x2\x2\x2\x5BA\x5BB\a\x97\x2\x2");
		sb.Append("\x5BB\x5BD\a\xD6\x2\x2\x5BC\x5BA\x3\x2\x2\x2\x5BC\x5BD\x3\x2");
		sb.Append("\x2\x2\x5BD\x5BE\x3\x2\x2\x2\x5BE\x5BF\a}\x2\x2\x5BF\x5C0\a");
		sb.Append("\xD6\x2\x2\x5C0\x5C5\x5\xFC\x7F\x2\x5C1\x5C3\a\xD6\x2\x2\x5C2");
		sb.Append("\x5C1\x3\x2\x2\x2\x5C2\x5C3\x3\x2\x2\x2\x5C3\x5C4\x3\x2\x2\x2");
		sb.Append("\x5C4\x5C6\x5\xF2z\x2\x5C5\x5C2\x3\x2\x2\x2\x5C5\x5C6\x3\x2");
		sb.Append("\x2\x2\x5C6\x5C8\x3\x2\x2\x2\x5C7\x5C9\a\xD4\x2\x2\x5C8\x5C7");
		sb.Append("\x3\x2\x2\x2\x5C9\x5CA\x3\x2\x2\x2\x5CA\x5C8\x3\x2\x2\x2\x5CA");
		sb.Append("\x5CB\x3\x2\x2\x2\x5CB\x5D2\x3\x2\x2\x2\x5CC\x5CE\x5\x1A\xE");
		sb.Append("\x2\x5CD\x5CF\a\xD4\x2\x2\x5CE\x5CD\x3\x2\x2\x2\x5CF\x5D0\x3");
		sb.Append("\x2\x2\x2\x5D0\x5CE\x3\x2\x2\x2\x5D0\x5D1\x3\x2\x2\x2\x5D1\x5D3");
		sb.Append("\x3\x2\x2\x2\x5D2\x5CC\x3\x2\x2\x2\x5D2\x5D3\x3\x2\x2\x2\x5D3");
		sb.Append("\x5D4\x3\x2\x2\x2\x5D4\x5D5\a\x32\x2\x2\x5D5\x8D\x3\x2\x2\x2");
		sb.Append("\x5D6\x5D7\a\x80\x2\x2\x5D7\x5D8\a\xD6\x2\x2\x5D8\x5DA\x5\xC4");
		sb.Append("\x63\x2\x5D9\x5DB\a\xD6\x2\x2\x5DA\x5D9\x3\x2\x2\x2\x5DA\x5DB");
		sb.Append("\x3\x2\x2\x2\x5DB\x5DC\x3\x2\x2\x2\x5DC\x5DE\a\xB4\x2\x2\x5DD");
		sb.Append("\x5DF\a\xD6\x2\x2\x5DE\x5DD\x3\x2\x2\x2\x5DE\x5DF\x3\x2\x2\x2");
		sb.Append("\x5DF\x5E1\x3\x2\x2\x2\x5E0\x5E2\x5\xC4\x63\x2\x5E1\x5E0\x3");
		sb.Append("\x2\x2\x2\x5E1\x5E2\x3\x2\x2\x2\x5E2\x5E4\x3\x2\x2\x2\x5E3\x5E5");
		sb.Append("\a\xD6\x2\x2\x5E4\x5E3\x3\x2\x2\x2\x5E4\x5E5\x3\x2\x2\x2\x5E5");
		sb.Append("\x5E6\x3\x2\x2\x2\x5E6\x5E8\a\xB4\x2\x2\x5E7\x5E9\a\xD6\x2\x2");
		sb.Append("\x5E8\x5E7\x3\x2\x2\x2\x5E8\x5E9\x3\x2\x2\x2\x5E9\x5EA\x3\x2");
		sb.Append("\x2\x2\x5EA\x5EB\x5\xC4\x63\x2\x5EB\x8F\x3\x2\x2\x2\x5EC\x5ED");
		sb.Append("\a\x83\x2\x2\x5ED\x5EE\a\xD6\x2\x2\x5EE\x5FD\x5\xFC\x7F\x2\x5EF");
		sb.Append("\x5F1\a\xD6\x2\x2\x5F0\x5EF\x3\x2\x2\x2\x5F0\x5F1\x3\x2\x2\x2");
		sb.Append("\x5F1\x5F2\x3\x2\x2\x2\x5F2\x5F4\a\xBE\x2\x2\x5F3\x5F5\a\xD6");
		sb.Append("\x2\x2\x5F4\x5F3\x3\x2\x2\x2\x5F4\x5F5\x3\x2\x2\x2\x5F5\x5FA");
		sb.Append("\x3\x2\x2\x2\x5F6\x5F8\x5\xECw\x2\x5F7\x5F9\a\xD6\x2\x2\x5F8");
		sb.Append("\x5F7\x3\x2\x2\x2\x5F8\x5F9\x3\x2\x2\x2\x5F9\x5FB\x3\x2\x2\x2");
		sb.Append("\x5FA\x5F6\x3\x2\x2\x2\x5FA\x5FB\x3\x2\x2\x2\x5FB\x5FC\x3\x2");
		sb.Append("\x2\x2\x5FC\x5FE\a\xC8\x2\x2\x5FD\x5F0\x3\x2\x2\x2\x5FD\x5FE");
		sb.Append("\x3\x2\x2\x2\x5FE\x91\x3\x2\x2\x2\x5FF\x602\a\x82\x2\x2\x600");
		sb.Append("\x601\a\xD6\x2\x2\x601\x603\x5\xC4\x63\x2\x602\x600\x3\x2\x2");
		sb.Append("\x2\x602\x603\x3\x2\x2\x2\x603\x93\x3\x2\x2\x2\x604\x605\a\x86");
		sb.Append("\x2\x2\x605\x608\a\xD6\x2\x2\x606\x607\ay\x2\x2\x607\x609\a");
		sb.Append("\xD6\x2\x2\x608\x606\x3\x2\x2\x2\x608\x609\x3\x2\x2\x2\x609");
		sb.Append("\x60A\x3\x2\x2\x2\x60A\x615\x5\x96L\x2\x60B\x60D\a\xD6\x2\x2");
		sb.Append("\x60C\x60B\x3\x2\x2\x2\x60C\x60D\x3\x2\x2\x2\x60D\x60E\x3\x2");
		sb.Append("\x2\x2\x60E\x610\a\xB4\x2\x2\x60F\x611\a\xD6\x2\x2\x610\x60F");
		sb.Append("\x3\x2\x2\x2\x610\x611\x3\x2\x2\x2\x611\x612\x3\x2\x2\x2\x612");
		sb.Append("\x614\x5\x96L\x2\x613\x60C\x3\x2\x2\x2\x614\x617\x3\x2\x2\x2");
		sb.Append("\x615\x613\x3\x2\x2\x2\x615\x616\x3\x2\x2\x2\x616\x95\x3\x2");
		sb.Append("\x2\x2\x617\x615\x3\x2\x2\x2\x618\x61A\x5\xE0q\x2\x619\x61B");
		sb.Append("\a\xD6\x2\x2\x61A\x619\x3\x2\x2\x2\x61A\x61B\x3\x2\x2\x2\x61B");
		sb.Append("\x61C\x3\x2\x2\x2\x61C\x61E\a\xBE\x2\x2\x61D\x61F\a\xD6\x2\x2");
		sb.Append("\x61E\x61D\x3\x2\x2\x2\x61E\x61F\x3\x2\x2\x2\x61F\x620\x3\x2");
		sb.Append("\x2\x2\x620\x622\x5\xF8}\x2\x621\x623\a\xD6\x2\x2\x622\x621");
		sb.Append("\x3\x2\x2\x2\x622\x623\x3\x2\x2\x2\x623\x624\x3\x2\x2\x2\x624");
		sb.Append("\x627\a\xC8\x2\x2\x625\x626\a\xD6\x2\x2\x626\x628\x5\xFE\x80");
		sb.Append("\x2\x627\x625\x3\x2\x2\x2\x627\x628\x3\x2\x2\x2\x628\x97\x3");
		sb.Append("\x2\x2\x2\x629\x62A\a\x88\x2\x2\x62A\x99\x3\x2\x2\x2\x62B\x631");
		sb.Append("\a\x89\x2\x2\x62C\x62F\a\xD6\x2\x2\x62D\x630\ai\x2\x2\x62E\x630");
		sb.Append("\x5\xFC\x7F\x2\x62F\x62D\x3\x2\x2\x2\x62F\x62E\x3\x2\x2\x2\x630");
		sb.Append("\x632\x3\x2\x2\x2\x631\x62C\x3\x2\x2\x2\x631\x632\x3\x2\x2\x2");
		sb.Append("\x632\x9B\x3\x2\x2\x2\x633\x634\a\x8A\x2\x2\x634\x9D\x3\x2\x2");
		sb.Append("\x2\x635\x636\a\x8B\x2\x2\x636\x637\a\xD6\x2\x2\x637\x638\x5");
		sb.Append("\xC4\x63\x2\x638\x9F\x3\x2\x2\x2\x639\x63A\a\x8C\x2\x2\x63A");
		sb.Append("\x63B\a\xD6\x2\x2\x63B\x63D\x5\xE0q\x2\x63C\x63E\a\xD6\x2\x2");
		sb.Append("\x63D\x63C\x3\x2\x2\x2\x63D\x63E\x3\x2\x2\x2\x63E\x63F\x3\x2");
		sb.Append("\x2\x2\x63F\x641\a\xB8\x2\x2\x640\x642\a\xD6\x2\x2\x641\x640");
		sb.Append("\x3\x2\x2\x2\x641\x642\x3\x2\x2\x2\x642\x643\x3\x2\x2\x2\x643");
		sb.Append("\x644\x5\xC4\x63\x2\x644\xA1\x3\x2\x2\x2\x645\x646\a\x8D\x2");
		sb.Append("\x2\x646\x647\a\xD6\x2\x2\x647\x649\x5\xC4\x63\x2\x648\x64A");
		sb.Append("\a\xD6\x2\x2\x649\x648\x3\x2\x2\x2\x649\x64A\x3\x2\x2\x2\x64A");
		sb.Append("\x64B\x3\x2\x2\x2\x64B\x64D\a\xB4\x2\x2\x64C\x64E\a\xD6\x2\x2");
		sb.Append("\x64D\x64C\x3\x2\x2\x2\x64D\x64E\x3\x2\x2\x2\x64E\x64F\x3\x2");
		sb.Append("\x2\x2\x64F\x650\x5\xC4\x63\x2\x650\xA3\x3\x2\x2\x2\x651\x652");
		sb.Append("\a\x8E\x2\x2\x652\x653\a\xD6\x2\x2\x653\x655\x5\xC4\x63\x2\x654");
		sb.Append("\x656\a\xD6\x2\x2\x655\x654\x3\x2\x2\x2\x655\x656\x3\x2\x2\x2");
		sb.Append("\x656\x657\x3\x2\x2\x2\x657\x659\a\xB4\x2\x2\x658\x65A\a\xD6");
		sb.Append("\x2\x2\x659\x658\x3\x2\x2\x2\x659\x65A\x3\x2\x2\x2\x65A\x65B");
		sb.Append("\x3\x2\x2\x2\x65B\x65D\x5\xC4\x63\x2\x65C\x65E\a\xD6\x2\x2\x65D");
		sb.Append("\x65C\x3\x2\x2\x2\x65D\x65E\x3\x2\x2\x2\x65E\x65F\x3\x2\x2\x2");
		sb.Append("\x65F\x661\a\xB4\x2\x2\x660\x662\a\xD6\x2\x2\x661\x660\x3\x2");
		sb.Append("\x2\x2\x661\x662\x3\x2\x2\x2\x662\x663\x3\x2\x2\x2\x663\x665");
		sb.Append("\x5\xC4\x63\x2\x664\x666\a\xD6\x2\x2\x665\x664\x3\x2\x2\x2\x665");
		sb.Append("\x666\x3\x2\x2\x2\x666\x667\x3\x2\x2\x2\x667\x669\a\xB4\x2\x2");
		sb.Append("\x668\x66A\a\xD6\x2\x2\x669\x668\x3\x2\x2\x2\x669\x66A\x3\x2");
		sb.Append("\x2\x2\x66A\x66B\x3\x2\x2\x2\x66B\x66C\x5\xC4\x63\x2\x66C\xA5");
		sb.Append("\x3\x2\x2\x2\x66D\x66E\a\x8F\x2\x2\x66E\x66F\a\xD6\x2\x2\x66F");
		sb.Append("\x671\x5\xC4\x63\x2\x670\x672\a\xD6\x2\x2\x671\x670\x3\x2\x2");
		sb.Append("\x2\x671\x672\x3\x2\x2\x2\x672\x673\x3\x2\x2\x2\x673\x675\a");
		sb.Append("\xB4\x2\x2\x674\x676\a\xD6\x2\x2\x675\x674\x3\x2\x2\x2\x675");
		sb.Append("\x676\x3\x2\x2\x2\x676\x677\x3\x2\x2\x2\x677\x678\x5\xC4\x63");
		sb.Append("\x2\x678\xA7\x3\x2\x2\x2\x679\x67A\a\x90\x2\x2\x67A\x67B\a\xD6");
		sb.Append("\x2\x2\x67B\x67C\a\x13\x2\x2\x67C\x67D\a\xD6\x2\x2\x67D\x67F");
		sb.Append("\x5\xC4\x63\x2\x67E\x680\a\xD4\x2\x2\x67F\x67E\x3\x2\x2\x2\x680");
		sb.Append("\x681\x3\x2\x2\x2\x681\x67F\x3\x2\x2\x2\x681\x682\x3\x2\x2\x2");
		sb.Append("\x682\x686\x3\x2\x2\x2\x683\x685\x5\xAAV\x2\x684\x683\x3\x2");
		sb.Append("\x2\x2\x685\x688\x3\x2\x2\x2\x686\x684\x3\x2\x2\x2\x686\x687");
		sb.Append("\x3\x2\x2\x2\x687\x68A\x3\x2\x2\x2\x688\x686\x3\x2\x2\x2\x689");
		sb.Append("\x68B\a\xD6\x2\x2\x68A\x689\x3\x2\x2\x2\x68A\x68B\x3\x2\x2\x2");
		sb.Append("\x68B\x68C\x3\x2\x2\x2\x68C\x68D\a\x33\x2\x2\x68D\xA9\x3\x2");
		sb.Append("\x2\x2\x68E\x68F\a\x13\x2\x2\x68F\x690\a\xD6\x2\x2\x690\x692");
		sb.Append("\x5\xACW\x2\x691\x693\a\xD6\x2\x2\x692\x691\x3\x2\x2\x2\x692");
		sb.Append("\x693\x3\x2\x2\x2\x693\x6A2\x3\x2\x2\x2\x694\x696\a\xB3\x2\x2");
		sb.Append("\x695\x694\x3\x2\x2\x2\x695\x696\x3\x2\x2\x2\x696\x69A\x3\x2");
		sb.Append("\x2\x2\x697\x699\a\xD4\x2\x2\x698\x697\x3\x2\x2\x2\x699\x69C");
		sb.Append("\x3\x2\x2\x2\x69A\x698\x3\x2\x2\x2\x69A\x69B\x3\x2\x2\x2\x69B");
		sb.Append("\x6A3\x3\x2\x2\x2\x69C\x69A\x3\x2\x2\x2\x69D\x69F\a\xD4\x2\x2");
		sb.Append("\x69E\x69D\x3\x2\x2\x2\x69F\x6A0\x3\x2\x2\x2\x6A0\x69E\x3\x2");
		sb.Append("\x2\x2\x6A0\x6A1\x3\x2\x2\x2\x6A1\x6A3\x3\x2\x2\x2\x6A2\x695");
		sb.Append("\x3\x2\x2\x2\x6A2\x69E\x3\x2\x2\x2\x6A3\x6AA\x3\x2\x2\x2\x6A4");
		sb.Append("\x6A6\x5\x1A\xE\x2\x6A5\x6A7\a\xD4\x2\x2\x6A6\x6A5\x3\x2\x2");
		sb.Append("\x2\x6A7\x6A8\x3\x2\x2\x2\x6A8\x6A6\x3\x2\x2\x2\x6A8\x6A9\x3");
		sb.Append("\x2\x2\x2\x6A9\x6AB\x3\x2\x2\x2\x6AA\x6A4\x3\x2\x2\x2\x6AA\x6AB");
		sb.Append("\x3\x2\x2\x2\x6AB\xAB\x3\x2\x2\x2\x6AC\x6D8\a-\x2\x2\x6AD\x6AF");
		sb.Append("\aP\x2\x2\x6AE\x6B0\a\xD6\x2\x2\x6AF\x6AE\x3\x2\x2\x2\x6AF\x6B0");
		sb.Append("\x3\x2\x2\x2\x6B0\x6B1\x3\x2\x2\x2\x6B1\x6B3\x5\x104\x83\x2");
		sb.Append("\x6B2\x6B4\a\xD6\x2\x2\x6B3\x6B2\x3\x2\x2\x2\x6B3\x6B4\x3\x2");
		sb.Append("\x2\x2\x6B4\x6B5\x3\x2\x2\x2\x6B5\x6B6\x5\xC4\x63\x2\x6B6\x6D8");
		sb.Append("\x3\x2\x2\x2\x6B7\x6C2\x5\xC4\x63\x2\x6B8\x6BA\a\xD6\x2\x2\x6B9");
		sb.Append("\x6B8\x3\x2\x2\x2\x6B9\x6BA\x3\x2\x2\x2\x6BA\x6BB\x3\x2\x2\x2");
		sb.Append("\x6BB\x6BD\a\xB4\x2\x2\x6BC\x6BE\a\xD6\x2\x2\x6BD\x6BC\x3\x2");
		sb.Append("\x2\x2\x6BD\x6BE\x3\x2\x2\x2\x6BE\x6BF\x3\x2\x2\x2\x6BF\x6C1");
		sb.Append("\x5\xC4\x63\x2\x6C0\x6B9\x3\x2\x2\x2\x6C1\x6C4\x3\x2\x2\x2\x6C2");
		sb.Append("\x6C0\x3\x2\x2\x2\x6C2\x6C3\x3\x2\x2\x2\x6C3\x6D8\x3\x2\x2\x2");
		sb.Append("\x6C4\x6C2\x3\x2\x2\x2\x6C5\x6C6\a\xCF\x2\x2\x6C6\x6C7\a\xD6");
		sb.Append("\x2\x2\x6C7\x6C8\a\xA0\x2\x2\x6C8\x6C9\a\xD6\x2\x2\x6C9\x6D4");
		sb.Append("\x5\xC4\x63\x2\x6CA\x6CC\a\xD6\x2\x2\x6CB\x6CA\x3\x2\x2\x2\x6CB");
		sb.Append("\x6CC\x3\x2\x2\x2\x6CC\x6CD\x3\x2\x2\x2\x6CD\x6CF\a\xB4\x2\x2");
		sb.Append("\x6CE\x6D0\a\xD6\x2\x2\x6CF\x6CE\x3\x2\x2\x2\x6CF\x6D0\x3\x2");
		sb.Append("\x2\x2\x6D0\x6D1\x3\x2\x2\x2\x6D1\x6D3\x5\xC4\x63\x2\x6D2\x6CB");
		sb.Append("\x3\x2\x2\x2\x6D3\x6D6\x3\x2\x2\x2\x6D4\x6D2\x3\x2\x2\x2\x6D4");
		sb.Append("\x6D5\x3\x2\x2\x2\x6D5\x6D8\x3\x2\x2\x2\x6D6\x6D4\x3\x2\x2\x2");
		sb.Append("\x6D7\x6AC\x3\x2\x2\x2\x6D7\x6AD\x3\x2\x2\x2\x6D7\x6B7\x3\x2");
		sb.Append("\x2\x2\x6D7\x6C5\x3\x2\x2\x2\x6D8\xAD\x3\x2\x2\x2\x6D9\x6DA");
		sb.Append("\a\x91\x2\x2\x6DA\x6DB\a\xD6\x2\x2\x6DB\x6E4\x5\xC4\x63\x2\x6DC");
		sb.Append("\x6DE\a\xD6\x2\x2\x6DD\x6DC\x3\x2\x2\x2\x6DD\x6DE\x3\x2\x2\x2");
		sb.Append("\x6DE\x6DF\x3\x2\x2\x2\x6DF\x6E1\a\xB4\x2\x2\x6E0\x6E2\a\xD6");
		sb.Append("\x2\x2\x6E1\x6E0\x3\x2\x2\x2\x6E1\x6E2\x3\x2\x2\x2\x6E2\x6E3");
		sb.Append("\x3\x2\x2\x2\x6E3\x6E5\x5\xC4\x63\x2\x6E4\x6DD\x3\x2\x2\x2\x6E4");
		sb.Append("\x6E5\x3\x2\x2\x2\x6E5\xAF\x3\x2\x2\x2\x6E6\x6E7\a\x93\x2\x2");
		sb.Append("\x6E7\x6E8\a\xD6\x2\x2\x6E8\x6EA\x5\xC4\x63\x2\x6E9\x6EB\a\xD6");
		sb.Append("\x2\x2\x6EA\x6E9\x3\x2\x2\x2\x6EA\x6EB\x3\x2\x2\x2\x6EB\x6EC");
		sb.Append("\x3\x2\x2\x2\x6EC\x6EE\a\xB4\x2\x2\x6ED\x6EF\a\xD6\x2\x2\x6EE");
		sb.Append("\x6ED\x3\x2\x2\x2\x6EE\x6EF\x3\x2\x2\x2\x6EF\x6F0\x3\x2\x2\x2");
		sb.Append("\x6F0\x6F1\x5\xC4\x63\x2\x6F1\xB1\x3\x2\x2\x2\x6F2\x6F3\a\x92");
		sb.Append("\x2\x2\x6F3\x6F4\a\xD6\x2\x2\x6F4\x6F6\x5\xE0q\x2\x6F5\x6F7");
		sb.Append("\a\xD6\x2\x2\x6F6\x6F5\x3\x2\x2\x2\x6F6\x6F7\x3\x2\x2\x2\x6F7");
		sb.Append("\x6F8\x3\x2\x2\x2\x6F8\x6FA\a\xB8\x2\x2\x6F9\x6FB\a\xD6\x2\x2");
		sb.Append("\x6FA\x6F9\x3\x2\x2\x2\x6FA\x6FB\x3\x2\x2\x2\x6FB\x6FC\x3\x2");
		sb.Append("\x2\x2\x6FC\x6FD\x5\xC4\x63\x2\x6FD\xB3\x3\x2\x2\x2\x6FE\x6FF");
		sb.Append("\a\x99\x2\x2\x6FF\xB5\x3\x2\x2\x2\x700\x701\x5\x114\x8B\x2\x701");
		sb.Append("\x702\a\xD6\x2\x2\x702\x704\x3\x2\x2\x2\x703\x700\x3\x2\x2\x2");
		sb.Append("\x703\x704\x3\x2\x2\x2\x704\x707\x3\x2\x2\x2\x705\x706\a\x97");
		sb.Append("\x2\x2\x706\x708\a\xD6\x2\x2\x707\x705\x3\x2\x2\x2\x707\x708");
		sb.Append("\x3\x2\x2\x2\x708\x709\x3\x2\x2\x2\x709\x70A\a\x9B\x2\x2\x70A");
		sb.Append("\x70B\a\xD6\x2\x2\x70B\x710\x5\xFC\x7F\x2\x70C\x70E\a\xD6\x2");
		sb.Append("\x2\x70D\x70C\x3\x2\x2\x2\x70D\x70E\x3\x2\x2\x2\x70E\x70F\x3");
		sb.Append("\x2\x2\x2\x70F\x711\x5\xF2z\x2\x710\x70D\x3\x2\x2\x2\x710\x711");
		sb.Append("\x3\x2\x2\x2\x711\x713\x3\x2\x2\x2\x712\x714\a\xD4\x2\x2\x713");
		sb.Append("\x712\x3\x2\x2\x2\x714\x715\x3\x2\x2\x2\x715\x713\x3\x2\x2\x2");
		sb.Append("\x715\x716\x3\x2\x2\x2\x716\x71D\x3\x2\x2\x2\x717\x719\x5\x1A");
		sb.Append("\xE\x2\x718\x71A\a\xD4\x2\x2\x719\x718\x3\x2\x2\x2\x71A\x71B");
		sb.Append("\x3\x2\x2\x2\x71B\x719\x3\x2\x2\x2\x71B\x71C\x3\x2\x2\x2\x71C");
		sb.Append("\x71E\x3\x2\x2\x2\x71D\x717\x3\x2\x2\x2\x71D\x71E\x3\x2\x2\x2");
		sb.Append("\x71E\x71F\x3\x2\x2\x2\x71F\x720\a\x34\x2\x2\x720\xB7\x3\x2");
		sb.Append("\x2\x2\x721\x723\a\x9F\x2\x2\x722\x724\a\xD6\x2\x2\x723\x722");
		sb.Append("\x3\x2\x2\x2\x723\x724\x3\x2\x2\x2\x724\x725\x3\x2\x2\x2\x725");
		sb.Append("\x727\a\xB8\x2\x2\x726\x728\a\xD6\x2\x2\x727\x726\x3\x2\x2\x2");
		sb.Append("\x727\x728\x3\x2\x2\x2\x728\x729\x3\x2\x2\x2\x729\x72A\x5\xC4");
		sb.Append("\x63\x2\x72A\xB9\x3\x2\x2\x2\x72B\x72C\x5\x114\x8B\x2\x72C\x72D");
		sb.Append("\a\xD6\x2\x2\x72D\x72F\x3\x2\x2\x2\x72E\x72B\x3\x2\x2\x2\x72E");
		sb.Append("\x72F\x3\x2\x2\x2\x72F\x730\x3\x2\x2\x2\x730\x731\a\xA2\x2\x2");
		sb.Append("\x731\x732\a\xD6\x2\x2\x732\x734\x5\xFC\x7F\x2\x733\x735\a\xD4");
		sb.Append("\x2\x2\x734\x733\x3\x2\x2\x2\x735\x736\x3\x2\x2\x2\x736\x734");
		sb.Append("\x3\x2\x2\x2\x736\x737\x3\x2\x2\x2\x737\x73B\x3\x2\x2\x2\x738");
		sb.Append("\x73A\x5\xBC_\x2\x739\x738\x3\x2\x2\x2\x73A\x73D\x3\x2\x2\x2");
		sb.Append("\x73B\x739\x3\x2\x2\x2\x73B\x73C\x3\x2\x2\x2\x73C\x73E\x3\x2");
		sb.Append("\x2\x2\x73D\x73B\x3\x2\x2\x2\x73E\x73F\a\x35\x2\x2\x73F\xBB");
		sb.Append("\x3\x2\x2\x2\x740\x74F\x5\xFC\x7F\x2\x741\x743\a\xD6\x2\x2\x742");
		sb.Append("\x741\x3\x2\x2\x2\x742\x743\x3\x2\x2\x2\x743\x744\x3\x2\x2\x2");
		sb.Append("\x744\x749\a\xBE\x2\x2\x745\x747\a\xD6\x2\x2\x746\x745\x3\x2");
		sb.Append("\x2\x2\x746\x747\x3\x2\x2\x2\x747\x748\x3\x2\x2\x2\x748\x74A");
		sb.Append("\x5\xF8}\x2\x749\x746\x3\x2\x2\x2\x749\x74A\x3\x2\x2\x2\x74A");
		sb.Append("\x74C\x3\x2\x2\x2\x74B\x74D\a\xD6\x2\x2\x74C\x74B\x3\x2\x2\x2");
		sb.Append("\x74C\x74D\x3\x2\x2\x2\x74D\x74E\x3\x2\x2\x2\x74E\x750\a\xC8");
		sb.Append("\x2\x2\x74F\x742\x3\x2\x2\x2\x74F\x750\x3\x2\x2\x2\x750\x753");
		sb.Append("\x3\x2\x2\x2\x751\x752\a\xD6\x2\x2\x752\x754\x5\xFE\x80\x2\x753");
		sb.Append("\x751\x3\x2\x2\x2\x753\x754\x3\x2\x2\x2\x754\x756\x3\x2\x2\x2");
		sb.Append("\x755\x757\a\xD4\x2\x2\x756\x755\x3\x2\x2\x2\x757\x758\x3\x2");
		sb.Append("\x2\x2\x758\x756\x3\x2\x2\x2\x758\x759\x3\x2\x2\x2\x759\xBD");
		sb.Append("\x3\x2\x2\x2\x75A\x75B\a\xA3\x2\x2\x75B\x75C\a\xD6\x2\x2\x75C");
		sb.Append("\x761\x5\xC4\x63\x2\x75D\x75E\a\xD6\x2\x2\x75E\x75F\aP\x2\x2");
		sb.Append("\x75F\x760\a\xD6\x2\x2\x760\x762\x5\x110\x89\x2\x761\x75D\x3");
		sb.Append("\x2\x2\x2\x761\x762\x3\x2\x2\x2\x762\xBF\x3\x2\x2\x2\x763\x764");
		sb.Append("\a\xA4\x2\x2\x764\x765\a\xD6\x2\x2\x765\x766\x5\xC4\x63\x2\x766");
		sb.Append("\xC1\x3\x2\x2\x2\x767\x768\a\xA5\x2\x2\x768\x769\a\xD6\x2\x2");
		sb.Append("\x769\x778\x5\xC4\x63\x2\x76A\x76C\a\xD6\x2\x2\x76B\x76A\x3");
		sb.Append("\x2\x2\x2\x76B\x76C\x3\x2\x2\x2\x76C\x76D\x3\x2\x2\x2\x76D\x76F");
		sb.Append("\a\xB4\x2\x2\x76E\x770\a\xD6\x2\x2\x76F\x76E\x3\x2\x2\x2\x76F");
		sb.Append("\x770\x3\x2\x2\x2\x770\x771\x3\x2\x2\x2\x771\x776\x5\xC4\x63");
		sb.Append("\x2\x772\x773\a\xD6\x2\x2\x773\x774\a\xA0\x2\x2\x774\x775\a");
		sb.Append("\xD6\x2\x2\x775\x777\x5\xC4\x63\x2\x776\x772\x3\x2\x2\x2\x776");
		sb.Append("\x777\x3\x2\x2\x2\x777\x779\x3\x2\x2\x2\x778\x76B\x3\x2\x2\x2");
		sb.Append("\x778\x779\x3\x2\x2\x2\x779\xC3\x3\x2\x2\x2\x77A\x77B\b\x63");
		sb.Append("\x1\x2\x77B\x7B1\x5\x10E\x88\x2\x77C\x7B1\x5\xE0q\x2\x77D\x77F");
		sb.Append("\a\xBE\x2\x2\x77E\x780\a\xD6\x2\x2\x77F\x77E\x3\x2\x2\x2\x77F");
		sb.Append("\x780\x3\x2\x2\x2\x780\x781\x3\x2\x2\x2\x781\x78C\x5\xC4\x63");
		sb.Append("\x2\x782\x784\a\xD6\x2\x2\x783\x782\x3\x2\x2\x2\x783\x784\x3");
		sb.Append("\x2\x2\x2\x784\x785\x3\x2\x2\x2\x785\x787\a\xB4\x2\x2\x786\x788");
		sb.Append("\a\xD6\x2\x2\x787\x786\x3\x2\x2\x2\x787\x788\x3\x2\x2\x2\x788");
		sb.Append("\x789\x3\x2\x2\x2\x789\x78B\x5\xC4\x63\x2\x78A\x783\x3\x2\x2");
		sb.Append("\x2\x78B\x78E\x3\x2\x2\x2\x78C\x78A\x3\x2\x2\x2\x78C\x78D\x3");
		sb.Append("\x2\x2\x2\x78D\x78F\x3\x2\x2\x2\x78E\x78C\x3\x2\x2\x2\x78F\x790");
		sb.Append("\a\xC8\x2\x2\x790\x7B1\x3\x2\x2\x2\x791\x792\aj\x2\x2\x792\x793");
		sb.Append("\a\xD6\x2\x2\x793\x7B1\x5\xC4\x63\x1E\x794\x7B1\x5\xBE`\x2\x795");
		sb.Append("\x7B1\x5t;\x2\x796\x797\a\x4\x2\x2\x797\x798\a\xD6\x2\x2\x798");
		sb.Append("\x7B1\x5\xC4\x63\x1B\x799\x79B\x5\xE0q\x2\x79A\x79C\a\xD6\x2");
		sb.Append("\x2\x79B\x79A\x3\x2\x2\x2\x79B\x79C\x3\x2\x2\x2\x79C\x79D\x3");
		sb.Append("\x2\x2\x2\x79D\x79F\a\xB1\x2\x2\x79E\x7A0\a\xD6\x2\x2\x79F\x79E");
		sb.Append("\x3\x2\x2\x2\x79F\x7A0\x3\x2\x2\x2\x7A0\x7A1\x3\x2\x2\x2\x7A1");
		sb.Append("\x7A2\x5\xC4\x63\x1A\x7A2\x7B1\x3\x2\x2\x2\x7A3\x7A5\a\xC0\x2");
		sb.Append("\x2\x7A4\x7A6\a\xD6\x2\x2\x7A5\x7A4\x3\x2\x2\x2\x7A5\x7A6\x3");
		sb.Append("\x2\x2\x2\x7A6\x7A7\x3\x2\x2\x2\x7A7\x7B1\x5\xC4\x63\x10\x7A8");
		sb.Append("\x7AA\a\xC5\x2\x2\x7A9\x7AB\a\xD6\x2\x2\x7AA\x7A9\x3\x2\x2\x2");
		sb.Append("\x7AA\x7AB\x3\x2\x2\x2\x7AB\x7AC\x3\x2\x2\x2\x7AC\x7B1\x5\xC4");
		sb.Append("\x63\xF\x7AD\x7AE\ak\x2\x2\x7AE\x7AF\a\xD6\x2\x2\x7AF\x7B1\x5");
		sb.Append("\xC4\x63\x3\x7B0\x77A\x3\x2\x2\x2\x7B0\x77C\x3\x2\x2\x2\x7B0");
		sb.Append("\x77D\x3\x2\x2\x2\x7B0\x791\x3\x2\x2\x2\x7B0\x794\x3\x2\x2\x2");
		sb.Append("\x7B0\x795\x3\x2\x2\x2\x7B0\x796\x3\x2\x2\x2\x7B0\x799\x3\x2");
		sb.Append("\x2\x2\x7B0\x7A3\x3\x2\x2\x2\x7B0\x7A8\x3\x2\x2\x2\x7B0\x7AD");
		sb.Append("\x3\x2\x2\x2\x7B1\x850\x3\x2\x2\x2\x7B2\x7B3\f\x19\x2\x2\x7B3");
		sb.Append("\x7B4\a\xD6\x2\x2\x7B4\x7B5\aP\x2\x2\x7B5\x7B6\a\xD6\x2\x2\x7B6");
		sb.Append("\x84F\x5\xC4\x63\x1A\x7B7\x7B8\f\x18\x2\x2\x7B8\x7B9\a\xD6\x2");
		sb.Append("\x2\x7B9\x7BA\aZ\x2\x2\x7BA\x7BB\a\xD6\x2\x2\x7BB\x84F\x5\xC4");
		sb.Append("\x63\x19\x7BC\x7BE\f\x17\x2\x2\x7BD\x7BF\a\xD6\x2\x2\x7BE\x7BD");
		sb.Append("\x3\x2\x2\x2\x7BE\x7BF\x3\x2\x2\x2\x7BF\x7C0\x3\x2\x2\x2\x7C0");
		sb.Append("\x7C2\a\xBA\x2\x2\x7C1\x7C3\a\xD6\x2\x2\x7C2\x7C1\x3\x2\x2\x2");
		sb.Append("\x7C2\x7C3\x3\x2\x2\x2\x7C3\x7C4\x3\x2\x2\x2\x7C4\x84F\x5\xC4");
		sb.Append("\x63\x18\x7C5\x7C7\f\x16\x2\x2\x7C6\x7C8\a\xD6\x2\x2\x7C7\x7C6");
		sb.Append("\x3\x2\x2\x2\x7C7\x7C8\x3\x2\x2\x2\x7C8\x7C9\x3\x2\x2\x2\x7C9");
		sb.Append("\x7CB\a\xBD\x2\x2\x7CA\x7CC\a\xD6\x2\x2\x7CB\x7CA\x3\x2\x2\x2");
		sb.Append("\x7CB\x7CC\x3\x2\x2\x2\x7CC\x7CD\x3\x2\x2\x2\x7CD\x84F\x5\xC4");
		sb.Append("\x63\x17\x7CE\x7D0\f\x15\x2\x2\x7CF\x7D1\a\xD6\x2\x2\x7D0\x7CF");
		sb.Append("\x3\x2\x2\x2\x7D0\x7D1\x3\x2\x2\x2\x7D1\x7D2\x3\x2\x2\x2\x7D2");
		sb.Append("\x7D4\a\xBB\x2\x2\x7D3\x7D5\a\xD6\x2\x2\x7D4\x7D3\x3\x2\x2\x2");
		sb.Append("\x7D4\x7D5\x3\x2\x2\x2\x7D5\x7D6\x3\x2\x2\x2\x7D6\x84F\x5\xC4");
		sb.Append("\x63\x16\x7D7\x7D9\f\x14\x2\x2\x7D8\x7DA\a\xD6\x2\x2\x7D9\x7D8");
		sb.Append("\x3\x2\x2\x2\x7D9\x7DA\x3\x2\x2\x2\x7DA\x7DB\x3\x2\x2\x2\x7DB");
		sb.Append("\x7DD\a\xBF\x2\x2\x7DC\x7DE\a\xD6\x2\x2\x7DD\x7DC\x3\x2\x2\x2");
		sb.Append("\x7DD\x7DE\x3\x2\x2\x2\x7DE\x7DF\x3\x2\x2\x2\x7DF\x84F\x5\xC4");
		sb.Append("\x63\x15\x7E0\x7E2\f\x13\x2\x2\x7E1\x7E3\a\xD6\x2\x2\x7E2\x7E1");
		sb.Append("\x3\x2\x2\x2\x7E2\x7E3\x3\x2\x2\x2\x7E3\x7E4\x3\x2\x2\x2\x7E4");
		sb.Append("\x7E6\a\xC3\x2\x2\x7E5\x7E7\a\xD6\x2\x2\x7E6\x7E5\x3\x2\x2\x2");
		sb.Append("\x7E6\x7E7\x3\x2\x2\x2\x7E7\x7E8\x3\x2\x2\x2\x7E8\x84F\x5\xC4");
		sb.Append("\x63\x14\x7E9\x7EB\f\x12\x2\x2\x7EA\x7EC\a\xD6\x2\x2\x7EB\x7EA");
		sb.Append("\x3\x2\x2\x2\x7EB\x7EC\x3\x2\x2\x2\x7EC\x7ED\x3\x2\x2\x2\x7ED");
		sb.Append("\x7EF\a\xB8\x2\x2\x7EE\x7F0\a\xD6\x2\x2\x7EF\x7EE\x3\x2\x2\x2");
		sb.Append("\x7EF\x7F0\x3\x2\x2\x2\x7F0\x7F1\x3\x2\x2\x2\x7F1\x84F\x5\xC4");
		sb.Append("\x63\x13\x7F2\x7F3\f\x11\x2\x2\x7F3\x7F4\a\xD6\x2\x2\x7F4\x7F5");
		sb.Append("\a\xB0\x2\x2\x7F5\x7F6\a\xD6\x2\x2\x7F6\x84F\x5\xC4\x63\x12");
		sb.Append("\x7F7\x7F9\f\xE\x2\x2\x7F8\x7FA\a\xD6\x2\x2\x7F9\x7F8\x3\x2");
		sb.Append("\x2\x2\x7F9\x7FA\x3\x2\x2\x2\x7FA\x7FB\x3\x2\x2\x2\x7FB\x7FD");
		sb.Append("\a\xC5\x2\x2\x7FC\x7FE\a\xD6\x2\x2\x7FD\x7FC\x3\x2\x2\x2\x7FD");
		sb.Append("\x7FE\x3\x2\x2\x2\x7FE\x7FF\x3\x2\x2\x2\x7FF\x84F\x5\xC4\x63");
		sb.Append("\xF\x800\x802\f\r\x2\x2\x801\x803\a\xD6\x2\x2\x802\x801\x3\x2");
		sb.Append("\x2\x2\x802\x803\x3\x2\x2\x2\x803\x804\x3\x2\x2\x2\x804\x806");
		sb.Append("\ag\x2\x2\x805\x807\a\xD6\x2\x2\x806\x805\x3\x2\x2\x2\x806\x807");
		sb.Append("\x3\x2\x2\x2\x807\x808\x3\x2\x2\x2\x808\x84F\x5\xC4\x63\xE\x809");
		sb.Append("\x80B\f\f\x2\x2\x80A\x80C\a\xD6\x2\x2\x80B\x80A\x3\x2\x2\x2");
		sb.Append("\x80B\x80C\x3\x2\x2\x2\x80C\x80D\x3\x2\x2\x2\x80D\x80F\a\xB5");
		sb.Append("\x2\x2\x80E\x810\a\xD6\x2\x2\x80F\x80E\x3\x2\x2\x2\x80F\x810");
		sb.Append("\x3\x2\x2\x2\x810\x811\x3\x2\x2\x2\x811\x84F\x5\xC4\x63\r\x812");
		sb.Append("\x814\f\v\x2\x2\x813\x815\a\xD6\x2\x2\x814\x813\x3\x2\x2\x2");
		sb.Append("\x814\x815\x3\x2\x2\x2\x815\x816\x3\x2\x2\x2\x816\x818\a\xC2");
		sb.Append("\x2\x2\x817\x819\a\xD6\x2\x2\x818\x817\x3\x2\x2\x2\x818\x819");
		sb.Append("\x3\x2\x2\x2\x819\x81A\x3\x2\x2\x2\x81A\x84F\x5\xC4\x63\f\x81B");
		sb.Append("\x81D\f\n\x2\x2\x81C\x81E\a\xD6\x2\x2\x81D\x81C\x3\x2\x2\x2");
		sb.Append("\x81D\x81E\x3\x2\x2\x2\x81E\x81F\x3\x2\x2\x2\x81F\x821\a\xC0");
		sb.Append("\x2\x2\x820\x822\a\xD6\x2\x2\x821\x820\x3\x2\x2\x2\x821\x822");
		sb.Append("\x3\x2\x2\x2\x822\x823\x3\x2\x2\x2\x823\x84F\x5\xC4\x63\v\x824");
		sb.Append("\x826\f\t\x2\x2\x825\x827\a\xD6\x2\x2\x826\x825\x3\x2\x2\x2");
		sb.Append("\x826\x827\x3\x2\x2\x2\x827\x828\x3\x2\x2\x2\x828\x82A\a\xC7");
		sb.Append("\x2\x2\x829\x82B\a\xD6\x2\x2\x82A\x829\x3\x2\x2\x2\x82A\x82B");
		sb.Append("\x3\x2\x2\x2\x82B\x82C\x3\x2\x2\x2\x82C\x84F\x5\xC4\x63\n\x82D");
		sb.Append("\x82E\f\b\x2\x2\x82E\x82F\a\xD6\x2\x2\x82F\x830\aL\x2\x2\x830");
		sb.Append("\x831\a\xD6\x2\x2\x831\x84F\x5\xC4\x63\t\x832\x833\f\a\x2\x2");
		sb.Append("\x833\x834\a\xD6\x2\x2\x834\x835\a\x39\x2\x2\x835\x836\a\xD6");
		sb.Append("\x2\x2\x836\x84F\x5\xC4\x63\b\x837\x839\f\x6\x2\x2\x838\x83A");
		sb.Append("\a\xD6\x2\x2\x839\x838\x3\x2\x2\x2\x839\x83A\x3\x2\x2\x2\x83A");
		sb.Append("\x83B\x3\x2\x2\x2\x83B\x83D\a\xAF\x2\x2\x83C\x83E\a\xD6\x2\x2");
		sb.Append("\x83D\x83C\x3\x2\x2\x2\x83D\x83E\x3\x2\x2\x2\x83E\x83F\x3\x2");
		sb.Append("\x2\x2\x83F\x84F\x5\xC4\x63\a\x840\x842\f\x5\x2\x2\x841\x843");
		sb.Append("\a\xD6\x2\x2\x842\x841\x3\x2\x2\x2\x842\x843\x3\x2\x2\x2\x843");
		sb.Append("\x844\x3\x2\x2\x2\x844\x846\av\x2\x2\x845\x847\a\xD6\x2\x2\x846");
		sb.Append("\x845\x3\x2\x2\x2\x846\x847\x3\x2\x2\x2\x847\x848\x3\x2\x2\x2");
		sb.Append("\x848\x84F\x5\xC4\x63\x6\x849\x84A\f\x4\x2\x2\x84A\x84B\a\xD6");
		sb.Append("\x2\x2\x84B\x84C\a\x6\x2\x2\x84C\x84D\a\xD6\x2\x2\x84D\x84F");
		sb.Append("\x5\xC4\x63\x5\x84E\x7B2\x3\x2\x2\x2\x84E\x7B7\x3\x2\x2\x2\x84E");
		sb.Append("\x7BC\x3\x2\x2\x2\x84E\x7C5\x3\x2\x2\x2\x84E\x7CE\x3\x2\x2\x2");
		sb.Append("\x84E\x7D7\x3\x2\x2\x2\x84E\x7E0\x3\x2\x2\x2\x84E\x7E9\x3\x2");
		sb.Append("\x2\x2\x84E\x7F2\x3\x2\x2\x2\x84E\x7F7\x3\x2\x2\x2\x84E\x800");
		sb.Append("\x3\x2\x2\x2\x84E\x809\x3\x2\x2\x2\x84E\x812\x3\x2\x2\x2\x84E");
		sb.Append("\x81B\x3\x2\x2\x2\x84E\x824\x3\x2\x2\x2\x84E\x82D\x3\x2\x2\x2");
		sb.Append("\x84E\x832\x3\x2\x2\x2\x84E\x837\x3\x2\x2\x2\x84E\x840\x3\x2");
		sb.Append("\x2\x2\x84E\x849\x3\x2\x2\x2\x84F\x852\x3\x2\x2\x2\x850\x84E");
		sb.Append("\x3\x2\x2\x2\x850\x851\x3\x2\x2\x2\x851\xC5\x3\x2\x2\x2\x852");
		sb.Append("\x850\x3\x2\x2\x2\x853\x857\a)\x2\x2\x854\x857\a\x97\x2\x2\x855");
		sb.Append("\x857\x5\x114\x8B\x2\x856\x853\x3\x2\x2\x2\x856\x854\x3\x2\x2");
		sb.Append("\x2\x856\x855\x3\x2\x2\x2\x857\x858\x3\x2\x2\x2\x858\x85B\a");
		sb.Append("\xD6\x2\x2\x859\x85A\a\xAD\x2\x2\x85A\x85C\a\xD6\x2\x2\x85B");
		sb.Append("\x859\x3\x2\x2\x2\x85B\x85C\x3\x2\x2\x2\x85C\x85D\x3\x2\x2\x2");
		sb.Append("\x85D\x85E\x5\xC8\x65\x2\x85E\xC7\x3\x2\x2\x2\x85F\x86A\x5\xCA");
		sb.Append("\x66\x2\x860\x862\a\xD6\x2\x2\x861\x860\x3\x2\x2\x2\x861\x862");
		sb.Append("\x3\x2\x2\x2\x862\x863\x3\x2\x2\x2\x863\x865\a\xB4\x2\x2\x864");
		sb.Append("\x866\a\xD6\x2\x2\x865\x864\x3\x2\x2\x2\x865\x866\x3\x2\x2\x2");
		sb.Append("\x866\x867\x3\x2\x2\x2\x867\x869\x5\xCA\x66\x2\x868\x861\x3");
		sb.Append("\x2\x2\x2\x869\x86C\x3\x2\x2\x2\x86A\x868\x3\x2\x2\x2\x86A\x86B");
		sb.Append("\x3\x2\x2\x2\x86B\xC9\x3\x2\x2\x2\x86C\x86A\x3\x2\x2\x2\x86D");
		sb.Append("\x87F\x5\xFC\x7F\x2\x86E\x870\a\xD6\x2\x2\x86F\x86E\x3\x2\x2");
		sb.Append("\x2\x86F\x870\x3\x2\x2\x2\x870\x871\x3\x2\x2\x2\x871\x873\a");
		sb.Append("\xBE\x2\x2\x872\x874\a\xD6\x2\x2\x873\x872\x3\x2\x2\x2\x873");
		sb.Append("\x874\x3\x2\x2\x2\x874\x879\x3\x2\x2\x2\x875\x877\x5\xF8}\x2");
		sb.Append("\x876\x878\a\xD6\x2\x2\x877\x876\x3\x2\x2\x2\x877\x878\x3\x2");
		sb.Append("\x2\x2\x878\x87A\x3\x2\x2\x2\x879\x875\x3\x2\x2\x2\x879\x87A");
		sb.Append("\x3\x2\x2\x2\x87A\x87B\x3\x2\x2\x2\x87B\x87D\a\xC8\x2\x2\x87C");
		sb.Append("\x87E\a\xD6\x2\x2\x87D\x87C\x3\x2\x2\x2\x87D\x87E\x3\x2\x2\x2");
		sb.Append("\x87E\x880\x3\x2\x2\x2\x87F\x86F\x3\x2\x2\x2\x87F\x880\x3\x2");
		sb.Append("\x2\x2\x880\x882\x3\x2\x2\x2\x881\x883\x5\x112\x8A\x2\x882\x881");
		sb.Append("\x3\x2\x2\x2\x882\x883\x3\x2\x2\x2\x883\x886\x3\x2\x2\x2\x884");
		sb.Append("\x885\a\xD6\x2\x2\x885\x887\x5\xFE\x80\x2\x886\x884\x3\x2\x2");
		sb.Append("\x2\x886\x887\x3\x2\x2\x2\x887\xCB\x3\x2\x2\x2\x888\x889\a\xAA");
		sb.Append("\x2\x2\x889\x88A\a\xD6\x2\x2\x88A\x88C\x5\xC4\x63\x2\x88B\x88D");
		sb.Append("\a\xD4\x2\x2\x88C\x88B\x3\x2\x2\x2\x88D\x88E\x3\x2\x2\x2\x88E");
		sb.Append("\x88C\x3\x2\x2\x2\x88E\x88F\x3\x2\x2\x2\x88F\x895\x3\x2\x2\x2");
		sb.Append("\x890\x891\x5\x1A\xE\x2\x891\x892\a\xD4\x2\x2\x892\x894\x3\x2");
		sb.Append("\x2\x2\x893\x890\x3\x2\x2\x2\x894\x897\x3\x2\x2\x2\x895\x893");
		sb.Append("\x3\x2\x2\x2\x895\x896\x3\x2\x2\x2\x896\x898\x3\x2\x2\x2\x897");
		sb.Append("\x895\x3\x2\x2\x2\x898\x899\a\xA9\x2\x2\x899\xCD\x3\x2\x2\x2");
		sb.Append("\x89A\x89B\a\xAB\x2\x2\x89B\x89C\a\xD6\x2\x2\x89C\x89E\x5\xC4");
		sb.Append("\x63\x2\x89D\x89F\a\xD6\x2\x2\x89E\x89D\x3\x2\x2\x2\x89E\x89F");
		sb.Append("\x3\x2\x2\x2\x89F\x8A0\x3\x2\x2\x2\x8A0\x8A2\a\xB4\x2\x2\x8A1");
		sb.Append("\x8A3\a\xD6\x2\x2\x8A2\x8A1\x3\x2\x2\x2\x8A2\x8A3\x3\x2\x2\x2");
		sb.Append("\x8A3\x8A4\x3\x2\x2\x2\x8A4\x8A5\x5\xC4\x63\x2\x8A5\xCF\x3\x2");
		sb.Append("\x2\x2\x8A6\x8A7\a\xAC\x2\x2\x8A7\x8A8\a\xD6\x2\x2\x8A8\x8AA");
		sb.Append("\x5\xE0q\x2\x8A9\x8AB\a\xD4\x2\x2\x8AA\x8A9\x3\x2\x2\x2\x8AB");
		sb.Append("\x8AC\x3\x2\x2\x2\x8AC\x8AA\x3\x2\x2\x2\x8AC\x8AD\x3\x2\x2\x2");
		sb.Append("\x8AD\x8B4\x3\x2\x2\x2\x8AE\x8B0\x5\x1A\xE\x2\x8AF\x8B1\a\xD4");
		sb.Append("\x2\x2\x8B0\x8AF\x3\x2\x2\x2\x8B1\x8B2\x3\x2\x2\x2\x8B2\x8B0");
		sb.Append("\x3\x2\x2\x2\x8B2\x8B3\x3\x2\x2\x2\x8B3\x8B5\x3\x2\x2\x2\x8B4");
		sb.Append("\x8AE\x3\x2\x2\x2\x8B4\x8B5\x3\x2\x2\x2\x8B5\x8B6\x3\x2\x2\x2");
		sb.Append("\x8B6\x8B7\a\x36\x2\x2\x8B7\xD1\x3\x2\x2\x2\x8B8\x8B9\a\xAE");
		sb.Append("\x2\x2\x8B9\x8BA\a\xD6\x2\x2\x8BA\x8BC\x5\xC4\x63\x2\x8BB\x8BD");
		sb.Append("\a\xD6\x2\x2\x8BC\x8BB\x3\x2\x2\x2\x8BC\x8BD\x3\x2\x2\x2\x8BD");
		sb.Append("\x8BE\x3\x2\x2\x2\x8BE\x8C3\a\xB4\x2\x2\x8BF\x8C1\a\xD6\x2\x2");
		sb.Append("\x8C0\x8BF\x3\x2\x2\x2\x8C0\x8C1\x3\x2\x2\x2\x8C1\x8C2\x3\x2");
		sb.Append("\x2\x2\x8C2\x8C4\x5\x82\x42\x2\x8C3\x8C0\x3\x2\x2\x2\x8C3\x8C4");
		sb.Append("\x3\x2\x2\x2\x8C4\xD3\x3\x2\x2\x2\x8C5\x8C8\x5\xD6l\x2\x8C6");
		sb.Append("\x8C8\x5\xD8m\x2\x8C7\x8C5\x3\x2\x2\x2\x8C7\x8C6\x3\x2\x2\x2");
		sb.Append("\x8C8\xD5\x3\x2\x2\x2\x8C9\x8CA\a\x12\x2\x2\x8CA\x8CB\a\xD6");
		sb.Append("\x2\x2\x8CB\x8CD\x5\xFC\x7F\x2\x8CC\x8CE\x5\x112\x8A\x2\x8CD");
		sb.Append("\x8CC\x3\x2\x2\x2\x8CD\x8CE\x3\x2\x2\x2\x8CE\x8DC\x3\x2\x2\x2");
		sb.Append("\x8CF\x8D1\a\xD6\x2\x2\x8D0\x8CF\x3\x2\x2\x2\x8D0\x8D1\x3\x2");
		sb.Append("\x2\x2\x8D1\x8D2\x3\x2\x2\x2\x8D2\x8D4\a\xBE\x2\x2\x8D3\x8D5");
		sb.Append("\a\xD6\x2\x2\x8D4\x8D3\x3\x2\x2\x2\x8D4\x8D5\x3\x2\x2\x2\x8D5");
		sb.Append("\x8D6\x3\x2\x2\x2\x8D6\x8D8\x5\xECw\x2\x8D7\x8D9\a\xD6\x2\x2");
		sb.Append("\x8D8\x8D7\x3\x2\x2\x2\x8D8\x8D9\x3\x2\x2\x2\x8D9\x8DA\x3\x2");
		sb.Append("\x2\x2\x8DA\x8DB\a\xC8\x2\x2\x8DB\x8DD\x3\x2\x2\x2\x8DC\x8D0");
		sb.Append("\x3\x2\x2\x2\x8DC\x8DD\x3\x2\x2\x2\x8DD\xD7\x3\x2\x2\x2\x8DE");
		sb.Append("\x8DF\a\x12\x2\x2\x8DF\x8E1\a\xD6\x2\x2\x8E0\x8E2\x5\xE0q\x2");
		sb.Append("\x8E1\x8E0\x3\x2\x2\x2\x8E1\x8E2\x3\x2\x2\x2\x8E2\x8E3\x3\x2");
		sb.Append("\x2\x2\x8E3\x8E4\a\xB7\x2\x2\x8E4\x8E6\x5\xFC\x7F\x2\x8E5\x8E7");
		sb.Append("\x5\x112\x8A\x2\x8E6\x8E5\x3\x2\x2\x2\x8E6\x8E7\x3\x2\x2\x2");
		sb.Append("\x8E7\x8F5\x3\x2\x2\x2\x8E8\x8EA\a\xD6\x2\x2\x8E9\x8E8\x3\x2");
		sb.Append("\x2\x2\x8E9\x8EA\x3\x2\x2\x2\x8EA\x8EB\x3\x2\x2\x2\x8EB\x8ED");
		sb.Append("\a\xBE\x2\x2\x8EC\x8EE\a\xD6\x2\x2\x8ED\x8EC\x3\x2\x2\x2\x8ED");
		sb.Append("\x8EE\x3\x2\x2\x2\x8EE\x8EF\x3\x2\x2\x2\x8EF\x8F1\x5\xECw\x2");
		sb.Append("\x8F0\x8F2\a\xD6\x2\x2\x8F1\x8F0\x3\x2\x2\x2\x8F1\x8F2\x3\x2");
		sb.Append("\x2\x2\x8F2\x8F3\x3\x2\x2\x2\x8F3\x8F4\a\xC8\x2\x2\x8F4\x8F6");
		sb.Append("\x3\x2\x2\x2\x8F5\x8E9\x3\x2\x2\x2\x8F5\x8F6\x3\x2\x2\x2\x8F6");
		sb.Append("\xD9\x3\x2\x2\x2\x8F7\x8FA\x5\xDCo\x2\x8F8\x8FA\x5\xDEp\x2\x8F9");
		sb.Append("\x8F7\x3\x2\x2\x2\x8F9\x8F8\x3\x2\x2\x2\x8FA\xDB\x3\x2\x2\x2");
		sb.Append("\x8FB\x8FE\x5\x102\x82\x2\x8FC\x8FD\a\xD6\x2\x2\x8FD\x8FF\x5");
		sb.Append("\xECw\x2\x8FE\x8FC\x3\x2\x2\x2\x8FE\x8FF\x3\x2\x2\x2\x8FF\xDD");
		sb.Append("\x3\x2\x2\x2\x900\x902\x5\xE0q\x2\x901\x900\x3\x2\x2\x2\x901");
		sb.Append("\x902\x3\x2\x2\x2\x902\x903\x3\x2\x2\x2\x903\x904\a\xB7\x2\x2");
		sb.Append("\x904\x906\x5\xFC\x7F\x2\x905\x907\x5\x112\x8A\x2\x906\x905");
		sb.Append("\x3\x2\x2\x2\x906\x907\x3\x2\x2\x2\x907\x90A\x3\x2\x2\x2\x908");
		sb.Append("\x909\a\xD6\x2\x2\x909\x90B\x5\xECw\x2\x90A\x908\x3\x2\x2\x2");
		sb.Append("\x90A\x90B\x3\x2\x2\x2\x90B\x90D\x3\x2\x2\x2\x90C\x90E\x5\xF0");
		sb.Append("y\x2\x90D\x90C\x3\x2\x2\x2\x90D\x90E\x3\x2\x2\x2\x90E\xDF\x3");
		sb.Append("\x2\x2\x2\x90F\x914\x5\xE6t\x2\x910\x914\x5\xE2r\x2\x911\x914");
		sb.Append("\x5\xE4s\x2\x912\x914\x5\xEAv\x2\x913\x90F\x3\x2\x2\x2\x913");
		sb.Append("\x910\x3\x2\x2\x2\x913\x911\x3\x2\x2\x2\x913\x912\x3\x2\x2\x2");
		sb.Append("\x914\xE1\x3\x2\x2\x2\x915\x917\x5\xFC\x7F\x2\x916\x918\x5\x112");
		sb.Append("\x8A\x2\x917\x916\x3\x2\x2\x2\x917\x918\x3\x2\x2\x2\x918\x91A");
		sb.Append("\x3\x2\x2\x2\x919\x91B\x5\xF0y\x2\x91A\x919\x3\x2\x2\x2\x91A");
		sb.Append("\x91B\x3\x2\x2\x2\x91B\xE3\x3\x2\x2\x2\x91C\x91F\x5\xFC\x7F");
		sb.Append("\x2\x91D\x91F\x5\x100\x81\x2\x91E\x91C\x3\x2\x2\x2\x91E\x91D");
		sb.Append("\x3\x2\x2\x2\x91F\x921\x3\x2\x2\x2\x920\x922\x5\x112\x8A\x2");
		sb.Append("\x921\x920\x3\x2\x2\x2\x921\x922\x3\x2\x2\x2\x922\x924\x3\x2");
		sb.Append("\x2\x2\x923\x925\a\xD6\x2\x2\x924\x923\x3\x2\x2\x2\x924\x925");
		sb.Append("\x3\x2\x2\x2\x925\x926\x3\x2\x2\x2\x926\x928\a\xBE\x2\x2\x927");
		sb.Append("\x929\a\xD6\x2\x2\x928\x927\x3\x2\x2\x2\x928\x929\x3\x2\x2\x2");
		sb.Append("\x929\x92E\x3\x2\x2\x2\x92A\x92C\x5\xECw\x2\x92B\x92D\a\xD6");
		sb.Append("\x2\x2\x92C\x92B\x3\x2\x2\x2\x92C\x92D\x3\x2\x2\x2\x92D\x92F");
		sb.Append("\x3\x2\x2\x2\x92E\x92A\x3\x2\x2\x2\x92E\x92F\x3\x2\x2\x2\x92F");
		sb.Append("\x930\x3\x2\x2\x2\x930\x932\a\xC8\x2\x2\x931\x933\x5\xF0y\x2");
		sb.Append("\x932\x931\x3\x2\x2\x2\x932\x933\x3\x2\x2\x2\x933\xE5\x3\x2");
		sb.Append("\x2\x2\x934\x937\x5\xE2r\x2\x935\x937\x5\xE4s\x2\x936\x934\x3");
		sb.Append("\x2\x2\x2\x936\x935\x3\x2\x2\x2\x936\x937\x3\x2\x2\x2\x937\x939");
		sb.Append("\x3\x2\x2\x2\x938\x93A\x5\xE8u\x2\x939\x938\x3\x2\x2\x2\x93A");
		sb.Append("\x93B\x3\x2\x2\x2\x93B\x939\x3\x2\x2\x2\x93B\x93C\x3\x2\x2\x2");
		sb.Append("\x93C\x93E\x3\x2\x2\x2\x93D\x93F\x5\xF0y\x2\x93E\x93D\x3\x2");
		sb.Append("\x2\x2\x93E\x93F\x3\x2\x2\x2\x93F\xE7\x3\x2\x2\x2\x940\x943");
		sb.Append("\a\xB7\x2\x2\x941\x944\x5\xE2r\x2\x942\x944\x5\xE4s\x2\x943");
		sb.Append("\x941\x3\x2\x2\x2\x943\x942\x3\x2\x2\x2\x944\xE9\x3\x2\x2\x2");
		sb.Append("\x945\x946\x5\xF0y\x2\x946\xEB\x3\x2\x2\x2\x947\x949\x5\xEE");
		sb.Append("x\x2\x948\x947\x3\x2\x2\x2\x948\x949\x3\x2\x2\x2\x949\x94B\x3");
		sb.Append("\x2\x2\x2\x94A\x94C\a\xD6\x2\x2\x94B\x94A\x3\x2\x2\x2\x94B\x94C");
		sb.Append("\x3\x2\x2\x2\x94C\x94D\x3\x2\x2\x2\x94D\x94F\t\n\x2\x2\x94E");
		sb.Append("\x950\a\xD6\x2\x2\x94F\x94E\x3\x2\x2\x2\x94F\x950\x3\x2\x2\x2");
		sb.Append("\x950\x952\x3\x2\x2\x2\x951\x948\x3\x2\x2\x2\x952\x955\x3\x2");
		sb.Append("\x2\x2\x953\x951\x3\x2\x2\x2\x953\x954\x3\x2\x2\x2\x954\x956");
		sb.Append("\x3\x2\x2\x2\x955\x953\x3\x2\x2\x2\x956\x963\x5\xEEx\x2\x957");
		sb.Append("\x959\a\xD6\x2\x2\x958\x957\x3\x2\x2\x2\x958\x959\x3\x2\x2\x2");
		sb.Append("\x959\x95A\x3\x2\x2\x2\x95A\x95C\t\n\x2\x2\x95B\x95D\a\xD6\x2");
		sb.Append("\x2\x95C\x95B\x3\x2\x2\x2\x95C\x95D\x3\x2\x2\x2\x95D\x95F\x3");
		sb.Append("\x2\x2\x2\x95E\x960\x5\xEEx\x2\x95F\x95E\x3\x2\x2\x2\x95F\x960");
		sb.Append("\x3\x2\x2\x2\x960\x962\x3\x2\x2\x2\x961\x958\x3\x2\x2\x2\x962");
		sb.Append("\x965\x3\x2\x2\x2\x963\x961\x3\x2\x2\x2\x963\x964\x3\x2\x2\x2");
		sb.Append("\x964\xED\x3\x2\x2\x2\x965\x963\x3\x2\x2\x2\x966\x967\t\f\x2");
		sb.Append("\x2\x967\x969\a\xD6\x2\x2\x968\x966\x3\x2\x2\x2\x968\x969\x3");
		sb.Append("\x2\x2\x2\x969\x96A\x3\x2\x2\x2\x96A\x96B\x5\xC4\x63\x2\x96B");
		sb.Append("\xEF\x3\x2\x2\x2\x96C\x96D\a\xB9\x2\x2\x96D\x96F\x5\xFC\x7F");
		sb.Append("\x2\x96E\x970\x5\x112\x8A\x2\x96F\x96E\x3\x2\x2\x2\x96F\x970");
		sb.Append("\x3\x2\x2\x2\x970\xF1\x3\x2\x2\x2\x971\x983\a\xBE\x2\x2\x972");
		sb.Append("\x974\a\xD6\x2\x2\x973\x972\x3\x2\x2\x2\x973\x974\x3\x2\x2\x2");
		sb.Append("\x974\x975\x3\x2\x2\x2\x975\x980\x5\xF4{\x2\x976\x978\a\xD6");
		sb.Append("\x2\x2\x977\x976\x3\x2\x2\x2\x977\x978\x3\x2\x2\x2\x978\x979");
		sb.Append("\x3\x2\x2\x2\x979\x97B\a\xB4\x2\x2\x97A\x97C\a\xD6\x2\x2\x97B");
		sb.Append("\x97A\x3\x2\x2\x2\x97B\x97C\x3\x2\x2\x2\x97C\x97D\x3\x2\x2\x2");
		sb.Append("\x97D\x97F\x5\xF4{\x2\x97E\x977\x3\x2\x2\x2\x97F\x982\x3\x2");
		sb.Append("\x2\x2\x980\x97E\x3\x2\x2\x2\x980\x981\x3\x2\x2\x2\x981\x984");
		sb.Append("\x3\x2\x2\x2\x982\x980\x3\x2\x2\x2\x983\x973\x3\x2\x2\x2\x983");
		sb.Append("\x984\x3\x2\x2\x2\x984\x986\x3\x2\x2\x2\x985\x987\a\xD6\x2\x2");
		sb.Append("\x986\x985\x3\x2\x2\x2\x986\x987\x3\x2\x2\x2\x987\x988\x3\x2");
		sb.Append("\x2\x2\x988\x989\a\xC8\x2\x2\x989\xF3\x3\x2\x2\x2\x98A\x98B");
		sb.Append("\aq\x2\x2\x98B\x98D\a\xD6\x2\x2\x98C\x98A\x3\x2\x2\x2\x98C\x98D");
		sb.Append("\x3\x2\x2\x2\x98D\x990\x3\x2\x2\x2\x98E\x98F\t\r\x2\x2\x98F");
		sb.Append("\x991\a\xD6\x2\x2\x990\x98E\x3\x2\x2\x2\x990\x991\x3\x2\x2\x2");
		sb.Append("\x991\x994\x3\x2\x2\x2\x992\x993\ax\x2\x2\x993\x995\a\xD6\x2");
		sb.Append("\x2\x994\x992\x3\x2\x2\x2\x994\x995\x3\x2\x2\x2\x995\x996\x3");
		sb.Append("\x2\x2\x2\x996\x99F\x5\xFC\x7F\x2\x997\x999\a\xD6\x2\x2\x998");
		sb.Append("\x997\x3\x2\x2\x2\x998\x999\x3\x2\x2\x2\x999\x99A\x3\x2\x2\x2");
		sb.Append("\x99A\x99C\a\xBE\x2\x2\x99B\x99D\a\xD6\x2\x2\x99C\x99B\x3\x2");
		sb.Append("\x2\x2\x99C\x99D\x3\x2\x2\x2\x99D\x99E\x3\x2\x2\x2\x99E\x9A0");
		sb.Append("\a\xC8\x2\x2\x99F\x998\x3\x2\x2\x2\x99F\x9A0\x3\x2\x2\x2\x9A0");
		sb.Append("\x9A3\x3\x2\x2\x2\x9A1\x9A2\a\xD6\x2\x2\x9A2\x9A4\x5\xFE\x80");
		sb.Append("\x2\x9A3\x9A1\x3\x2\x2\x2\x9A3\x9A4\x3\x2\x2\x2\x9A4\x9A9\x3");
		sb.Append("\x2\x2\x2\x9A5\x9A7\a\xD6\x2\x2\x9A6\x9A5\x3\x2\x2\x2\x9A6\x9A7");
		sb.Append("\x3\x2\x2\x2\x9A7\x9A8\x3\x2\x2\x2\x9A8\x9AA\x5\xF6|\x2\x9A9");
		sb.Append("\x9A6\x3\x2\x2\x2\x9A9\x9AA\x3\x2\x2\x2\x9AA\xF5\x3\x2\x2\x2");
		sb.Append("\x9AB\x9AD\a\xB8\x2\x2\x9AC\x9AE\a\xD6\x2\x2\x9AD\x9AC\x3\x2");
		sb.Append("\x2\x2\x9AD\x9AE\x3\x2\x2\x2\x9AE\x9B1\x3\x2\x2\x2\x9AF\x9B2");
		sb.Append("\x5\x10E\x88\x2\x9B0\x9B2\x5\xFC\x7F\x2\x9B1\x9AF\x3\x2\x2\x2");
		sb.Append("\x9B1\x9B0\x3\x2\x2\x2\x9B2\xF7\x3\x2\x2\x2\x9B3\x9BE\x5\xFA");
		sb.Append("~\x2\x9B4\x9B6\a\xD6\x2\x2\x9B5\x9B4\x3\x2\x2\x2\x9B5\x9B6\x3");
		sb.Append("\x2\x2\x2\x9B6\x9B7\x3\x2\x2\x2\x9B7\x9B9\a\xB4\x2\x2\x9B8\x9BA");
		sb.Append("\a\xD6\x2\x2\x9B9\x9B8\x3\x2\x2\x2\x9B9\x9BA\x3\x2\x2\x2\x9BA");
		sb.Append("\x9BB\x3\x2\x2\x2\x9BB\x9BD\x5\xFA~\x2\x9BC\x9B5\x3\x2\x2\x2");
		sb.Append("\x9BD\x9C0\x3\x2\x2\x2\x9BE\x9BC\x3\x2\x2\x2\x9BE\x9BF\x3\x2");
		sb.Append("\x2\x2\x9BF\xF9\x3\x2\x2\x2\x9C0\x9BE\x3\x2\x2\x2\x9C1\x9C2");
		sb.Append("\x5\xC4\x63\x2\x9C2\x9C3\a\xD6\x2\x2\x9C3\x9C4\a\xA0\x2\x2\x9C4");
		sb.Append("\x9C5\a\xD6\x2\x2\x9C5\x9C7\x3\x2\x2\x2\x9C6\x9C1\x3\x2\x2\x2");
		sb.Append("\x9C6\x9C7\x3\x2\x2\x2\x9C7\x9C8\x3\x2\x2\x2\x9C8\x9C9\x5\xC4");
		sb.Append("\x63\x2\x9C9\xFB\x3\x2\x2\x2\x9CA\x9CD\a\xD2\x2\x2\x9CB\x9CD");
		sb.Append("\x5\x116\x8C\x2\x9CC\x9CA\x3\x2\x2\x2\x9CC\x9CB\x3\x2\x2\x2");
		sb.Append("\x9CD\x9CE\x3\x2\x2\x2\x9CE\x9CC\x3\x2\x2\x2\x9CE\x9CF\x3\x2");
		sb.Append("\x2\x2\x9CF\x9D9\x3\x2\x2\x2\x9D0\x9D3\a\xCA\x2\x2\x9D1\x9D4");
		sb.Append("\a\xD2\x2\x2\x9D2\x9D4\x5\x116\x8C\x2\x9D3\x9D1\x3\x2\x2\x2");
		sb.Append("\x9D3\x9D2\x3\x2\x2\x2\x9D4\x9D5\x3\x2\x2\x2\x9D5\x9D3\x3\x2");
		sb.Append("\x2\x2\x9D5\x9D6\x3\x2\x2\x2\x9D6\x9D7\x3\x2\x2\x2\x9D7\x9D9");
		sb.Append("\a\xCB\x2\x2\x9D8\x9CC\x3\x2\x2\x2\x9D8\x9D0\x3\x2\x2\x2\x9D9");
		sb.Append("\xFD\x3\x2\x2\x2\x9DA\x9DB\a\n\x2\x2\x9DB\x9DE\a\xD6\x2\x2\x9DC");
		sb.Append("\x9DD\aj\x2\x2\x9DD\x9DF\a\xD6\x2\x2\x9DE\x9DC\x3\x2\x2\x2\x9DE");
		sb.Append("\x9DF\x3\x2\x2\x2\x9DF\x9E0\x3\x2\x2\x2\x9E0\x9E3\x5\x110\x89");
		sb.Append("\x2\x9E1\x9E2\a\xD6\x2\x2\x9E2\x9E4\x5\x108\x85\x2\x9E3\x9E1");
		sb.Append("\x3\x2\x2\x2\x9E3\x9E4\x3\x2\x2\x2\x9E4\xFF\x3\x2\x2\x2\x9E5");
		sb.Append("\x9E6\t\xE\x2\x2\x9E6\x101\x3\x2\x2\x2\x9E7\x9EC\a\xD2\x2\x2");
		sb.Append("\x9E8\x9EB\x5\x116\x8C\x2\x9E9\x9EB\a\xD2\x2\x2\x9EA\x9E8\x3");
		sb.Append("\x2\x2\x2\x9EA\x9E9\x3\x2\x2\x2\x9EB\x9EE\x3\x2\x2\x2\x9EC\x9EA");
		sb.Append("\x3\x2\x2\x2\x9EC\x9ED\x3\x2\x2\x2\x9ED\x9F7\x3\x2\x2\x2\x9EE");
		sb.Append("\x9EC\x3\x2\x2\x2\x9EF\x9F2\x5\x116\x8C\x2\x9F0\x9F3\x5\x116");
		sb.Append("\x8C\x2\x9F1\x9F3\a\xD2\x2\x2\x9F2\x9F0\x3\x2\x2\x2\x9F2\x9F1");
		sb.Append("\x3\x2\x2\x2\x9F3\x9F4\x3\x2\x2\x2\x9F4\x9F2\x3\x2\x2\x2\x9F4");
		sb.Append("\x9F5\x3\x2\x2\x2\x9F5\x9F7\x3\x2\x2\x2\x9F6\x9E7\x3\x2\x2\x2");
		sb.Append("\x9F6\x9EF\x3\x2\x2\x2\x9F7\x103\x3\x2\x2\x2\x9F8\x9F9\t\xF");
		sb.Append("\x2\x2\x9F9\x105\x3\x2\x2\x2\x9FA\x9FF\x5\xFC\x7F\x2\x9FB\x9FC");
		sb.Append("\a\xB7\x2\x2\x9FC\x9FE\x5\xFC\x7F\x2\x9FD\x9FB\x3\x2\x2\x2\x9FE");
		sb.Append("\xA01\x3\x2\x2\x2\x9FF\x9FD\x3\x2\x2\x2\x9FF\xA00\x3\x2\x2\x2");
		sb.Append("\xA00\x107\x3\x2\x2\x2\xA01\x9FF\x3\x2\x2\x2\xA02\xA04\a\xC2");
		sb.Append("\x2\x2\xA03\xA05\a\xD6\x2\x2\xA04\xA03\x3\x2\x2\x2\xA04\xA05");
		sb.Append("\x3\x2\x2\x2\xA05\xA08\x3\x2\x2\x2\xA06\xA09\a\xCF\x2\x2\xA07");
		sb.Append("\xA09\x5\xFC\x7F\x2\xA08\xA06\x3\x2\x2\x2\xA08\xA07\x3\x2\x2");
		sb.Append("\x2\xA09\x109\x3\x2\x2\x2\xA0A\xA13\x5\x102\x82\x2\xA0B\xA0D");
		sb.Append("\a\xD6\x2\x2\xA0C\xA0B\x3\x2\x2\x2\xA0C\xA0D\x3\x2\x2\x2\xA0D");
		sb.Append("\xA0E\x3\x2\x2\x2\xA0E\xA10\a\xC0\x2\x2\xA0F\xA11\a\xD6\x2\x2");
		sb.Append("\xA10\xA0F\x3\x2\x2\x2\xA10\xA11\x3\x2\x2\x2\xA11\xA12\x3\x2");
		sb.Append("\x2\x2\xA12\xA14\x5\x102\x82\x2\xA13\xA0C\x3\x2\x2\x2\xA13\xA14");
		sb.Append("\x3\x2\x2\x2\xA14\x10B\x3\x2\x2\x2\xA15\xA16\x5\xFC\x7F\x2\xA16");
		sb.Append("\xA17\a\xB3\x2\x2\xA17\x10D\x3\x2\x2\x2\xA18\xA19\t\x10\x2\x2");
		sb.Append("\xA19\x10F\x3\x2\x2\x2\xA1A\xA1D\x5\x100\x81\x2\xA1B\xA1D\x5");
		sb.Append("\x106\x84\x2\xA1C\xA1A\x3\x2\x2\x2\xA1C\xA1B\x3\x2\x2\x2\xA1D");
		sb.Append("\xA26\x3\x2\x2\x2\xA1E\xA20\a\xD6\x2\x2\xA1F\xA1E\x3\x2\x2\x2");
		sb.Append("\xA1F\xA20\x3\x2\x2\x2\xA20\xA21\x3\x2\x2\x2\xA21\xA23\a\xBE");
		sb.Append("\x2\x2\xA22\xA24\a\xD6\x2\x2\xA23\xA22\x3\x2\x2\x2\xA23\xA24");
		sb.Append("\x3\x2\x2\x2\xA24\xA25\x3\x2\x2\x2\xA25\xA27\a\xC8\x2\x2\xA26");
		sb.Append("\xA1F\x3\x2\x2\x2\xA26\xA27\x3\x2\x2\x2\xA27\x111\x3\x2\x2\x2");
		sb.Append("\xA28\xA29\t\x11\x2\x2\xA29\x113\x3\x2\x2\x2\xA2A\xA2B\t\x12");
		sb.Append("\x2\x2\xA2B\x115\x3\x2\x2\x2\xA2C\xA2D\t\x13\x2\x2\xA2D\x117");
		sb.Append("\x3\x2\x2\x2\x1BC\x11C\x121\x128\x12A\x12D\x132\x136\x13B\x13F");
		sb.Append("\x144\x148\x14D\x151\x15D\x162\x168\x16C\x170\x179\x17D\x183");
		sb.Append("\x187\x191\x197\x19C\x1AA\x1B2\x1B6\x1BA\x1BE\x1C3\x1CA\x1CD");
		sb.Append("\x1D2\x218\x21E\x222\x225\x235\x239\x23E\x241\x246\x24C\x250");
		sb.Append("\x255\x25A\x25E\x261\x265\x26B\x26F\x276\x27C\x27F\x284\x28E");
		sb.Append("\x291\x294\x298\x29E\x2A2\x2A7\x2AE\x2B2\x2B6\x2BA\x2BD\x2C3");
		sb.Append("\x2C9\x2CB\x2D6\x2DC\x2DE\x2E6\x2EC\x2F4\x2FB\x303\x308\x30F");
		sb.Append("\x313\x316\x31B\x321\x325\x32A\x334\x33A\x344\x348\x352\x35B");
		sb.Append("\x361\x363\x368\x36E\x372\x375\x379\x384\x389\x38F\x391\x396");
		sb.Append("\x39B\x39F\x3A5\x3A8\x3AC\x3B1\x3B7\x3B9\x3C1\x3C5\x3C8\x3CB");
		sb.Append("\x3CF\x3E6\x3EC\x3F0\x3F4\x3FE\x404\x406\x412\x418\x41A\x420");
		sb.Append("\x426\x428\x432\x436\x43B\x443\x447\x44B\x453\x457\x463\x467");
		sb.Append("\x46E\x470\x476\x47A\x482\x486\x492\x498\x49A\x4A4\x4AA\x4AC");
		sb.Append("\x4B2\x4B8\x4BA\x4BE\x4C2\x4C6\x4DE\x4E8\x4EC\x4F1\x4FC\x500");
		sb.Append("\x505\x513\x517\x520\x524\x527\x52B\x52F\x532\x536\x53A\x53D");
		sb.Append("\x541\x544\x548\x54A\x54F\x553\x557\x55B\x55D\x563\x567\x56A");
		sb.Append("\x56F\x573\x579\x57C\x57F\x583\x588\x58E\x590\x597\x59B\x5A1");
		sb.Append("\x5A4\x5A9\x5AF\x5B1\x5B8\x5BC\x5C2\x5C5\x5CA\x5D0\x5D2\x5DA");
		sb.Append("\x5DE\x5E1\x5E4\x5E8\x5F0\x5F4\x5F8\x5FA\x5FD\x602\x608\x60C");
		sb.Append("\x610\x615\x61A\x61E\x622\x627\x62F\x631\x63D\x641\x649\x64D");
		sb.Append("\x655\x659\x65D\x661\x665\x669\x671\x675\x681\x686\x68A\x692");
		sb.Append("\x695\x69A\x6A0\x6A2\x6A8\x6AA\x6AF\x6B3\x6B9\x6BD\x6C2\x6CB");
		sb.Append("\x6CF\x6D4\x6D7\x6DD\x6E1\x6E4\x6EA\x6EE\x6F6\x6FA\x703\x707");
		sb.Append("\x70D\x710\x715\x71B\x71D\x723\x727\x72E\x736\x73B\x742\x746");
		sb.Append("\x749\x74C\x74F\x753\x758\x761\x76B\x76F\x776\x778\x77F\x783");
		sb.Append("\x787\x78C\x79B\x79F\x7A5\x7AA\x7B0\x7BE\x7C2\x7C7\x7CB\x7D0");
		sb.Append("\x7D4\x7D9\x7DD\x7E2\x7E6\x7EB\x7EF\x7F9\x7FD\x802\x806\x80B");
		sb.Append("\x80F\x814\x818\x81D\x821\x826\x82A\x839\x83D\x842\x846\x84E");
		sb.Append("\x850\x856\x85B\x861\x865\x86A\x86F\x873\x877\x879\x87D\x87F");
		sb.Append("\x882\x886\x88E\x895\x89E\x8A2\x8AC\x8B2\x8B4\x8BC\x8C0\x8C3");
		sb.Append("\x8C7\x8CD\x8D0\x8D4\x8D8\x8DC\x8E1\x8E6\x8E9\x8ED\x8F1\x8F5");
		sb.Append("\x8F9\x8FE\x901\x906\x90A\x90D\x913\x917\x91A\x91E\x921\x924");
		sb.Append("\x928\x92C\x92E\x932\x936\x93B\x93E\x943\x948\x94B\x94F\x953");
		sb.Append("\x958\x95C\x95F\x963\x968\x96F\x973\x977\x97B\x980\x983\x986");
		sb.Append("\x98C\x990\x994\x998\x99C\x99F\x9A3\x9A6\x9A9\x9AD\x9B1\x9B5");
		sb.Append("\x9B9\x9BE\x9C6\x9CC\x9CE\x9D3\x9D5\x9D8\x9DE\x9E3\x9EA\x9EC");
		sb.Append("\x9F2\x9F4\x9F6\x9FF\xA04\xA08\xA0C\xA10\xA13\xA1C\xA1F\xA23");
		sb.Append("\xA26");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace EclipseSourceConverter.VB6
